// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/gzip/compressor/v3/gzip.proto

package io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3;

/**
 * <pre>
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.compression.gzip.compressor.v3.Gzip}
 */
public final class Gzip extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.compression.gzip.compressor.v3.Gzip)
    GzipOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Gzip.newBuilder() to construct.
  private Gzip(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Gzip() {
    compressionLevel_ = 0;
    compressionStrategy_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Gzip();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Gzip(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (memoryLevel_ != null) {
              subBuilder = memoryLevel_.toBuilder();
            }
            memoryLevel_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(memoryLevel_);
              memoryLevel_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            compressionLevel_ = rawValue;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            compressionStrategy_ = rawValue;
            break;
          }
          case 34: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (windowBits_ != null) {
              subBuilder = windowBits_.toBuilder();
            }
            windowBits_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(windowBits_);
              windowBits_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (chunkSize_ != null) {
              subBuilder = chunkSize_.toBuilder();
            }
            chunkSize_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(chunkSize_);
              chunkSize_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_compressor_v3_Gzip_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_compressor_v3_Gzip_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.class, io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.Builder.class);
  }

  /**
   * <pre>
   * All the values of this enumeration translate directly to zlib's compression strategies.
   * For more information about each strategy, please refer to zlib manual.
   * </pre>
   *
   * Protobuf enum {@code envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy}
   */
  public enum CompressionStrategy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DEFAULT_STRATEGY = 0;</code>
     */
    DEFAULT_STRATEGY(0),
    /**
     * <code>FILTERED = 1;</code>
     */
    FILTERED(1),
    /**
     * <code>HUFFMAN_ONLY = 2;</code>
     */
    HUFFMAN_ONLY(2),
    /**
     * <code>RLE = 3;</code>
     */
    RLE(3),
    /**
     * <code>FIXED = 4;</code>
     */
    FIXED(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DEFAULT_STRATEGY = 0;</code>
     */
    public static final int DEFAULT_STRATEGY_VALUE = 0;
    /**
     * <code>FILTERED = 1;</code>
     */
    public static final int FILTERED_VALUE = 1;
    /**
     * <code>HUFFMAN_ONLY = 2;</code>
     */
    public static final int HUFFMAN_ONLY_VALUE = 2;
    /**
     * <code>RLE = 3;</code>
     */
    public static final int RLE_VALUE = 3;
    /**
     * <code>FIXED = 4;</code>
     */
    public static final int FIXED_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompressionStrategy valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompressionStrategy forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_STRATEGY;
        case 1: return FILTERED;
        case 2: return HUFFMAN_ONLY;
        case 3: return RLE;
        case 4: return FIXED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompressionStrategy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompressionStrategy> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompressionStrategy>() {
            public CompressionStrategy findValueByNumber(int number) {
              return CompressionStrategy.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompressionStrategy[] VALUES = values();

    public static CompressionStrategy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompressionStrategy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy)
  }

  /**
   * Protobuf enum {@code envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel}
   */
  public enum CompressionLevel
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DEFAULT_COMPRESSION = 0;</code>
     */
    DEFAULT_COMPRESSION(0, 0),
    /**
     * <code>BEST_SPEED = 1;</code>
     */
    BEST_SPEED(1, 1),
    /**
     * <code>COMPRESSION_LEVEL_2 = 2;</code>
     */
    COMPRESSION_LEVEL_2(3, 2),
    /**
     * <code>COMPRESSION_LEVEL_3 = 3;</code>
     */
    COMPRESSION_LEVEL_3(4, 3),
    /**
     * <code>COMPRESSION_LEVEL_4 = 4;</code>
     */
    COMPRESSION_LEVEL_4(5, 4),
    /**
     * <code>COMPRESSION_LEVEL_5 = 5;</code>
     */
    COMPRESSION_LEVEL_5(6, 5),
    /**
     * <code>COMPRESSION_LEVEL_6 = 6;</code>
     */
    COMPRESSION_LEVEL_6(7, 6),
    /**
     * <code>COMPRESSION_LEVEL_7 = 7;</code>
     */
    COMPRESSION_LEVEL_7(8, 7),
    /**
     * <code>COMPRESSION_LEVEL_8 = 8;</code>
     */
    COMPRESSION_LEVEL_8(9, 8),
    /**
     * <code>COMPRESSION_LEVEL_9 = 9;</code>
     */
    COMPRESSION_LEVEL_9(10, 9),
    UNRECOGNIZED(-1, -1),
    ;

    /**
     * <code>COMPRESSION_LEVEL_1 = 1;</code>
     */
    public static final CompressionLevel COMPRESSION_LEVEL_1 = BEST_SPEED;
    /**
     * <code>BEST_COMPRESSION = 9;</code>
     */
    public static final CompressionLevel BEST_COMPRESSION = COMPRESSION_LEVEL_9;
    /**
     * <code>DEFAULT_COMPRESSION = 0;</code>
     */
    public static final int DEFAULT_COMPRESSION_VALUE = 0;
    /**
     * <code>BEST_SPEED = 1;</code>
     */
    public static final int BEST_SPEED_VALUE = 1;
    /**
     * <code>COMPRESSION_LEVEL_1 = 1;</code>
     */
    public static final int COMPRESSION_LEVEL_1_VALUE = 1;
    /**
     * <code>COMPRESSION_LEVEL_2 = 2;</code>
     */
    public static final int COMPRESSION_LEVEL_2_VALUE = 2;
    /**
     * <code>COMPRESSION_LEVEL_3 = 3;</code>
     */
    public static final int COMPRESSION_LEVEL_3_VALUE = 3;
    /**
     * <code>COMPRESSION_LEVEL_4 = 4;</code>
     */
    public static final int COMPRESSION_LEVEL_4_VALUE = 4;
    /**
     * <code>COMPRESSION_LEVEL_5 = 5;</code>
     */
    public static final int COMPRESSION_LEVEL_5_VALUE = 5;
    /**
     * <code>COMPRESSION_LEVEL_6 = 6;</code>
     */
    public static final int COMPRESSION_LEVEL_6_VALUE = 6;
    /**
     * <code>COMPRESSION_LEVEL_7 = 7;</code>
     */
    public static final int COMPRESSION_LEVEL_7_VALUE = 7;
    /**
     * <code>COMPRESSION_LEVEL_8 = 8;</code>
     */
    public static final int COMPRESSION_LEVEL_8_VALUE = 8;
    /**
     * <code>COMPRESSION_LEVEL_9 = 9;</code>
     */
    public static final int COMPRESSION_LEVEL_9_VALUE = 9;
    /**
     * <code>BEST_COMPRESSION = 9;</code>
     */
    public static final int BEST_COMPRESSION_VALUE = 9;


    public final int getNumber() {
      if (index == -1) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompressionLevel valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompressionLevel forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_COMPRESSION;
        case 1: return BEST_SPEED;
        case 2: return COMPRESSION_LEVEL_2;
        case 3: return COMPRESSION_LEVEL_3;
        case 4: return COMPRESSION_LEVEL_4;
        case 5: return COMPRESSION_LEVEL_5;
        case 6: return COMPRESSION_LEVEL_6;
        case 7: return COMPRESSION_LEVEL_7;
        case 8: return COMPRESSION_LEVEL_8;
        case 9: return COMPRESSION_LEVEL_9;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompressionLevel>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompressionLevel> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompressionLevel>() {
            public CompressionLevel findValueByNumber(int number) {
              return CompressionLevel.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (index == -1) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.getDescriptor().getEnumTypes().get(1);
    }

    private static final CompressionLevel[] VALUES = getStaticValuesArray();
    private static CompressionLevel[] getStaticValuesArray() {
      return new CompressionLevel[] {
        DEFAULT_COMPRESSION, BEST_SPEED, COMPRESSION_LEVEL_1, COMPRESSION_LEVEL_2, COMPRESSION_LEVEL_3, COMPRESSION_LEVEL_4, COMPRESSION_LEVEL_5, COMPRESSION_LEVEL_6, COMPRESSION_LEVEL_7, COMPRESSION_LEVEL_8, COMPRESSION_LEVEL_9, BEST_COMPRESSION, 
      };
    }
    public static CompressionLevel valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CompressionLevel(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel)
  }

  public static final int MEMORY_LEVEL_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value memoryLevel_;
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the memoryLevel field is set.
   */
  @java.lang.Override
  public boolean hasMemoryLevel() {
    return memoryLevel_ != null;
  }
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   * @return The memoryLevel.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMemoryLevel() {
    return memoryLevel_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : memoryLevel_;
  }
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMemoryLevelOrBuilder() {
    return getMemoryLevel();
  }

  public static final int COMPRESSION_LEVEL_FIELD_NUMBER = 2;
  private int compressionLevel_;
  /**
   * <pre>
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
   * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
   * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
   * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
   * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
   * This field will be set to "DEFAULT_COMPRESSION" if not specified.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for compressionLevel.
   */
  @java.lang.Override public int getCompressionLevelValue() {
    return compressionLevel_;
  }
  /**
   * <pre>
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
   * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
   * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
   * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
   * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
   * This field will be set to "DEFAULT_COMPRESSION" if not specified.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
   * @return The compressionLevel.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel getCompressionLevel() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel result = io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel.valueOf(compressionLevel_);
    return result == null ? io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel.UNRECOGNIZED : result;
  }

  public static final int COMPRESSION_STRATEGY_FIELD_NUMBER = 3;
  private int compressionStrategy_;
  /**
   * <pre>
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
   * which is also the default value for the parameter, though there are situations when
   * changing this parameter might produce better results. For example, run-length encoding (RLE)
   * is typically used when the content is known for having sequences which same data occurs many
   * consecutive times. For more information about each strategy, please refer to zlib manual.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for compressionStrategy.
   */
  @java.lang.Override public int getCompressionStrategyValue() {
    return compressionStrategy_;
  }
  /**
   * <pre>
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
   * which is also the default value for the parameter, though there are situations when
   * changing this parameter might produce better results. For example, run-length encoding (RLE)
   * is typically used when the content is known for having sequences which same data occurs many
   * consecutive times. For more information about each strategy, please refer to zlib manual.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The compressionStrategy.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy getCompressionStrategy() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy result = io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy.valueOf(compressionStrategy_);
    return result == null ? io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy.UNRECOGNIZED : result;
  }

  public static final int WINDOW_BITS_FIELD_NUMBER = 4;
  private com.google.protobuf.UInt32Value windowBits_;
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the windowBits field is set.
   */
  @java.lang.Override
  public boolean hasWindowBits() {
    return windowBits_ != null;
  }
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
   * @return The windowBits.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getWindowBits() {
    return windowBits_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
  }
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getWindowBitsOrBuilder() {
    return getWindowBits();
  }

  public static final int CHUNK_SIZE_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt32Value chunkSize_;
  /**
   * <pre>
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  @java.lang.Override
  public boolean hasChunkSize() {
    return chunkSize_ != null;
  }
  /**
   * <pre>
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getChunkSize() {
    return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
  }
  /**
   * <pre>
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
    return getChunkSize();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (memoryLevel_ != null) {
      output.writeMessage(1, getMemoryLevel());
    }
    if (compressionLevel_ != io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel.DEFAULT_COMPRESSION.getNumber()) {
      output.writeEnum(2, compressionLevel_);
    }
    if (compressionStrategy_ != io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy.DEFAULT_STRATEGY.getNumber()) {
      output.writeEnum(3, compressionStrategy_);
    }
    if (windowBits_ != null) {
      output.writeMessage(4, getWindowBits());
    }
    if (chunkSize_ != null) {
      output.writeMessage(5, getChunkSize());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (memoryLevel_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getMemoryLevel());
    }
    if (compressionLevel_ != io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel.DEFAULT_COMPRESSION.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, compressionLevel_);
    }
    if (compressionStrategy_ != io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy.DEFAULT_STRATEGY.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, compressionStrategy_);
    }
    if (windowBits_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getWindowBits());
    }
    if (chunkSize_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getChunkSize());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip other = (io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip) obj;

    if (hasMemoryLevel() != other.hasMemoryLevel()) return false;
    if (hasMemoryLevel()) {
      if (!getMemoryLevel()
          .equals(other.getMemoryLevel())) return false;
    }
    if (compressionLevel_ != other.compressionLevel_) return false;
    if (compressionStrategy_ != other.compressionStrategy_) return false;
    if (hasWindowBits() != other.hasWindowBits()) return false;
    if (hasWindowBits()) {
      if (!getWindowBits()
          .equals(other.getWindowBits())) return false;
    }
    if (hasChunkSize() != other.hasChunkSize()) return false;
    if (hasChunkSize()) {
      if (!getChunkSize()
          .equals(other.getChunkSize())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasMemoryLevel()) {
      hash = (37 * hash) + MEMORY_LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + getMemoryLevel().hashCode();
    }
    hash = (37 * hash) + COMPRESSION_LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + compressionLevel_;
    hash = (37 * hash) + COMPRESSION_STRATEGY_FIELD_NUMBER;
    hash = (53 * hash) + compressionStrategy_;
    if (hasWindowBits()) {
      hash = (37 * hash) + WINDOW_BITS_FIELD_NUMBER;
      hash = (53 * hash) + getWindowBits().hashCode();
    }
    if (hasChunkSize()) {
      hash = (37 * hash) + CHUNK_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getChunkSize().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.compression.gzip.compressor.v3.Gzip}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.compression.gzip.compressor.v3.Gzip)
      io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.GzipOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_compressor_v3_Gzip_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_compressor_v3_Gzip_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.class, io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (memoryLevelBuilder_ == null) {
        memoryLevel_ = null;
      } else {
        memoryLevel_ = null;
        memoryLevelBuilder_ = null;
      }
      compressionLevel_ = 0;

      compressionStrategy_ = 0;

      if (windowBitsBuilder_ == null) {
        windowBits_ = null;
      } else {
        windowBits_ = null;
        windowBitsBuilder_ = null;
      }
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = null;
      } else {
        chunkSize_ = null;
        chunkSizeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.GzipProto.internal_static_envoy_extensions_compression_gzip_compressor_v3_Gzip_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip build() {
      io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip buildPartial() {
      io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip result = new io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip(this);
      if (memoryLevelBuilder_ == null) {
        result.memoryLevel_ = memoryLevel_;
      } else {
        result.memoryLevel_ = memoryLevelBuilder_.build();
      }
      result.compressionLevel_ = compressionLevel_;
      result.compressionStrategy_ = compressionStrategy_;
      if (windowBitsBuilder_ == null) {
        result.windowBits_ = windowBits_;
      } else {
        result.windowBits_ = windowBitsBuilder_.build();
      }
      if (chunkSizeBuilder_ == null) {
        result.chunkSize_ = chunkSize_;
      } else {
        result.chunkSize_ = chunkSizeBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip) {
        return mergeFrom((io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip other) {
      if (other == io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.getDefaultInstance()) return this;
      if (other.hasMemoryLevel()) {
        mergeMemoryLevel(other.getMemoryLevel());
      }
      if (other.compressionLevel_ != 0) {
        setCompressionLevelValue(other.getCompressionLevelValue());
      }
      if (other.compressionStrategy_ != 0) {
        setCompressionStrategyValue(other.getCompressionStrategyValue());
      }
      if (other.hasWindowBits()) {
        mergeWindowBits(other.getWindowBits());
      }
      if (other.hasChunkSize()) {
        mergeChunkSize(other.getChunkSize());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.UInt32Value memoryLevel_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> memoryLevelBuilder_;
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the memoryLevel field is set.
     */
    public boolean hasMemoryLevel() {
      return memoryLevelBuilder_ != null || memoryLevel_ != null;
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     * @return The memoryLevel.
     */
    public com.google.protobuf.UInt32Value getMemoryLevel() {
      if (memoryLevelBuilder_ == null) {
        return memoryLevel_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : memoryLevel_;
      } else {
        return memoryLevelBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setMemoryLevel(com.google.protobuf.UInt32Value value) {
      if (memoryLevelBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        memoryLevel_ = value;
        onChanged();
      } else {
        memoryLevelBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setMemoryLevel(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (memoryLevelBuilder_ == null) {
        memoryLevel_ = builderForValue.build();
        onChanged();
      } else {
        memoryLevelBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMemoryLevel(com.google.protobuf.UInt32Value value) {
      if (memoryLevelBuilder_ == null) {
        if (memoryLevel_ != null) {
          memoryLevel_ =
            com.google.protobuf.UInt32Value.newBuilder(memoryLevel_).mergeFrom(value).buildPartial();
        } else {
          memoryLevel_ = value;
        }
        onChanged();
      } else {
        memoryLevelBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMemoryLevel() {
      if (memoryLevelBuilder_ == null) {
        memoryLevel_ = null;
        onChanged();
      } else {
        memoryLevel_ = null;
        memoryLevelBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMemoryLevelBuilder() {
      
      onChanged();
      return getMemoryLevelFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMemoryLevelOrBuilder() {
      if (memoryLevelBuilder_ != null) {
        return memoryLevelBuilder_.getMessageOrBuilder();
      } else {
        return memoryLevel_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : memoryLevel_;
      }
    }
    /**
     * <pre>
     * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
     * use more memory, but are faster and produce better compression results. The default value is 5.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMemoryLevelFieldBuilder() {
      if (memoryLevelBuilder_ == null) {
        memoryLevelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMemoryLevel(),
                getParentForChildren(),
                isClean());
        memoryLevel_ = null;
      }
      return memoryLevelBuilder_;
    }

    private int compressionLevel_ = 0;
    /**
     * <pre>
     * A value used for selecting the zlib compression level. This setting will affect speed and
     * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
     * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
     * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
     * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
     * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
     * This field will be set to "DEFAULT_COMPRESSION" if not specified.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for compressionLevel.
     */
    @java.lang.Override public int getCompressionLevelValue() {
      return compressionLevel_;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression level. This setting will affect speed and
     * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
     * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
     * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
     * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
     * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
     * This field will be set to "DEFAULT_COMPRESSION" if not specified.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for compressionLevel to set.
     * @return This builder for chaining.
     */
    public Builder setCompressionLevelValue(int value) {
      
      compressionLevel_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression level. This setting will affect speed and
     * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
     * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
     * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
     * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
     * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
     * This field will be set to "DEFAULT_COMPRESSION" if not specified.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
     * @return The compressionLevel.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel getCompressionLevel() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel result = io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel.valueOf(compressionLevel_);
      return result == null ? io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression level. This setting will affect speed and
     * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
     * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
     * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
     * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
     * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
     * This field will be set to "DEFAULT_COMPRESSION" if not specified.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
     * @param value The compressionLevel to set.
     * @return This builder for chaining.
     */
    public Builder setCompressionLevel(io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      compressionLevel_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression level. This setting will affect speed and
     * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
     * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
     * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
     * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
     * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
     * This field will be set to "DEFAULT_COMPRESSION" if not specified.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCompressionLevel() {
      
      compressionLevel_ = 0;
      onChanged();
      return this;
    }

    private int compressionStrategy_ = 0;
    /**
     * <pre>
     * A value used for selecting the zlib compression strategy which is directly related to the
     * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
     * which is also the default value for the parameter, though there are situations when
     * changing this parameter might produce better results. For example, run-length encoding (RLE)
     * is typically used when the content is known for having sequences which same data occurs many
     * consecutive times. For more information about each strategy, please refer to zlib manual.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for compressionStrategy.
     */
    @java.lang.Override public int getCompressionStrategyValue() {
      return compressionStrategy_;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression strategy which is directly related to the
     * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
     * which is also the default value for the parameter, though there are situations when
     * changing this parameter might produce better results. For example, run-length encoding (RLE)
     * is typically used when the content is known for having sequences which same data occurs many
     * consecutive times. For more information about each strategy, please refer to zlib manual.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for compressionStrategy to set.
     * @return This builder for chaining.
     */
    public Builder setCompressionStrategyValue(int value) {
      
      compressionStrategy_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression strategy which is directly related to the
     * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
     * which is also the default value for the parameter, though there are situations when
     * changing this parameter might produce better results. For example, run-length encoding (RLE)
     * is typically used when the content is known for having sequences which same data occurs many
     * consecutive times. For more information about each strategy, please refer to zlib manual.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
     * @return The compressionStrategy.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy getCompressionStrategy() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy result = io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy.valueOf(compressionStrategy_);
      return result == null ? io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression strategy which is directly related to the
     * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
     * which is also the default value for the parameter, though there are situations when
     * changing this parameter might produce better results. For example, run-length encoding (RLE)
     * is typically used when the content is known for having sequences which same data occurs many
     * consecutive times. For more information about each strategy, please refer to zlib manual.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
     * @param value The compressionStrategy to set.
     * @return This builder for chaining.
     */
    public Builder setCompressionStrategy(io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      compressionStrategy_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A value used for selecting the zlib compression strategy which is directly related to the
     * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
     * which is also the default value for the parameter, though there are situations when
     * changing this parameter might produce better results. For example, run-length encoding (RLE)
     * is typically used when the content is known for having sequences which same data occurs many
     * consecutive times. For more information about each strategy, please refer to zlib manual.
     * </pre>
     *
     * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCompressionStrategy() {
      
      compressionStrategy_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.UInt32Value windowBits_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> windowBitsBuilder_;
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     * @return Whether the windowBits field is set.
     */
    public boolean hasWindowBits() {
      return windowBitsBuilder_ != null || windowBits_ != null;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     * @return The windowBits.
     */
    public com.google.protobuf.UInt32Value getWindowBits() {
      if (windowBitsBuilder_ == null) {
        return windowBits_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
      } else {
        return windowBitsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setWindowBits(com.google.protobuf.UInt32Value value) {
      if (windowBitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        windowBits_ = value;
        onChanged();
      } else {
        windowBitsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setWindowBits(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (windowBitsBuilder_ == null) {
        windowBits_ = builderForValue.build();
        onChanged();
      } else {
        windowBitsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeWindowBits(com.google.protobuf.UInt32Value value) {
      if (windowBitsBuilder_ == null) {
        if (windowBits_ != null) {
          windowBits_ =
            com.google.protobuf.UInt32Value.newBuilder(windowBits_).mergeFrom(value).buildPartial();
        } else {
          windowBits_ = value;
        }
        onChanged();
      } else {
        windowBitsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearWindowBits() {
      if (windowBitsBuilder_ == null) {
        windowBits_ = null;
        onChanged();
      } else {
        windowBits_ = null;
        windowBitsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getWindowBitsBuilder() {
      
      onChanged();
      return getWindowBitsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getWindowBitsOrBuilder() {
      if (windowBitsBuilder_ != null) {
        return windowBitsBuilder_.getMessageOrBuilder();
      } else {
        return windowBits_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : windowBits_;
      }
    }
    /**
     * <pre>
     * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     * Larger window results in better compression at the expense of memory usage. The default is 12
     * which will produce a 4096 bytes window. For more details about this parameter, please refer to
     * zlib manual &gt; deflateInit2.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getWindowBitsFieldBuilder() {
      if (windowBitsBuilder_ == null) {
        windowBitsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getWindowBits(),
                getParentForChildren(),
                isClean());
        windowBits_ = null;
      }
      return windowBitsBuilder_;
    }

    private com.google.protobuf.UInt32Value chunkSize_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> chunkSizeBuilder_;
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the chunkSize field is set.
     */
    public boolean hasChunkSize() {
      return chunkSizeBuilder_ != null || chunkSize_ != null;
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     * @return The chunkSize.
     */
    public com.google.protobuf.UInt32Value getChunkSize() {
      if (chunkSizeBuilder_ == null) {
        return chunkSize_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      } else {
        return chunkSizeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        chunkSize_ = value;
        onChanged();
      } else {
        chunkSizeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setChunkSize(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = builderForValue.build();
        onChanged();
      } else {
        chunkSizeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeChunkSize(com.google.protobuf.UInt32Value value) {
      if (chunkSizeBuilder_ == null) {
        if (chunkSize_ != null) {
          chunkSize_ =
            com.google.protobuf.UInt32Value.newBuilder(chunkSize_).mergeFrom(value).buildPartial();
        } else {
          chunkSize_ = value;
        }
        onChanged();
      } else {
        chunkSizeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearChunkSize() {
      if (chunkSizeBuilder_ == null) {
        chunkSize_ = null;
        onChanged();
      } else {
        chunkSize_ = null;
        chunkSizeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getChunkSizeBuilder() {
      
      onChanged();
      return getChunkSizeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder() {
      if (chunkSizeBuilder_ != null) {
        return chunkSizeBuilder_.getMessageOrBuilder();
      } else {
        return chunkSize_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : chunkSize_;
      }
    }
    /**
     * <pre>
     * Value for Zlib's next output buffer. If not set, defaults to 4096.
     * See https://www.zlib.net/manual.html for more details. Also see
     * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getChunkSizeFieldBuilder() {
      if (chunkSizeBuilder_ == null) {
        chunkSizeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getChunkSize(),
                getParentForChildren(),
                isClean());
        chunkSize_ = null;
      }
      return chunkSizeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.compression.gzip.compressor.v3.Gzip)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.compression.gzip.compressor.v3.Gzip)
  private static final io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip();
  }

  public static io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Gzip>
      PARSER = new com.google.protobuf.AbstractParser<Gzip>() {
    @java.lang.Override
    public Gzip parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Gzip(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Gzip> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Gzip> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

