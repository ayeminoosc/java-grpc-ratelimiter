// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/thrift_proxy/filters/ratelimit/v3/rate_limit.proto

package io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.filters.ratelimit.v3;

public interface RateLimitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.thrift_proxy.filters.ratelimit.v3.RateLimit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The rate limit domain to use in the rate limit service request.
   * </pre>
   *
   * <code>string domain = 1 [(.validate.rules) = { ... }</code>
   * @return The domain.
   */
  java.lang.String getDomain();
  /**
   * <pre>
   * The rate limit domain to use in the rate limit service request.
   * </pre>
   *
   * <code>string domain = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for domain.
   */
  com.google.protobuf.ByteString
      getDomainBytes();

  /**
   * <pre>
   * Specifies the rate limit configuration stage. Each configured rate limit filter performs a
   * rate limit check using descriptors configured in the
   * :ref:`envoy_api_msg_extensions.filters.network.thrift_proxy.v3.RouteAction` for the request.
   * Only those entries with a matching stage number are used for a given filter. If not set, the
   * default stage number is 0.
   * .. note::
   *  The filter supports a range of 0 - 10 inclusively for stage numbers.
   * </pre>
   *
   * <code>uint32 stage = 2 [(.validate.rules) = { ... }</code>
   * @return The stage.
   */
  int getStage();

  /**
   * <pre>
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 3;</code>
   * @return Whether the timeout field is set.
   */
  boolean hasTimeout();
  /**
   * <pre>
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 3;</code>
   * @return The timeout.
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * The filter's behaviour in case the rate limiting service does
   * not respond back. When it is set to true, Envoy will not allow traffic in case of
   * communication failure between rate limiting service and the proxy.
   * Defaults to false.
   * </pre>
   *
   * <code>bool failure_mode_deny = 4;</code>
   * @return The failureModeDeny.
   */
  boolean getFailureModeDeny();

  /**
   * <pre>
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   * </pre>
   *
   * <code>.envoy.config.ratelimit.v3.RateLimitServiceConfig rate_limit_service = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the rateLimitService field is set.
   */
  boolean hasRateLimitService();
  /**
   * <pre>
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   * </pre>
   *
   * <code>.envoy.config.ratelimit.v3.RateLimitServiceConfig rate_limit_service = 5 [(.validate.rules) = { ... }</code>
   * @return The rateLimitService.
   */
  io.envoyproxy.envoy.config.ratelimit.v3.RateLimitServiceConfig getRateLimitService();
  /**
   * <pre>
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   * </pre>
   *
   * <code>.envoy.config.ratelimit.v3.RateLimitServiceConfig rate_limit_service = 5 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.ratelimit.v3.RateLimitServiceConfigOrBuilder getRateLimitServiceOrBuilder();
}
