// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/compression/gzip/compressor/v3/gzip.proto

package io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3;

public interface GzipOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.compression.gzip.compressor.v3.Gzip)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the memoryLevel field is set.
   */
  boolean hasMemoryLevel();
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   * @return The memoryLevel.
   */
  com.google.protobuf.UInt32Value getMemoryLevel();
  /**
   * <pre>
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value memory_level = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMemoryLevelOrBuilder();

  /**
   * <pre>
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
   * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
   * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
   * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
   * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
   * This field will be set to "DEFAULT_COMPRESSION" if not specified.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for compressionLevel.
   */
  int getCompressionLevelValue();
  /**
   * <pre>
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
   * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
   * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
   * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
   * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
   * This field will be set to "DEFAULT_COMPRESSION" if not specified.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2 [(.validate.rules) = { ... }</code>
   * @return The compressionLevel.
   */
  io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel getCompressionLevel();

  /**
   * <pre>
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
   * which is also the default value for the parameter, though there are situations when
   * changing this parameter might produce better results. For example, run-length encoding (RLE)
   * is typically used when the content is known for having sequences which same data occurs many
   * consecutive times. For more information about each strategy, please refer to zlib manual.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for compressionStrategy.
   */
  int getCompressionStrategyValue();
  /**
   * <pre>
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
   * which is also the default value for the parameter, though there are situations when
   * changing this parameter might produce better results. For example, run-length encoding (RLE)
   * is typically used when the content is known for having sequences which same data occurs many
   * consecutive times. For more information about each strategy, please refer to zlib manual.
   * </pre>
   *
   * <code>.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3 [(.validate.rules) = { ... }</code>
   * @return The compressionStrategy.
   */
  io.envoyproxy.envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy getCompressionStrategy();

  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the windowBits field is set.
   */
  boolean hasWindowBits();
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
   * @return The windowBits.
   */
  com.google.protobuf.UInt32Value getWindowBits();
  /**
   * <pre>
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual &gt; deflateInit2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value window_bits = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getWindowBitsOrBuilder();

  /**
   * <pre>
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the chunkSize field is set.
   */
  boolean hasChunkSize();
  /**
   * <pre>
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   * @return The chunkSize.
   */
  com.google.protobuf.UInt32Value getChunkSize();
  /**
   * <pre>
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value chunk_size = 5 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getChunkSizeOrBuilder();
}
