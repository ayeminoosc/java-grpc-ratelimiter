// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/redis_proxy/v3/redis_proxy.proto

package io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3;

/**
 * <pre>
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy}
 */
public final class RedisProxy extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy)
    RedisProxyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RedisProxy.newBuilder() to construct.
  private RedisProxy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RedisProxy() {
    statPrefix_ = "";
    faults_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RedisProxy();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RedisProxy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            statPrefix_ = s;
            break;
          }
          case 26: {
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder subBuilder = null;
            if (settings_ != null) {
              subBuilder = settings_.toBuilder();
            }
            settings_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(settings_);
              settings_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {

            latencyInMicros_ = input.readBool();
            break;
          }
          case 42: {
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder subBuilder = null;
            if (prefixRoutes_ != null) {
              subBuilder = prefixRoutes_.toBuilder();
            }
            prefixRoutes_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(prefixRoutes_);
              prefixRoutes_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            io.envoyproxy.envoy.config.core.v3.DataSource.Builder subBuilder = null;
            if (downstreamAuthPassword_ != null) {
              subBuilder = downstreamAuthPassword_.toBuilder();
            }
            downstreamAuthPassword_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.DataSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(downstreamAuthPassword_);
              downstreamAuthPassword_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            io.envoyproxy.envoy.config.core.v3.DataSource.Builder subBuilder = null;
            if (downstreamAuthUsername_ != null) {
              subBuilder = downstreamAuthUsername_.toBuilder();
            }
            downstreamAuthUsername_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.DataSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(downstreamAuthUsername_);
              downstreamAuthUsername_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              faults_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault>();
              mutable_bitField0_ |= 0x00000001;
            }
            faults_.add(
                input.readMessage(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        faults_ = java.util.Collections.unmodifiableList(faults_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.Builder.class);
  }

  public interface ConnPoolSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Per-operation timeout in milliseconds. The timer starts when the first
     * command of a pipeline is written to the backend connection. Each response received from Redis
     * resets the timer since it signifies that the next command is being processed by the backend.
     * The only exception to this behavior is when a connection to a backend is not yet established.
     * In that case, the connect timeout on the cluster will govern the timeout until the connection
     * is ready.
     * </pre>
     *
     * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the opTimeout field is set.
     */
    boolean hasOpTimeout();
    /**
     * <pre>
     * Per-operation timeout in milliseconds. The timer starts when the first
     * command of a pipeline is written to the backend connection. Each response received from Redis
     * resets the timer since it signifies that the next command is being processed by the backend.
     * The only exception to this behavior is when a connection to a backend is not yet established.
     * In that case, the connect timeout on the cluster will govern the timeout until the connection
     * is ready.
     * </pre>
     *
     * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return The opTimeout.
     */
    com.google.protobuf.Duration getOpTimeout();
    /**
     * <pre>
     * Per-operation timeout in milliseconds. The timer starts when the first
     * command of a pipeline is written to the backend connection. Each response received from Redis
     * resets the timer since it signifies that the next command is being processed by the backend.
     * The only exception to this behavior is when a connection to a backend is not yet established.
     * In that case, the connect timeout on the cluster will govern the timeout until the connection
     * is ready.
     * </pre>
     *
     * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
     */
    com.google.protobuf.DurationOrBuilder getOpTimeoutOrBuilder();

    /**
     * <pre>
     * Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
     * forwarded to the same upstream. The hash key used for determining the upstream in a
     * consistent hash ring configuration will be computed from the hash tagged key instead of the
     * whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
     * implementation &lt;https://redis.io/topics/cluster-spec#keys-hash-tags&gt;`_.
     * Examples:
     * * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
     * * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
     * </pre>
     *
     * <code>bool enable_hashtagging = 2;</code>
     * @return The enableHashtagging.
     */
    boolean getEnableHashtagging();

    /**
     * <pre>
     * Accept `moved and ask redirection
     * &lt;https://redis.io/topics/cluster-spec#redirection-and-resharding&gt;`_ errors from upstream
     * redis servers, and retry commands to the specified target server. The target server does not
     * need to be known to the cluster manager. If the command cannot be redirected, then the
     * original error is passed downstream unchanged. By default, this support is not enabled.
     * </pre>
     *
     * <code>bool enable_redirection = 3;</code>
     * @return The enableRedirection.
     */
    boolean getEnableRedirection();

    /**
     * <pre>
     * Maximum size of encoded request buffer before flush is triggered and encoded requests
     * are sent upstream. If this is unset, the buffer flushes whenever it receives data
     * and performs no batching.
     * This feature makes it possible for multiple clients to send requests to Envoy and have
     * them batched- for example if one is running several worker processes, each with its own
     * Redis connection. There is no benefit to using this with a single downstream process.
     * Recommended size (if enabled) is 1024 bytes.
     * </pre>
     *
     * <code>uint32 max_buffer_size_before_flush = 4;</code>
     * @return The maxBufferSizeBeforeFlush.
     */
    int getMaxBufferSizeBeforeFlush();

    /**
     * <pre>
     * The encoded request buffer is flushed N milliseconds after the first request has been
     * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
     * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
     * the timer should be set according to the number of clients, overall request rate and
     * desired maximum latency for a single command. For example, if there are many requests
     * being batched together at a high rate, the buffer will likely be filled before the timer
     * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
     * before the timer fires.
     * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
     * defaults to 3ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
     * @return Whether the bufferFlushTimeout field is set.
     */
    boolean hasBufferFlushTimeout();
    /**
     * <pre>
     * The encoded request buffer is flushed N milliseconds after the first request has been
     * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
     * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
     * the timer should be set according to the number of clients, overall request rate and
     * desired maximum latency for a single command. For example, if there are many requests
     * being batched together at a high rate, the buffer will likely be filled before the timer
     * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
     * before the timer fires.
     * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
     * defaults to 3ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
     * @return The bufferFlushTimeout.
     */
    com.google.protobuf.Duration getBufferFlushTimeout();
    /**
     * <pre>
     * The encoded request buffer is flushed N milliseconds after the first request has been
     * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
     * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
     * the timer should be set according to the number of clients, overall request rate and
     * desired maximum latency for a single command. For example, if there are many requests
     * being batched together at a high rate, the buffer will likely be filled before the timer
     * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
     * before the timer fires.
     * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
     * defaults to 3ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
     */
    com.google.protobuf.DurationOrBuilder getBufferFlushTimeoutOrBuilder();

    /**
     * <pre>
     * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
     * can be created at any given time by any given worker thread (see `enable_redirection` for
     * more details). If the host is unknown and a connection cannot be created due to enforcing
     * this limit, then redirection will fail and the original redirection error will be passed
     * downstream unchanged. This limit defaults to 100.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
     * @return Whether the maxUpstreamUnknownConnections field is set.
     */
    boolean hasMaxUpstreamUnknownConnections();
    /**
     * <pre>
     * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
     * can be created at any given time by any given worker thread (see `enable_redirection` for
     * more details). If the host is unknown and a connection cannot be created due to enforcing
     * this limit, then redirection will fail and the original redirection error will be passed
     * downstream unchanged. This limit defaults to 100.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
     * @return The maxUpstreamUnknownConnections.
     */
    com.google.protobuf.UInt32Value getMaxUpstreamUnknownConnections();
    /**
     * <pre>
     * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
     * can be created at any given time by any given worker thread (see `enable_redirection` for
     * more details). If the host is unknown and a connection cannot be created due to enforcing
     * this limit, then redirection will fail and the original redirection error will be passed
     * downstream unchanged. This limit defaults to 100.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
     */
    com.google.protobuf.UInt32ValueOrBuilder getMaxUpstreamUnknownConnectionsOrBuilder();

    /**
     * <pre>
     * Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
     * count. These commands are measured in microseconds.
     * </pre>
     *
     * <code>bool enable_command_stats = 8;</code>
     * @return The enableCommandStats.
     */
    boolean getEnableCommandStats();

    /**
     * <pre>
     * Read policy. The default is to read from the primary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for readPolicy.
     */
    int getReadPolicyValue();
    /**
     * <pre>
     * Read policy. The default is to read from the primary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
     * @return The readPolicy.
     */
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy getReadPolicy();
  }
  /**
   * <pre>
   * Redis connection pool settings.
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings}
   */
  public static final class ConnPoolSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)
      ConnPoolSettingsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConnPoolSettings.newBuilder() to construct.
    private ConnPoolSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConnPoolSettings() {
      readPolicy_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConnPoolSettings();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConnPoolSettings(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (opTimeout_ != null) {
                subBuilder = opTimeout_.toBuilder();
              }
              opTimeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(opTimeout_);
                opTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              enableHashtagging_ = input.readBool();
              break;
            }
            case 24: {

              enableRedirection_ = input.readBool();
              break;
            }
            case 32: {

              maxBufferSizeBeforeFlush_ = input.readUInt32();
              break;
            }
            case 42: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (bufferFlushTimeout_ != null) {
                subBuilder = bufferFlushTimeout_.toBuilder();
              }
              bufferFlushTimeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bufferFlushTimeout_);
                bufferFlushTimeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              com.google.protobuf.UInt32Value.Builder subBuilder = null;
              if (maxUpstreamUnknownConnections_ != null) {
                subBuilder = maxUpstreamUnknownConnections_.toBuilder();
              }
              maxUpstreamUnknownConnections_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxUpstreamUnknownConnections_);
                maxUpstreamUnknownConnections_ = subBuilder.buildPartial();
              }

              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              readPolicy_ = rawValue;
              break;
            }
            case 64: {

              enableCommandStats_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_ConnPoolSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_ConnPoolSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder.class);
    }

    /**
     * <pre>
     * ReadPolicy controls how Envoy routes read commands to Redis nodes. This is currently
     * supported for Redis Cluster. All ReadPolicy settings except MASTER may return stale data
     * because replication is asynchronous and requires some delay. You need to ensure that your
     * application can tolerate stale data.
     * </pre>
     *
     * Protobuf enum {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy}
     */
    public enum ReadPolicy
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Default mode. Read from the current primary node.
       * </pre>
       *
       * <code>MASTER = 0 [(.udpa.annotations.enum_value_migrate) = { ... }</code>
       */
      MASTER(0),
      /**
       * <pre>
       * Read from the primary, but if it is unavailable, read from replica nodes.
       * </pre>
       *
       * <code>PREFER_MASTER = 1 [(.udpa.annotations.enum_value_migrate) = { ... }</code>
       */
      PREFER_MASTER(1),
      /**
       * <pre>
       * Read from replica nodes. If multiple replica nodes are present within a shard, a random
       * node is selected. Healthy nodes have precedent over unhealthy nodes.
       * </pre>
       *
       * <code>REPLICA = 2;</code>
       */
      REPLICA(2),
      /**
       * <pre>
       * Read from the replica nodes (similar to REPLICA), but if all replicas are unavailable (not
       * present or unhealthy), read from the primary.
       * </pre>
       *
       * <code>PREFER_REPLICA = 3;</code>
       */
      PREFER_REPLICA(3),
      /**
       * <pre>
       * Read from any node of the cluster. A random node is selected among the primary and
       * replicas, healthy nodes have precedent over unhealthy nodes.
       * </pre>
       *
       * <code>ANY = 4;</code>
       */
      ANY(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Default mode. Read from the current primary node.
       * </pre>
       *
       * <code>MASTER = 0 [(.udpa.annotations.enum_value_migrate) = { ... }</code>
       */
      public static final int MASTER_VALUE = 0;
      /**
       * <pre>
       * Read from the primary, but if it is unavailable, read from replica nodes.
       * </pre>
       *
       * <code>PREFER_MASTER = 1 [(.udpa.annotations.enum_value_migrate) = { ... }</code>
       */
      public static final int PREFER_MASTER_VALUE = 1;
      /**
       * <pre>
       * Read from replica nodes. If multiple replica nodes are present within a shard, a random
       * node is selected. Healthy nodes have precedent over unhealthy nodes.
       * </pre>
       *
       * <code>REPLICA = 2;</code>
       */
      public static final int REPLICA_VALUE = 2;
      /**
       * <pre>
       * Read from the replica nodes (similar to REPLICA), but if all replicas are unavailable (not
       * present or unhealthy), read from the primary.
       * </pre>
       *
       * <code>PREFER_REPLICA = 3;</code>
       */
      public static final int PREFER_REPLICA_VALUE = 3;
      /**
       * <pre>
       * Read from any node of the cluster. A random node is selected among the primary and
       * replicas, healthy nodes have precedent over unhealthy nodes.
       * </pre>
       *
       * <code>ANY = 4;</code>
       */
      public static final int ANY_VALUE = 4;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReadPolicy valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ReadPolicy forNumber(int value) {
        switch (value) {
          case 0: return MASTER;
          case 1: return PREFER_MASTER;
          case 2: return REPLICA;
          case 3: return PREFER_REPLICA;
          case 4: return ANY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ReadPolicy>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ReadPolicy> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ReadPolicy>() {
              public ReadPolicy findValueByNumber(int number) {
                return ReadPolicy.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.getDescriptor().getEnumTypes().get(0);
      }

      private static final ReadPolicy[] VALUES = values();

      public static ReadPolicy valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ReadPolicy(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy)
    }

    public static final int OP_TIMEOUT_FIELD_NUMBER = 1;
    private com.google.protobuf.Duration opTimeout_;
    /**
     * <pre>
     * Per-operation timeout in milliseconds. The timer starts when the first
     * command of a pipeline is written to the backend connection. Each response received from Redis
     * resets the timer since it signifies that the next command is being processed by the backend.
     * The only exception to this behavior is when a connection to a backend is not yet established.
     * In that case, the connect timeout on the cluster will govern the timeout until the connection
     * is ready.
     * </pre>
     *
     * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the opTimeout field is set.
     */
    @java.lang.Override
    public boolean hasOpTimeout() {
      return opTimeout_ != null;
    }
    /**
     * <pre>
     * Per-operation timeout in milliseconds. The timer starts when the first
     * command of a pipeline is written to the backend connection. Each response received from Redis
     * resets the timer since it signifies that the next command is being processed by the backend.
     * The only exception to this behavior is when a connection to a backend is not yet established.
     * In that case, the connect timeout on the cluster will govern the timeout until the connection
     * is ready.
     * </pre>
     *
     * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
     * @return The opTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getOpTimeout() {
      return opTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : opTimeout_;
    }
    /**
     * <pre>
     * Per-operation timeout in milliseconds. The timer starts when the first
     * command of a pipeline is written to the backend connection. Each response received from Redis
     * resets the timer since it signifies that the next command is being processed by the backend.
     * The only exception to this behavior is when a connection to a backend is not yet established.
     * In that case, the connect timeout on the cluster will govern the timeout until the connection
     * is ready.
     * </pre>
     *
     * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getOpTimeoutOrBuilder() {
      return getOpTimeout();
    }

    public static final int ENABLE_HASHTAGGING_FIELD_NUMBER = 2;
    private boolean enableHashtagging_;
    /**
     * <pre>
     * Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
     * forwarded to the same upstream. The hash key used for determining the upstream in a
     * consistent hash ring configuration will be computed from the hash tagged key instead of the
     * whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
     * implementation &lt;https://redis.io/topics/cluster-spec#keys-hash-tags&gt;`_.
     * Examples:
     * * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
     * * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
     * </pre>
     *
     * <code>bool enable_hashtagging = 2;</code>
     * @return The enableHashtagging.
     */
    @java.lang.Override
    public boolean getEnableHashtagging() {
      return enableHashtagging_;
    }

    public static final int ENABLE_REDIRECTION_FIELD_NUMBER = 3;
    private boolean enableRedirection_;
    /**
     * <pre>
     * Accept `moved and ask redirection
     * &lt;https://redis.io/topics/cluster-spec#redirection-and-resharding&gt;`_ errors from upstream
     * redis servers, and retry commands to the specified target server. The target server does not
     * need to be known to the cluster manager. If the command cannot be redirected, then the
     * original error is passed downstream unchanged. By default, this support is not enabled.
     * </pre>
     *
     * <code>bool enable_redirection = 3;</code>
     * @return The enableRedirection.
     */
    @java.lang.Override
    public boolean getEnableRedirection() {
      return enableRedirection_;
    }

    public static final int MAX_BUFFER_SIZE_BEFORE_FLUSH_FIELD_NUMBER = 4;
    private int maxBufferSizeBeforeFlush_;
    /**
     * <pre>
     * Maximum size of encoded request buffer before flush is triggered and encoded requests
     * are sent upstream. If this is unset, the buffer flushes whenever it receives data
     * and performs no batching.
     * This feature makes it possible for multiple clients to send requests to Envoy and have
     * them batched- for example if one is running several worker processes, each with its own
     * Redis connection. There is no benefit to using this with a single downstream process.
     * Recommended size (if enabled) is 1024 bytes.
     * </pre>
     *
     * <code>uint32 max_buffer_size_before_flush = 4;</code>
     * @return The maxBufferSizeBeforeFlush.
     */
    @java.lang.Override
    public int getMaxBufferSizeBeforeFlush() {
      return maxBufferSizeBeforeFlush_;
    }

    public static final int BUFFER_FLUSH_TIMEOUT_FIELD_NUMBER = 5;
    private com.google.protobuf.Duration bufferFlushTimeout_;
    /**
     * <pre>
     * The encoded request buffer is flushed N milliseconds after the first request has been
     * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
     * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
     * the timer should be set according to the number of clients, overall request rate and
     * desired maximum latency for a single command. For example, if there are many requests
     * being batched together at a high rate, the buffer will likely be filled before the timer
     * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
     * before the timer fires.
     * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
     * defaults to 3ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
     * @return Whether the bufferFlushTimeout field is set.
     */
    @java.lang.Override
    public boolean hasBufferFlushTimeout() {
      return bufferFlushTimeout_ != null;
    }
    /**
     * <pre>
     * The encoded request buffer is flushed N milliseconds after the first request has been
     * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
     * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
     * the timer should be set according to the number of clients, overall request rate and
     * desired maximum latency for a single command. For example, if there are many requests
     * being batched together at a high rate, the buffer will likely be filled before the timer
     * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
     * before the timer fires.
     * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
     * defaults to 3ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
     * @return The bufferFlushTimeout.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getBufferFlushTimeout() {
      return bufferFlushTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : bufferFlushTimeout_;
    }
    /**
     * <pre>
     * The encoded request buffer is flushed N milliseconds after the first request has been
     * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
     * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
     * the timer should be set according to the number of clients, overall request rate and
     * desired maximum latency for a single command. For example, if there are many requests
     * being batched together at a high rate, the buffer will likely be filled before the timer
     * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
     * before the timer fires.
     * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
     * defaults to 3ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getBufferFlushTimeoutOrBuilder() {
      return getBufferFlushTimeout();
    }

    public static final int MAX_UPSTREAM_UNKNOWN_CONNECTIONS_FIELD_NUMBER = 6;
    private com.google.protobuf.UInt32Value maxUpstreamUnknownConnections_;
    /**
     * <pre>
     * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
     * can be created at any given time by any given worker thread (see `enable_redirection` for
     * more details). If the host is unknown and a connection cannot be created due to enforcing
     * this limit, then redirection will fail and the original redirection error will be passed
     * downstream unchanged. This limit defaults to 100.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
     * @return Whether the maxUpstreamUnknownConnections field is set.
     */
    @java.lang.Override
    public boolean hasMaxUpstreamUnknownConnections() {
      return maxUpstreamUnknownConnections_ != null;
    }
    /**
     * <pre>
     * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
     * can be created at any given time by any given worker thread (see `enable_redirection` for
     * more details). If the host is unknown and a connection cannot be created due to enforcing
     * this limit, then redirection will fail and the original redirection error will be passed
     * downstream unchanged. This limit defaults to 100.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
     * @return The maxUpstreamUnknownConnections.
     */
    @java.lang.Override
    public com.google.protobuf.UInt32Value getMaxUpstreamUnknownConnections() {
      return maxUpstreamUnknownConnections_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxUpstreamUnknownConnections_;
    }
    /**
     * <pre>
     * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
     * can be created at any given time by any given worker thread (see `enable_redirection` for
     * more details). If the host is unknown and a connection cannot be created due to enforcing
     * this limit, then redirection will fail and the original redirection error will be passed
     * downstream unchanged. This limit defaults to 100.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
     */
    @java.lang.Override
    public com.google.protobuf.UInt32ValueOrBuilder getMaxUpstreamUnknownConnectionsOrBuilder() {
      return getMaxUpstreamUnknownConnections();
    }

    public static final int ENABLE_COMMAND_STATS_FIELD_NUMBER = 8;
    private boolean enableCommandStats_;
    /**
     * <pre>
     * Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
     * count. These commands are measured in microseconds.
     * </pre>
     *
     * <code>bool enable_command_stats = 8;</code>
     * @return The enableCommandStats.
     */
    @java.lang.Override
    public boolean getEnableCommandStats() {
      return enableCommandStats_;
    }

    public static final int READ_POLICY_FIELD_NUMBER = 7;
    private int readPolicy_;
    /**
     * <pre>
     * Read policy. The default is to read from the primary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for readPolicy.
     */
    @java.lang.Override public int getReadPolicyValue() {
      return readPolicy_;
    }
    /**
     * <pre>
     * Read policy. The default is to read from the primary.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
     * @return The readPolicy.
     */
    @java.lang.Override public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy getReadPolicy() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy result = io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy.valueOf(readPolicy_);
      return result == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (opTimeout_ != null) {
        output.writeMessage(1, getOpTimeout());
      }
      if (enableHashtagging_ != false) {
        output.writeBool(2, enableHashtagging_);
      }
      if (enableRedirection_ != false) {
        output.writeBool(3, enableRedirection_);
      }
      if (maxBufferSizeBeforeFlush_ != 0) {
        output.writeUInt32(4, maxBufferSizeBeforeFlush_);
      }
      if (bufferFlushTimeout_ != null) {
        output.writeMessage(5, getBufferFlushTimeout());
      }
      if (maxUpstreamUnknownConnections_ != null) {
        output.writeMessage(6, getMaxUpstreamUnknownConnections());
      }
      if (readPolicy_ != io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy.MASTER.getNumber()) {
        output.writeEnum(7, readPolicy_);
      }
      if (enableCommandStats_ != false) {
        output.writeBool(8, enableCommandStats_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (opTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOpTimeout());
      }
      if (enableHashtagging_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, enableHashtagging_);
      }
      if (enableRedirection_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, enableRedirection_);
      }
      if (maxBufferSizeBeforeFlush_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxBufferSizeBeforeFlush_);
      }
      if (bufferFlushTimeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getBufferFlushTimeout());
      }
      if (maxUpstreamUnknownConnections_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getMaxUpstreamUnknownConnections());
      }
      if (readPolicy_ != io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy.MASTER.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, readPolicy_);
      }
      if (enableCommandStats_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, enableCommandStats_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings other = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings) obj;

      if (hasOpTimeout() != other.hasOpTimeout()) return false;
      if (hasOpTimeout()) {
        if (!getOpTimeout()
            .equals(other.getOpTimeout())) return false;
      }
      if (getEnableHashtagging()
          != other.getEnableHashtagging()) return false;
      if (getEnableRedirection()
          != other.getEnableRedirection()) return false;
      if (getMaxBufferSizeBeforeFlush()
          != other.getMaxBufferSizeBeforeFlush()) return false;
      if (hasBufferFlushTimeout() != other.hasBufferFlushTimeout()) return false;
      if (hasBufferFlushTimeout()) {
        if (!getBufferFlushTimeout()
            .equals(other.getBufferFlushTimeout())) return false;
      }
      if (hasMaxUpstreamUnknownConnections() != other.hasMaxUpstreamUnknownConnections()) return false;
      if (hasMaxUpstreamUnknownConnections()) {
        if (!getMaxUpstreamUnknownConnections()
            .equals(other.getMaxUpstreamUnknownConnections())) return false;
      }
      if (getEnableCommandStats()
          != other.getEnableCommandStats()) return false;
      if (readPolicy_ != other.readPolicy_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOpTimeout()) {
        hash = (37 * hash) + OP_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getOpTimeout().hashCode();
      }
      hash = (37 * hash) + ENABLE_HASHTAGGING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableHashtagging());
      hash = (37 * hash) + ENABLE_REDIRECTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableRedirection());
      hash = (37 * hash) + MAX_BUFFER_SIZE_BEFORE_FLUSH_FIELD_NUMBER;
      hash = (53 * hash) + getMaxBufferSizeBeforeFlush();
      if (hasBufferFlushTimeout()) {
        hash = (37 * hash) + BUFFER_FLUSH_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getBufferFlushTimeout().hashCode();
      }
      if (hasMaxUpstreamUnknownConnections()) {
        hash = (37 * hash) + MAX_UPSTREAM_UNKNOWN_CONNECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxUpstreamUnknownConnections().hashCode();
      }
      hash = (37 * hash) + ENABLE_COMMAND_STATS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableCommandStats());
      hash = (37 * hash) + READ_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + readPolicy_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Redis connection pool settings.
     * [#next-free-field: 9]
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_ConnPoolSettings_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_ConnPoolSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (opTimeoutBuilder_ == null) {
          opTimeout_ = null;
        } else {
          opTimeout_ = null;
          opTimeoutBuilder_ = null;
        }
        enableHashtagging_ = false;

        enableRedirection_ = false;

        maxBufferSizeBeforeFlush_ = 0;

        if (bufferFlushTimeoutBuilder_ == null) {
          bufferFlushTimeout_ = null;
        } else {
          bufferFlushTimeout_ = null;
          bufferFlushTimeoutBuilder_ = null;
        }
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          maxUpstreamUnknownConnections_ = null;
        } else {
          maxUpstreamUnknownConnections_ = null;
          maxUpstreamUnknownConnectionsBuilder_ = null;
        }
        enableCommandStats_ = false;

        readPolicy_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_ConnPoolSettings_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings build() {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings buildPartial() {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings result = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings(this);
        if (opTimeoutBuilder_ == null) {
          result.opTimeout_ = opTimeout_;
        } else {
          result.opTimeout_ = opTimeoutBuilder_.build();
        }
        result.enableHashtagging_ = enableHashtagging_;
        result.enableRedirection_ = enableRedirection_;
        result.maxBufferSizeBeforeFlush_ = maxBufferSizeBeforeFlush_;
        if (bufferFlushTimeoutBuilder_ == null) {
          result.bufferFlushTimeout_ = bufferFlushTimeout_;
        } else {
          result.bufferFlushTimeout_ = bufferFlushTimeoutBuilder_.build();
        }
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          result.maxUpstreamUnknownConnections_ = maxUpstreamUnknownConnections_;
        } else {
          result.maxUpstreamUnknownConnections_ = maxUpstreamUnknownConnectionsBuilder_.build();
        }
        result.enableCommandStats_ = enableCommandStats_;
        result.readPolicy_ = readPolicy_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings other) {
        if (other == io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.getDefaultInstance()) return this;
        if (other.hasOpTimeout()) {
          mergeOpTimeout(other.getOpTimeout());
        }
        if (other.getEnableHashtagging() != false) {
          setEnableHashtagging(other.getEnableHashtagging());
        }
        if (other.getEnableRedirection() != false) {
          setEnableRedirection(other.getEnableRedirection());
        }
        if (other.getMaxBufferSizeBeforeFlush() != 0) {
          setMaxBufferSizeBeforeFlush(other.getMaxBufferSizeBeforeFlush());
        }
        if (other.hasBufferFlushTimeout()) {
          mergeBufferFlushTimeout(other.getBufferFlushTimeout());
        }
        if (other.hasMaxUpstreamUnknownConnections()) {
          mergeMaxUpstreamUnknownConnections(other.getMaxUpstreamUnknownConnections());
        }
        if (other.getEnableCommandStats() != false) {
          setEnableCommandStats(other.getEnableCommandStats());
        }
        if (other.readPolicy_ != 0) {
          setReadPolicyValue(other.getReadPolicyValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.Duration opTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> opTimeoutBuilder_;
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       * @return Whether the opTimeout field is set.
       */
      public boolean hasOpTimeout() {
        return opTimeoutBuilder_ != null || opTimeout_ != null;
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       * @return The opTimeout.
       */
      public com.google.protobuf.Duration getOpTimeout() {
        if (opTimeoutBuilder_ == null) {
          return opTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : opTimeout_;
        } else {
          return opTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setOpTimeout(com.google.protobuf.Duration value) {
        if (opTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          opTimeout_ = value;
          onChanged();
        } else {
          opTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setOpTimeout(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (opTimeoutBuilder_ == null) {
          opTimeout_ = builderForValue.build();
          onChanged();
        } else {
          opTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeOpTimeout(com.google.protobuf.Duration value) {
        if (opTimeoutBuilder_ == null) {
          if (opTimeout_ != null) {
            opTimeout_ =
              com.google.protobuf.Duration.newBuilder(opTimeout_).mergeFrom(value).buildPartial();
          } else {
            opTimeout_ = value;
          }
          onChanged();
        } else {
          opTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder clearOpTimeout() {
        if (opTimeoutBuilder_ == null) {
          opTimeout_ = null;
          onChanged();
        } else {
          opTimeout_ = null;
          opTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.Duration.Builder getOpTimeoutBuilder() {
        
        onChanged();
        return getOpTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      public com.google.protobuf.DurationOrBuilder getOpTimeoutOrBuilder() {
        if (opTimeoutBuilder_ != null) {
          return opTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return opTimeout_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : opTimeout_;
        }
      }
      /**
       * <pre>
       * Per-operation timeout in milliseconds. The timer starts when the first
       * command of a pipeline is written to the backend connection. Each response received from Redis
       * resets the timer since it signifies that the next command is being processed by the backend.
       * The only exception to this behavior is when a connection to a backend is not yet established.
       * In that case, the connect timeout on the cluster will govern the timeout until the connection
       * is ready.
       * </pre>
       *
       * <code>.google.protobuf.Duration op_timeout = 1 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getOpTimeoutFieldBuilder() {
        if (opTimeoutBuilder_ == null) {
          opTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getOpTimeout(),
                  getParentForChildren(),
                  isClean());
          opTimeout_ = null;
        }
        return opTimeoutBuilder_;
      }

      private boolean enableHashtagging_ ;
      /**
       * <pre>
       * Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
       * forwarded to the same upstream. The hash key used for determining the upstream in a
       * consistent hash ring configuration will be computed from the hash tagged key instead of the
       * whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
       * implementation &lt;https://redis.io/topics/cluster-spec#keys-hash-tags&gt;`_.
       * Examples:
       * * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
       * * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
       * </pre>
       *
       * <code>bool enable_hashtagging = 2;</code>
       * @return The enableHashtagging.
       */
      @java.lang.Override
      public boolean getEnableHashtagging() {
        return enableHashtagging_;
      }
      /**
       * <pre>
       * Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
       * forwarded to the same upstream. The hash key used for determining the upstream in a
       * consistent hash ring configuration will be computed from the hash tagged key instead of the
       * whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
       * implementation &lt;https://redis.io/topics/cluster-spec#keys-hash-tags&gt;`_.
       * Examples:
       * * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
       * * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
       * </pre>
       *
       * <code>bool enable_hashtagging = 2;</code>
       * @param value The enableHashtagging to set.
       * @return This builder for chaining.
       */
      public Builder setEnableHashtagging(boolean value) {
        
        enableHashtagging_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
       * forwarded to the same upstream. The hash key used for determining the upstream in a
       * consistent hash ring configuration will be computed from the hash tagged key instead of the
       * whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
       * implementation &lt;https://redis.io/topics/cluster-spec#keys-hash-tags&gt;`_.
       * Examples:
       * * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
       * * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
       * </pre>
       *
       * <code>bool enable_hashtagging = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableHashtagging() {
        
        enableHashtagging_ = false;
        onChanged();
        return this;
      }

      private boolean enableRedirection_ ;
      /**
       * <pre>
       * Accept `moved and ask redirection
       * &lt;https://redis.io/topics/cluster-spec#redirection-and-resharding&gt;`_ errors from upstream
       * redis servers, and retry commands to the specified target server. The target server does not
       * need to be known to the cluster manager. If the command cannot be redirected, then the
       * original error is passed downstream unchanged. By default, this support is not enabled.
       * </pre>
       *
       * <code>bool enable_redirection = 3;</code>
       * @return The enableRedirection.
       */
      @java.lang.Override
      public boolean getEnableRedirection() {
        return enableRedirection_;
      }
      /**
       * <pre>
       * Accept `moved and ask redirection
       * &lt;https://redis.io/topics/cluster-spec#redirection-and-resharding&gt;`_ errors from upstream
       * redis servers, and retry commands to the specified target server. The target server does not
       * need to be known to the cluster manager. If the command cannot be redirected, then the
       * original error is passed downstream unchanged. By default, this support is not enabled.
       * </pre>
       *
       * <code>bool enable_redirection = 3;</code>
       * @param value The enableRedirection to set.
       * @return This builder for chaining.
       */
      public Builder setEnableRedirection(boolean value) {
        
        enableRedirection_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Accept `moved and ask redirection
       * &lt;https://redis.io/topics/cluster-spec#redirection-and-resharding&gt;`_ errors from upstream
       * redis servers, and retry commands to the specified target server. The target server does not
       * need to be known to the cluster manager. If the command cannot be redirected, then the
       * original error is passed downstream unchanged. By default, this support is not enabled.
       * </pre>
       *
       * <code>bool enable_redirection = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableRedirection() {
        
        enableRedirection_ = false;
        onChanged();
        return this;
      }

      private int maxBufferSizeBeforeFlush_ ;
      /**
       * <pre>
       * Maximum size of encoded request buffer before flush is triggered and encoded requests
       * are sent upstream. If this is unset, the buffer flushes whenever it receives data
       * and performs no batching.
       * This feature makes it possible for multiple clients to send requests to Envoy and have
       * them batched- for example if one is running several worker processes, each with its own
       * Redis connection. There is no benefit to using this with a single downstream process.
       * Recommended size (if enabled) is 1024 bytes.
       * </pre>
       *
       * <code>uint32 max_buffer_size_before_flush = 4;</code>
       * @return The maxBufferSizeBeforeFlush.
       */
      @java.lang.Override
      public int getMaxBufferSizeBeforeFlush() {
        return maxBufferSizeBeforeFlush_;
      }
      /**
       * <pre>
       * Maximum size of encoded request buffer before flush is triggered and encoded requests
       * are sent upstream. If this is unset, the buffer flushes whenever it receives data
       * and performs no batching.
       * This feature makes it possible for multiple clients to send requests to Envoy and have
       * them batched- for example if one is running several worker processes, each with its own
       * Redis connection. There is no benefit to using this with a single downstream process.
       * Recommended size (if enabled) is 1024 bytes.
       * </pre>
       *
       * <code>uint32 max_buffer_size_before_flush = 4;</code>
       * @param value The maxBufferSizeBeforeFlush to set.
       * @return This builder for chaining.
       */
      public Builder setMaxBufferSizeBeforeFlush(int value) {
        
        maxBufferSizeBeforeFlush_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum size of encoded request buffer before flush is triggered and encoded requests
       * are sent upstream. If this is unset, the buffer flushes whenever it receives data
       * and performs no batching.
       * This feature makes it possible for multiple clients to send requests to Envoy and have
       * them batched- for example if one is running several worker processes, each with its own
       * Redis connection. There is no benefit to using this with a single downstream process.
       * Recommended size (if enabled) is 1024 bytes.
       * </pre>
       *
       * <code>uint32 max_buffer_size_before_flush = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxBufferSizeBeforeFlush() {
        
        maxBufferSizeBeforeFlush_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Duration bufferFlushTimeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> bufferFlushTimeoutBuilder_;
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       * @return Whether the bufferFlushTimeout field is set.
       */
      public boolean hasBufferFlushTimeout() {
        return bufferFlushTimeoutBuilder_ != null || bufferFlushTimeout_ != null;
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       * @return The bufferFlushTimeout.
       */
      public com.google.protobuf.Duration getBufferFlushTimeout() {
        if (bufferFlushTimeoutBuilder_ == null) {
          return bufferFlushTimeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : bufferFlushTimeout_;
        } else {
          return bufferFlushTimeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      public Builder setBufferFlushTimeout(com.google.protobuf.Duration value) {
        if (bufferFlushTimeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bufferFlushTimeout_ = value;
          onChanged();
        } else {
          bufferFlushTimeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      public Builder setBufferFlushTimeout(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (bufferFlushTimeoutBuilder_ == null) {
          bufferFlushTimeout_ = builderForValue.build();
          onChanged();
        } else {
          bufferFlushTimeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      public Builder mergeBufferFlushTimeout(com.google.protobuf.Duration value) {
        if (bufferFlushTimeoutBuilder_ == null) {
          if (bufferFlushTimeout_ != null) {
            bufferFlushTimeout_ =
              com.google.protobuf.Duration.newBuilder(bufferFlushTimeout_).mergeFrom(value).buildPartial();
          } else {
            bufferFlushTimeout_ = value;
          }
          onChanged();
        } else {
          bufferFlushTimeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      public Builder clearBufferFlushTimeout() {
        if (bufferFlushTimeoutBuilder_ == null) {
          bufferFlushTimeout_ = null;
          onChanged();
        } else {
          bufferFlushTimeout_ = null;
          bufferFlushTimeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      public com.google.protobuf.Duration.Builder getBufferFlushTimeoutBuilder() {
        
        onChanged();
        return getBufferFlushTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      public com.google.protobuf.DurationOrBuilder getBufferFlushTimeoutOrBuilder() {
        if (bufferFlushTimeoutBuilder_ != null) {
          return bufferFlushTimeoutBuilder_.getMessageOrBuilder();
        } else {
          return bufferFlushTimeout_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : bufferFlushTimeout_;
        }
      }
      /**
       * <pre>
       * The encoded request buffer is flushed N milliseconds after the first request has been
       * encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
       * If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
       * the timer should be set according to the number of clients, overall request rate and
       * desired maximum latency for a single command. For example, if there are many requests
       * being batched together at a high rate, the buffer will likely be filled before the timer
       * fires. Alternatively, if the request rate is lower the buffer will not be filled as often
       * before the timer fires.
       * If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
       * defaults to 3ms.
       * </pre>
       *
       * <code>.google.protobuf.Duration buffer_flush_timeout = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getBufferFlushTimeoutFieldBuilder() {
        if (bufferFlushTimeoutBuilder_ == null) {
          bufferFlushTimeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getBufferFlushTimeout(),
                  getParentForChildren(),
                  isClean());
          bufferFlushTimeout_ = null;
        }
        return bufferFlushTimeoutBuilder_;
      }

      private com.google.protobuf.UInt32Value maxUpstreamUnknownConnections_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxUpstreamUnknownConnectionsBuilder_;
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       * @return Whether the maxUpstreamUnknownConnections field is set.
       */
      public boolean hasMaxUpstreamUnknownConnections() {
        return maxUpstreamUnknownConnectionsBuilder_ != null || maxUpstreamUnknownConnections_ != null;
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       * @return The maxUpstreamUnknownConnections.
       */
      public com.google.protobuf.UInt32Value getMaxUpstreamUnknownConnections() {
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          return maxUpstreamUnknownConnections_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxUpstreamUnknownConnections_;
        } else {
          return maxUpstreamUnknownConnectionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      public Builder setMaxUpstreamUnknownConnections(com.google.protobuf.UInt32Value value) {
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxUpstreamUnknownConnections_ = value;
          onChanged();
        } else {
          maxUpstreamUnknownConnectionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      public Builder setMaxUpstreamUnknownConnections(
          com.google.protobuf.UInt32Value.Builder builderForValue) {
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          maxUpstreamUnknownConnections_ = builderForValue.build();
          onChanged();
        } else {
          maxUpstreamUnknownConnectionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      public Builder mergeMaxUpstreamUnknownConnections(com.google.protobuf.UInt32Value value) {
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          if (maxUpstreamUnknownConnections_ != null) {
            maxUpstreamUnknownConnections_ =
              com.google.protobuf.UInt32Value.newBuilder(maxUpstreamUnknownConnections_).mergeFrom(value).buildPartial();
          } else {
            maxUpstreamUnknownConnections_ = value;
          }
          onChanged();
        } else {
          maxUpstreamUnknownConnectionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      public Builder clearMaxUpstreamUnknownConnections() {
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          maxUpstreamUnknownConnections_ = null;
          onChanged();
        } else {
          maxUpstreamUnknownConnections_ = null;
          maxUpstreamUnknownConnectionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      public com.google.protobuf.UInt32Value.Builder getMaxUpstreamUnknownConnectionsBuilder() {
        
        onChanged();
        return getMaxUpstreamUnknownConnectionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      public com.google.protobuf.UInt32ValueOrBuilder getMaxUpstreamUnknownConnectionsOrBuilder() {
        if (maxUpstreamUnknownConnectionsBuilder_ != null) {
          return maxUpstreamUnknownConnectionsBuilder_.getMessageOrBuilder();
        } else {
          return maxUpstreamUnknownConnections_ == null ?
              com.google.protobuf.UInt32Value.getDefaultInstance() : maxUpstreamUnknownConnections_;
        }
      }
      /**
       * <pre>
       * `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
       * can be created at any given time by any given worker thread (see `enable_redirection` for
       * more details). If the host is unknown and a connection cannot be created due to enforcing
       * this limit, then redirection will fail and the original redirection error will be passed
       * downstream unchanged. This limit defaults to 100.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value max_upstream_unknown_connections = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
          getMaxUpstreamUnknownConnectionsFieldBuilder() {
        if (maxUpstreamUnknownConnectionsBuilder_ == null) {
          maxUpstreamUnknownConnectionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                  getMaxUpstreamUnknownConnections(),
                  getParentForChildren(),
                  isClean());
          maxUpstreamUnknownConnections_ = null;
        }
        return maxUpstreamUnknownConnectionsBuilder_;
      }

      private boolean enableCommandStats_ ;
      /**
       * <pre>
       * Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
       * count. These commands are measured in microseconds.
       * </pre>
       *
       * <code>bool enable_command_stats = 8;</code>
       * @return The enableCommandStats.
       */
      @java.lang.Override
      public boolean getEnableCommandStats() {
        return enableCommandStats_;
      }
      /**
       * <pre>
       * Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
       * count. These commands are measured in microseconds.
       * </pre>
       *
       * <code>bool enable_command_stats = 8;</code>
       * @param value The enableCommandStats to set.
       * @return This builder for chaining.
       */
      public Builder setEnableCommandStats(boolean value) {
        
        enableCommandStats_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
       * count. These commands are measured in microseconds.
       * </pre>
       *
       * <code>bool enable_command_stats = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableCommandStats() {
        
        enableCommandStats_ = false;
        onChanged();
        return this;
      }

      private int readPolicy_ = 0;
      /**
       * <pre>
       * Read policy. The default is to read from the primary.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
       * @return The enum numeric value on the wire for readPolicy.
       */
      @java.lang.Override public int getReadPolicyValue() {
        return readPolicy_;
      }
      /**
       * <pre>
       * Read policy. The default is to read from the primary.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
       * @param value The enum numeric value on the wire for readPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setReadPolicyValue(int value) {
        
        readPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Read policy. The default is to read from the primary.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
       * @return The readPolicy.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy getReadPolicy() {
        @SuppressWarnings("deprecation")
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy result = io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy.valueOf(readPolicy_);
        return result == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Read policy. The default is to read from the primary.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
       * @param value The readPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setReadPolicy(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        readPolicy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Read policy. The default is to read from the primary.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearReadPolicy() {
        
        readPolicy_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings)
    private static final io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings();
    }

    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConnPoolSettings>
        PARSER = new com.google.protobuf.AbstractParser<ConnPoolSettings>() {
      @java.lang.Override
      public ConnPoolSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnPoolSettings(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConnPoolSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConnPoolSettings> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrefixRoutesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route> 
        getRoutesList();
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getRoutes(int index);
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    int getRoutesCount();
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> 
        getRoutesOrBuilderList();
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder getRoutesOrBuilder(
        int index);

    /**
     * <pre>
     * Indicates that prefix matching should be case insensitive.
     * </pre>
     *
     * <code>bool case_insensitive = 2;</code>
     * @return The caseInsensitive.
     */
    boolean getCaseInsensitive();

    /**
     * <pre>
     * Optional catch-all route to forward commands that doesn't match any of the routes. The
     * catch-all route becomes required when no routes are specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
     * @return Whether the catchAllRoute field is set.
     */
    boolean hasCatchAllRoute();
    /**
     * <pre>
     * Optional catch-all route to forward commands that doesn't match any of the routes. The
     * catch-all route becomes required when no routes are specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
     * @return The catchAllRoute.
     */
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getCatchAllRoute();
    /**
     * <pre>
     * Optional catch-all route to forward commands that doesn't match any of the routes. The
     * catch-all route becomes required when no routes are specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
     */
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder getCatchAllRouteOrBuilder();
  }
  /**
   * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes}
   */
  public static final class PrefixRoutes extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)
      PrefixRoutesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PrefixRoutes.newBuilder() to construct.
    private PrefixRoutes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PrefixRoutes() {
      routes_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PrefixRoutes();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PrefixRoutes(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                routes_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route>();
                mutable_bitField0_ |= 0x00000001;
              }
              routes_.add(
                  input.readMessage(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.parser(), extensionRegistry));
              break;
            }
            case 16: {

              caseInsensitive_ = input.readBool();
              break;
            }
            case 34: {
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder subBuilder = null;
              if (catchAllRoute_ != null) {
                subBuilder = catchAllRoute_.toBuilder();
              }
              catchAllRoute_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(catchAllRoute_);
                catchAllRoute_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          routes_ = java.util.Collections.unmodifiableList(routes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder.class);
    }

    public interface RouteOrBuilder extends
        // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * String prefix that must match the beginning of the keys. Envoy will always favor the
       * longest match.
       * </pre>
       *
       * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
       * @return The prefix.
       */
      java.lang.String getPrefix();
      /**
       * <pre>
       * String prefix that must match the beginning of the keys. Envoy will always favor the
       * longest match.
       * </pre>
       *
       * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
       * @return The bytes for prefix.
       */
      com.google.protobuf.ByteString
          getPrefixBytes();

      /**
       * <pre>
       * Indicates if the prefix needs to be removed from the key when forwarded.
       * </pre>
       *
       * <code>bool remove_prefix = 2;</code>
       * @return The removePrefix.
       */
      boolean getRemovePrefix();

      /**
       * <pre>
       * Upstream cluster to forward the command to.
       * </pre>
       *
       * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
       * @return The cluster.
       */
      java.lang.String getCluster();
      /**
       * <pre>
       * Upstream cluster to forward the command to.
       * </pre>
       *
       * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
       * @return The bytes for cluster.
       */
      com.google.protobuf.ByteString
          getClusterBytes();

      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy> 
          getRequestMirrorPolicyList();
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy getRequestMirrorPolicy(int index);
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      int getRequestMirrorPolicyCount();
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder> 
          getRequestMirrorPolicyOrBuilderList();
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder getRequestMirrorPolicyOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route}
     */
    public static final class Route extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)
        RouteOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Route.newBuilder() to construct.
      private Route(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Route() {
        prefix_ = "";
        cluster_ = "";
        requestMirrorPolicy_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Route();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Route(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                prefix_ = s;
                break;
              }
              case 16: {

                removePrefix_ = input.readBool();
                break;
              }
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();

                cluster_ = s;
                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  requestMirrorPolicy_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy>();
                  mutable_bitField0_ |= 0x00000001;
                }
                requestMirrorPolicy_.add(
                    input.readMessage(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            requestMirrorPolicy_ = java.util.Collections.unmodifiableList(requestMirrorPolicy_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder.class);
      }

      public interface RequestMirrorPolicyOrBuilder extends
          // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * Specifies the cluster that requests will be mirrored to. The cluster must
         * exist in the cluster manager configuration.
         * </pre>
         *
         * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
         * @return The cluster.
         */
        java.lang.String getCluster();
        /**
         * <pre>
         * Specifies the cluster that requests will be mirrored to. The cluster must
         * exist in the cluster manager configuration.
         * </pre>
         *
         * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
         * @return The bytes for cluster.
         */
        com.google.protobuf.ByteString
            getClusterBytes();

        /**
         * <pre>
         * If not specified or the runtime key is not present, all requests to the target cluster
         * will be mirrored.
         * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
         * mirror.
         * </pre>
         *
         * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
         * @return Whether the runtimeFraction field is set.
         */
        boolean hasRuntimeFraction();
        /**
         * <pre>
         * If not specified or the runtime key is not present, all requests to the target cluster
         * will be mirrored.
         * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
         * mirror.
         * </pre>
         *
         * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
         * @return The runtimeFraction.
         */
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getRuntimeFraction();
        /**
         * <pre>
         * If not specified or the runtime key is not present, all requests to the target cluster
         * will be mirrored.
         * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
         * mirror.
         * </pre>
         *
         * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
         */
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getRuntimeFractionOrBuilder();

        /**
         * <pre>
         * Set this to TRUE to only mirror write commands, this is effectively replicating the
         * writes in a "fire and forget" manner.
         * </pre>
         *
         * <code>bool exclude_read_commands = 3;</code>
         * @return The excludeReadCommands.
         */
        boolean getExcludeReadCommands();
      }
      /**
       * <pre>
       * The router is capable of shadowing traffic from one cluster to another. The current
       * implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
       * respond before returning the response from the primary cluster. All normal statistics are
       * collected for the shadow cluster making this feature useful for testing.
       * </pre>
       *
       * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy}
       */
      public static final class RequestMirrorPolicy extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)
          RequestMirrorPolicyOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use RequestMirrorPolicy.newBuilder() to construct.
        private RequestMirrorPolicy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private RequestMirrorPolicy() {
          cluster_ = "";
        }

        @java.lang.Override
        @SuppressWarnings({"unused"})
        protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
          return new RequestMirrorPolicy();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private RequestMirrorPolicy(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  cluster_ = s;
                  break;
                }
                case 18: {
                  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder subBuilder = null;
                  if (runtimeFraction_ != null) {
                    subBuilder = runtimeFraction_.toBuilder();
                  }
                  runtimeFraction_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(runtimeFraction_);
                    runtimeFraction_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 24: {

                  excludeReadCommands_ = input.readBool();
                  break;
                }
                default: {
                  if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder.class);
        }

        public static final int CLUSTER_FIELD_NUMBER = 1;
        private volatile java.lang.Object cluster_;
        /**
         * <pre>
         * Specifies the cluster that requests will be mirrored to. The cluster must
         * exist in the cluster manager configuration.
         * </pre>
         *
         * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
         * @return The cluster.
         */
        @java.lang.Override
        public java.lang.String getCluster() {
          java.lang.Object ref = cluster_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            cluster_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * Specifies the cluster that requests will be mirrored to. The cluster must
         * exist in the cluster manager configuration.
         * </pre>
         *
         * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
         * @return The bytes for cluster.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getClusterBytes() {
          java.lang.Object ref = cluster_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            cluster_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int RUNTIME_FRACTION_FIELD_NUMBER = 2;
        private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent runtimeFraction_;
        /**
         * <pre>
         * If not specified or the runtime key is not present, all requests to the target cluster
         * will be mirrored.
         * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
         * mirror.
         * </pre>
         *
         * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
         * @return Whether the runtimeFraction field is set.
         */
        @java.lang.Override
        public boolean hasRuntimeFraction() {
          return runtimeFraction_ != null;
        }
        /**
         * <pre>
         * If not specified or the runtime key is not present, all requests to the target cluster
         * will be mirrored.
         * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
         * mirror.
         * </pre>
         *
         * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
         * @return The runtimeFraction.
         */
        @java.lang.Override
        public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getRuntimeFraction() {
          return runtimeFraction_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : runtimeFraction_;
        }
        /**
         * <pre>
         * If not specified or the runtime key is not present, all requests to the target cluster
         * will be mirrored.
         * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
         * mirror.
         * </pre>
         *
         * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
         */
        @java.lang.Override
        public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getRuntimeFractionOrBuilder() {
          return getRuntimeFraction();
        }

        public static final int EXCLUDE_READ_COMMANDS_FIELD_NUMBER = 3;
        private boolean excludeReadCommands_;
        /**
         * <pre>
         * Set this to TRUE to only mirror write commands, this is effectively replicating the
         * writes in a "fire and forget" manner.
         * </pre>
         *
         * <code>bool exclude_read_commands = 3;</code>
         * @return The excludeReadCommands.
         */
        @java.lang.Override
        public boolean getExcludeReadCommands() {
          return excludeReadCommands_;
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getClusterBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, cluster_);
          }
          if (runtimeFraction_ != null) {
            output.writeMessage(2, getRuntimeFraction());
          }
          if (excludeReadCommands_ != false) {
            output.writeBool(3, excludeReadCommands_);
          }
          unknownFields.writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getClusterBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, cluster_);
          }
          if (runtimeFraction_ != null) {
            size += com.google.protobuf.CodedOutputStream
              .computeMessageSize(2, getRuntimeFraction());
          }
          if (excludeReadCommands_ != false) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(3, excludeReadCommands_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)) {
            return super.equals(obj);
          }
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy other = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy) obj;

          if (!getCluster()
              .equals(other.getCluster())) return false;
          if (hasRuntimeFraction() != other.hasRuntimeFraction()) return false;
          if (hasRuntimeFraction()) {
            if (!getRuntimeFraction()
                .equals(other.getRuntimeFraction())) return false;
          }
          if (getExcludeReadCommands()
              != other.getExcludeReadCommands()) return false;
          if (!unknownFields.equals(other.unknownFields)) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + CLUSTER_FIELD_NUMBER;
          hash = (53 * hash) + getCluster().hashCode();
          if (hasRuntimeFraction()) {
            hash = (37 * hash) + RUNTIME_FRACTION_FIELD_NUMBER;
            hash = (53 * hash) + getRuntimeFraction().hashCode();
          }
          hash = (37 * hash) + EXCLUDE_READ_COMMANDS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getExcludeReadCommands());
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * The router is capable of shadowing traffic from one cluster to another. The current
         * implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
         * respond before returning the response from the primary cluster. All normal statistics are
         * collected for the shadow cluster making this feature useful for testing.
         * </pre>
         *
         * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder.class);
          }

          // Construct using io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            cluster_ = "";

            if (runtimeFractionBuilder_ == null) {
              runtimeFraction_ = null;
            } else {
              runtimeFraction_ = null;
              runtimeFractionBuilder_ = null;
            }
            excludeReadCommands_ = false;

            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy_descriptor;
          }

          @java.lang.Override
          public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy getDefaultInstanceForType() {
            return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.getDefaultInstance();
          }

          @java.lang.Override
          public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy build() {
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy buildPartial() {
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy result = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy(this);
            result.cluster_ = cluster_;
            if (runtimeFractionBuilder_ == null) {
              result.runtimeFraction_ = runtimeFraction_;
            } else {
              result.runtimeFraction_ = runtimeFractionBuilder_.build();
            }
            result.excludeReadCommands_ = excludeReadCommands_;
            onBuilt();
            return result;
          }

          @java.lang.Override
          public Builder clone() {
            return super.clone();
          }
          @java.lang.Override
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.setField(field, value);
          }
          @java.lang.Override
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
          }
          @java.lang.Override
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
          }
          @java.lang.Override
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
          }
          @java.lang.Override
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return super.addRepeatedField(field, value);
          }
          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy) {
              return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy other) {
            if (other == io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.getDefaultInstance()) return this;
            if (!other.getCluster().isEmpty()) {
              cluster_ = other.cluster_;
              onChanged();
            }
            if (other.hasRuntimeFraction()) {
              mergeRuntimeFraction(other.getRuntimeFraction());
            }
            if (other.getExcludeReadCommands() != false) {
              setExcludeReadCommands(other.getExcludeReadCommands());
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private java.lang.Object cluster_ = "";
          /**
           * <pre>
           * Specifies the cluster that requests will be mirrored to. The cluster must
           * exist in the cluster manager configuration.
           * </pre>
           *
           * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
           * @return The cluster.
           */
          public java.lang.String getCluster() {
            java.lang.Object ref = cluster_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              cluster_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * Specifies the cluster that requests will be mirrored to. The cluster must
           * exist in the cluster manager configuration.
           * </pre>
           *
           * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
           * @return The bytes for cluster.
           */
          public com.google.protobuf.ByteString
              getClusterBytes() {
            java.lang.Object ref = cluster_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              cluster_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * Specifies the cluster that requests will be mirrored to. The cluster must
           * exist in the cluster manager configuration.
           * </pre>
           *
           * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
           * @param value The cluster to set.
           * @return This builder for chaining.
           */
          public Builder setCluster(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            cluster_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Specifies the cluster that requests will be mirrored to. The cluster must
           * exist in the cluster manager configuration.
           * </pre>
           *
           * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
           * @return This builder for chaining.
           */
          public Builder clearCluster() {
            
            cluster_ = getDefaultInstance().getCluster();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Specifies the cluster that requests will be mirrored to. The cluster must
           * exist in the cluster manager configuration.
           * </pre>
           *
           * <code>string cluster = 1 [(.validate.rules) = { ... }</code>
           * @param value The bytes for cluster to set.
           * @return This builder for chaining.
           */
          public Builder setClusterBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            cluster_ = value;
            onChanged();
            return this;
          }

          private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent runtimeFraction_;
          private com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> runtimeFractionBuilder_;
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           * @return Whether the runtimeFraction field is set.
           */
          public boolean hasRuntimeFraction() {
            return runtimeFractionBuilder_ != null || runtimeFraction_ != null;
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           * @return The runtimeFraction.
           */
          public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getRuntimeFraction() {
            if (runtimeFractionBuilder_ == null) {
              return runtimeFraction_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : runtimeFraction_;
            } else {
              return runtimeFractionBuilder_.getMessage();
            }
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          public Builder setRuntimeFraction(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
            if (runtimeFractionBuilder_ == null) {
              if (value == null) {
                throw new NullPointerException();
              }
              runtimeFraction_ = value;
              onChanged();
            } else {
              runtimeFractionBuilder_.setMessage(value);
            }

            return this;
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          public Builder setRuntimeFraction(
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
            if (runtimeFractionBuilder_ == null) {
              runtimeFraction_ = builderForValue.build();
              onChanged();
            } else {
              runtimeFractionBuilder_.setMessage(builderForValue.build());
            }

            return this;
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          public Builder mergeRuntimeFraction(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
            if (runtimeFractionBuilder_ == null) {
              if (runtimeFraction_ != null) {
                runtimeFraction_ =
                  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.newBuilder(runtimeFraction_).mergeFrom(value).buildPartial();
              } else {
                runtimeFraction_ = value;
              }
              onChanged();
            } else {
              runtimeFractionBuilder_.mergeFrom(value);
            }

            return this;
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          public Builder clearRuntimeFraction() {
            if (runtimeFractionBuilder_ == null) {
              runtimeFraction_ = null;
              onChanged();
            } else {
              runtimeFraction_ = null;
              runtimeFractionBuilder_ = null;
            }

            return this;
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getRuntimeFractionBuilder() {
            
            onChanged();
            return getRuntimeFractionFieldBuilder().getBuilder();
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getRuntimeFractionOrBuilder() {
            if (runtimeFractionBuilder_ != null) {
              return runtimeFractionBuilder_.getMessageOrBuilder();
            } else {
              return runtimeFraction_ == null ?
                  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : runtimeFraction_;
            }
          }
          /**
           * <pre>
           * If not specified or the runtime key is not present, all requests to the target cluster
           * will be mirrored.
           * If specified, Envoy will lookup the runtime key to get the percentage of requests to the
           * mirror.
           * </pre>
           *
           * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 2;</code>
           */
          private com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
              getRuntimeFractionFieldBuilder() {
            if (runtimeFractionBuilder_ == null) {
              runtimeFractionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                      getRuntimeFraction(),
                      getParentForChildren(),
                      isClean());
              runtimeFraction_ = null;
            }
            return runtimeFractionBuilder_;
          }

          private boolean excludeReadCommands_ ;
          /**
           * <pre>
           * Set this to TRUE to only mirror write commands, this is effectively replicating the
           * writes in a "fire and forget" manner.
           * </pre>
           *
           * <code>bool exclude_read_commands = 3;</code>
           * @return The excludeReadCommands.
           */
          @java.lang.Override
          public boolean getExcludeReadCommands() {
            return excludeReadCommands_;
          }
          /**
           * <pre>
           * Set this to TRUE to only mirror write commands, this is effectively replicating the
           * writes in a "fire and forget" manner.
           * </pre>
           *
           * <code>bool exclude_read_commands = 3;</code>
           * @param value The excludeReadCommands to set.
           * @return This builder for chaining.
           */
          public Builder setExcludeReadCommands(boolean value) {
            
            excludeReadCommands_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * Set this to TRUE to only mirror write commands, this is effectively replicating the
           * writes in a "fire and forget" manner.
           * </pre>
           *
           * <code>bool exclude_read_commands = 3;</code>
           * @return This builder for chaining.
           */
          public Builder clearExcludeReadCommands() {
            
            excludeReadCommands_ = false;
            onChanged();
            return this;
          }
          @java.lang.Override
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
          }

          @java.lang.Override
          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)
        }

        // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy)
        private static final io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy();
        }

        public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<RequestMirrorPolicy>
            PARSER = new com.google.protobuf.AbstractParser<RequestMirrorPolicy>() {
          @java.lang.Override
          public RequestMirrorPolicy parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new RequestMirrorPolicy(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<RequestMirrorPolicy> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<RequestMirrorPolicy> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      public static final int PREFIX_FIELD_NUMBER = 1;
      private volatile java.lang.Object prefix_;
      /**
       * <pre>
       * String prefix that must match the beginning of the keys. Envoy will always favor the
       * longest match.
       * </pre>
       *
       * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
       * @return The prefix.
       */
      @java.lang.Override
      public java.lang.String getPrefix() {
        java.lang.Object ref = prefix_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          prefix_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * String prefix that must match the beginning of the keys. Envoy will always favor the
       * longest match.
       * </pre>
       *
       * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
       * @return The bytes for prefix.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPrefixBytes() {
        java.lang.Object ref = prefix_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          prefix_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int REMOVE_PREFIX_FIELD_NUMBER = 2;
      private boolean removePrefix_;
      /**
       * <pre>
       * Indicates if the prefix needs to be removed from the key when forwarded.
       * </pre>
       *
       * <code>bool remove_prefix = 2;</code>
       * @return The removePrefix.
       */
      @java.lang.Override
      public boolean getRemovePrefix() {
        return removePrefix_;
      }

      public static final int CLUSTER_FIELD_NUMBER = 3;
      private volatile java.lang.Object cluster_;
      /**
       * <pre>
       * Upstream cluster to forward the command to.
       * </pre>
       *
       * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
       * @return The cluster.
       */
      @java.lang.Override
      public java.lang.String getCluster() {
        java.lang.Object ref = cluster_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          cluster_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * Upstream cluster to forward the command to.
       * </pre>
       *
       * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
       * @return The bytes for cluster.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getClusterBytes() {
        java.lang.Object ref = cluster_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cluster_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int REQUEST_MIRROR_POLICY_FIELD_NUMBER = 4;
      private java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy> requestMirrorPolicy_;
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      @java.lang.Override
      public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy> getRequestMirrorPolicyList() {
        return requestMirrorPolicy_;
      }
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      @java.lang.Override
      public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder> 
          getRequestMirrorPolicyOrBuilderList() {
        return requestMirrorPolicy_;
      }
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      @java.lang.Override
      public int getRequestMirrorPolicyCount() {
        return requestMirrorPolicy_.size();
      }
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy getRequestMirrorPolicy(int index) {
        return requestMirrorPolicy_.get(index);
      }
      /**
       * <pre>
       * Indicates that the route has a request mirroring policy.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder getRequestMirrorPolicyOrBuilder(
          int index) {
        return requestMirrorPolicy_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getPrefixBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, prefix_);
        }
        if (removePrefix_ != false) {
          output.writeBool(2, removePrefix_);
        }
        if (!getClusterBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 3, cluster_);
        }
        for (int i = 0; i < requestMirrorPolicy_.size(); i++) {
          output.writeMessage(4, requestMirrorPolicy_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getPrefixBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, prefix_);
        }
        if (removePrefix_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, removePrefix_);
        }
        if (!getClusterBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, cluster_);
        }
        for (int i = 0; i < requestMirrorPolicy_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, requestMirrorPolicy_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)) {
          return super.equals(obj);
        }
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route other = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route) obj;

        if (!getPrefix()
            .equals(other.getPrefix())) return false;
        if (getRemovePrefix()
            != other.getRemovePrefix()) return false;
        if (!getCluster()
            .equals(other.getCluster())) return false;
        if (!getRequestMirrorPolicyList()
            .equals(other.getRequestMirrorPolicyList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PREFIX_FIELD_NUMBER;
        hash = (53 * hash) + getPrefix().hashCode();
        hash = (37 * hash) + REMOVE_PREFIX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRemovePrefix());
        hash = (37 * hash) + CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getCluster().hashCode();
        if (getRequestMirrorPolicyCount() > 0) {
          hash = (37 * hash) + REQUEST_MIRROR_POLICY_FIELD_NUMBER;
          hash = (53 * hash) + getRequestMirrorPolicyList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder.class);
        }

        // Construct using io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getRequestMirrorPolicyFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          prefix_ = "";

          removePrefix_ = false;

          cluster_ = "";

          if (requestMirrorPolicyBuilder_ == null) {
            requestMirrorPolicy_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            requestMirrorPolicyBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_Route_descriptor;
        }

        @java.lang.Override
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getDefaultInstanceForType() {
          return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance();
        }

        @java.lang.Override
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route build() {
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route buildPartial() {
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route result = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route(this);
          int from_bitField0_ = bitField0_;
          result.prefix_ = prefix_;
          result.removePrefix_ = removePrefix_;
          result.cluster_ = cluster_;
          if (requestMirrorPolicyBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              requestMirrorPolicy_ = java.util.Collections.unmodifiableList(requestMirrorPolicy_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.requestMirrorPolicy_ = requestMirrorPolicy_;
          } else {
            result.requestMirrorPolicy_ = requestMirrorPolicyBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route) {
            return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route other) {
          if (other == io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance()) return this;
          if (!other.getPrefix().isEmpty()) {
            prefix_ = other.prefix_;
            onChanged();
          }
          if (other.getRemovePrefix() != false) {
            setRemovePrefix(other.getRemovePrefix());
          }
          if (!other.getCluster().isEmpty()) {
            cluster_ = other.cluster_;
            onChanged();
          }
          if (requestMirrorPolicyBuilder_ == null) {
            if (!other.requestMirrorPolicy_.isEmpty()) {
              if (requestMirrorPolicy_.isEmpty()) {
                requestMirrorPolicy_ = other.requestMirrorPolicy_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureRequestMirrorPolicyIsMutable();
                requestMirrorPolicy_.addAll(other.requestMirrorPolicy_);
              }
              onChanged();
            }
          } else {
            if (!other.requestMirrorPolicy_.isEmpty()) {
              if (requestMirrorPolicyBuilder_.isEmpty()) {
                requestMirrorPolicyBuilder_.dispose();
                requestMirrorPolicyBuilder_ = null;
                requestMirrorPolicy_ = other.requestMirrorPolicy_;
                bitField0_ = (bitField0_ & ~0x00000001);
                requestMirrorPolicyBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getRequestMirrorPolicyFieldBuilder() : null;
              } else {
                requestMirrorPolicyBuilder_.addAllMessages(other.requestMirrorPolicy_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object prefix_ = "";
        /**
         * <pre>
         * String prefix that must match the beginning of the keys. Envoy will always favor the
         * longest match.
         * </pre>
         *
         * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
         * @return The prefix.
         */
        public java.lang.String getPrefix() {
          java.lang.Object ref = prefix_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            prefix_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * String prefix that must match the beginning of the keys. Envoy will always favor the
         * longest match.
         * </pre>
         *
         * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
         * @return The bytes for prefix.
         */
        public com.google.protobuf.ByteString
            getPrefixBytes() {
          java.lang.Object ref = prefix_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            prefix_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * String prefix that must match the beginning of the keys. Envoy will always favor the
         * longest match.
         * </pre>
         *
         * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
         * @param value The prefix to set.
         * @return This builder for chaining.
         */
        public Builder setPrefix(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          prefix_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * String prefix that must match the beginning of the keys. Envoy will always favor the
         * longest match.
         * </pre>
         *
         * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearPrefix() {
          
          prefix_ = getDefaultInstance().getPrefix();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * String prefix that must match the beginning of the keys. Envoy will always favor the
         * longest match.
         * </pre>
         *
         * <code>string prefix = 1 [(.validate.rules) = { ... }</code>
         * @param value The bytes for prefix to set.
         * @return This builder for chaining.
         */
        public Builder setPrefixBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          prefix_ = value;
          onChanged();
          return this;
        }

        private boolean removePrefix_ ;
        /**
         * <pre>
         * Indicates if the prefix needs to be removed from the key when forwarded.
         * </pre>
         *
         * <code>bool remove_prefix = 2;</code>
         * @return The removePrefix.
         */
        @java.lang.Override
        public boolean getRemovePrefix() {
          return removePrefix_;
        }
        /**
         * <pre>
         * Indicates if the prefix needs to be removed from the key when forwarded.
         * </pre>
         *
         * <code>bool remove_prefix = 2;</code>
         * @param value The removePrefix to set.
         * @return This builder for chaining.
         */
        public Builder setRemovePrefix(boolean value) {
          
          removePrefix_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Indicates if the prefix needs to be removed from the key when forwarded.
         * </pre>
         *
         * <code>bool remove_prefix = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearRemovePrefix() {
          
          removePrefix_ = false;
          onChanged();
          return this;
        }

        private java.lang.Object cluster_ = "";
        /**
         * <pre>
         * Upstream cluster to forward the command to.
         * </pre>
         *
         * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
         * @return The cluster.
         */
        public java.lang.String getCluster() {
          java.lang.Object ref = cluster_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            cluster_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * Upstream cluster to forward the command to.
         * </pre>
         *
         * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
         * @return The bytes for cluster.
         */
        public com.google.protobuf.ByteString
            getClusterBytes() {
          java.lang.Object ref = cluster_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            cluster_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * Upstream cluster to forward the command to.
         * </pre>
         *
         * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
         * @param value The cluster to set.
         * @return This builder for chaining.
         */
        public Builder setCluster(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          cluster_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Upstream cluster to forward the command to.
         * </pre>
         *
         * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearCluster() {
          
          cluster_ = getDefaultInstance().getCluster();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Upstream cluster to forward the command to.
         * </pre>
         *
         * <code>string cluster = 3 [(.validate.rules) = { ... }</code>
         * @param value The bytes for cluster to set.
         * @return This builder for chaining.
         */
        public Builder setClusterBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          cluster_ = value;
          onChanged();
          return this;
        }

        private java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy> requestMirrorPolicy_ =
          java.util.Collections.emptyList();
        private void ensureRequestMirrorPolicyIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            requestMirrorPolicy_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy>(requestMirrorPolicy_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder> requestMirrorPolicyBuilder_;

        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy> getRequestMirrorPolicyList() {
          if (requestMirrorPolicyBuilder_ == null) {
            return java.util.Collections.unmodifiableList(requestMirrorPolicy_);
          } else {
            return requestMirrorPolicyBuilder_.getMessageList();
          }
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public int getRequestMirrorPolicyCount() {
          if (requestMirrorPolicyBuilder_ == null) {
            return requestMirrorPolicy_.size();
          } else {
            return requestMirrorPolicyBuilder_.getCount();
          }
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy getRequestMirrorPolicy(int index) {
          if (requestMirrorPolicyBuilder_ == null) {
            return requestMirrorPolicy_.get(index);
          } else {
            return requestMirrorPolicyBuilder_.getMessage(index);
          }
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder setRequestMirrorPolicy(
            int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy value) {
          if (requestMirrorPolicyBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.set(index, value);
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder setRequestMirrorPolicy(
            int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder builderForValue) {
          if (requestMirrorPolicyBuilder_ == null) {
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.set(index, builderForValue.build());
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder addRequestMirrorPolicy(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy value) {
          if (requestMirrorPolicyBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.add(value);
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder addRequestMirrorPolicy(
            int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy value) {
          if (requestMirrorPolicyBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.add(index, value);
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder addRequestMirrorPolicy(
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder builderForValue) {
          if (requestMirrorPolicyBuilder_ == null) {
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.add(builderForValue.build());
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder addRequestMirrorPolicy(
            int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder builderForValue) {
          if (requestMirrorPolicyBuilder_ == null) {
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.add(index, builderForValue.build());
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder addAllRequestMirrorPolicy(
            java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy> values) {
          if (requestMirrorPolicyBuilder_ == null) {
            ensureRequestMirrorPolicyIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, requestMirrorPolicy_);
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder clearRequestMirrorPolicy() {
          if (requestMirrorPolicyBuilder_ == null) {
            requestMirrorPolicy_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public Builder removeRequestMirrorPolicy(int index) {
          if (requestMirrorPolicyBuilder_ == null) {
            ensureRequestMirrorPolicyIsMutable();
            requestMirrorPolicy_.remove(index);
            onChanged();
          } else {
            requestMirrorPolicyBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder getRequestMirrorPolicyBuilder(
            int index) {
          return getRequestMirrorPolicyFieldBuilder().getBuilder(index);
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder getRequestMirrorPolicyOrBuilder(
            int index) {
          if (requestMirrorPolicyBuilder_ == null) {
            return requestMirrorPolicy_.get(index);  } else {
            return requestMirrorPolicyBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder> 
             getRequestMirrorPolicyOrBuilderList() {
          if (requestMirrorPolicyBuilder_ != null) {
            return requestMirrorPolicyBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(requestMirrorPolicy_);
          }
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder addRequestMirrorPolicyBuilder() {
          return getRequestMirrorPolicyFieldBuilder().addBuilder(
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.getDefaultInstance());
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder addRequestMirrorPolicyBuilder(
            int index) {
          return getRequestMirrorPolicyFieldBuilder().addBuilder(
              index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.getDefaultInstance());
        }
        /**
         * <pre>
         * Indicates that the route has a request mirroring policy.
         * </pre>
         *
         * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;</code>
         */
        public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder> 
             getRequestMirrorPolicyBuilderList() {
          return getRequestMirrorPolicyFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder> 
            getRequestMirrorPolicyFieldBuilder() {
          if (requestMirrorPolicyBuilder_ == null) {
            requestMirrorPolicyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicyOrBuilder>(
                    requestMirrorPolicy_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            requestMirrorPolicy_ = null;
          }
          return requestMirrorPolicyBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)
      }

      // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route)
      private static final io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route();
      }

      public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Route>
          PARSER = new com.google.protobuf.AbstractParser<Route>() {
        @java.lang.Override
        public Route parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Route(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Route> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Route> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int ROUTES_FIELD_NUMBER = 1;
    private java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route> routes_;
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route> getRoutesList() {
      return routes_;
    }
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> 
        getRoutesOrBuilderList() {
      return routes_;
    }
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    @java.lang.Override
    public int getRoutesCount() {
      return routes_.size();
    }
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getRoutes(int index) {
      return routes_.get(index);
    }
    /**
     * <pre>
     * List of prefix routes.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder getRoutesOrBuilder(
        int index) {
      return routes_.get(index);
    }

    public static final int CASE_INSENSITIVE_FIELD_NUMBER = 2;
    private boolean caseInsensitive_;
    /**
     * <pre>
     * Indicates that prefix matching should be case insensitive.
     * </pre>
     *
     * <code>bool case_insensitive = 2;</code>
     * @return The caseInsensitive.
     */
    @java.lang.Override
    public boolean getCaseInsensitive() {
      return caseInsensitive_;
    }

    public static final int CATCH_ALL_ROUTE_FIELD_NUMBER = 4;
    private io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catchAllRoute_;
    /**
     * <pre>
     * Optional catch-all route to forward commands that doesn't match any of the routes. The
     * catch-all route becomes required when no routes are specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
     * @return Whether the catchAllRoute field is set.
     */
    @java.lang.Override
    public boolean hasCatchAllRoute() {
      return catchAllRoute_ != null;
    }
    /**
     * <pre>
     * Optional catch-all route to forward commands that doesn't match any of the routes. The
     * catch-all route becomes required when no routes are specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
     * @return The catchAllRoute.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getCatchAllRoute() {
      return catchAllRoute_ == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance() : catchAllRoute_;
    }
    /**
     * <pre>
     * Optional catch-all route to forward commands that doesn't match any of the routes. The
     * catch-all route becomes required when no routes are specified.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder getCatchAllRouteOrBuilder() {
      return getCatchAllRoute();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < routes_.size(); i++) {
        output.writeMessage(1, routes_.get(i));
      }
      if (caseInsensitive_ != false) {
        output.writeBool(2, caseInsensitive_);
      }
      if (catchAllRoute_ != null) {
        output.writeMessage(4, getCatchAllRoute());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < routes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, routes_.get(i));
      }
      if (caseInsensitive_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, caseInsensitive_);
      }
      if (catchAllRoute_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCatchAllRoute());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes other = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes) obj;

      if (!getRoutesList()
          .equals(other.getRoutesList())) return false;
      if (getCaseInsensitive()
          != other.getCaseInsensitive()) return false;
      if (hasCatchAllRoute() != other.hasCatchAllRoute()) return false;
      if (hasCatchAllRoute()) {
        if (!getCatchAllRoute()
            .equals(other.getCatchAllRoute())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRoutesCount() > 0) {
        hash = (37 * hash) + ROUTES_FIELD_NUMBER;
        hash = (53 * hash) + getRoutesList().hashCode();
      }
      hash = (37 * hash) + CASE_INSENSITIVE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCaseInsensitive());
      if (hasCatchAllRoute()) {
        hash = (37 * hash) + CATCH_ALL_ROUTE_FIELD_NUMBER;
        hash = (53 * hash) + getCatchAllRoute().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRoutesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (routesBuilder_ == null) {
          routes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          routesBuilder_.clear();
        }
        caseInsensitive_ = false;

        if (catchAllRouteBuilder_ == null) {
          catchAllRoute_ = null;
        } else {
          catchAllRoute_ = null;
          catchAllRouteBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_PrefixRoutes_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes build() {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes buildPartial() {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes result = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes(this);
        int from_bitField0_ = bitField0_;
        if (routesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            routes_ = java.util.Collections.unmodifiableList(routes_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.routes_ = routes_;
        } else {
          result.routes_ = routesBuilder_.build();
        }
        result.caseInsensitive_ = caseInsensitive_;
        if (catchAllRouteBuilder_ == null) {
          result.catchAllRoute_ = catchAllRoute_;
        } else {
          result.catchAllRoute_ = catchAllRouteBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes other) {
        if (other == io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.getDefaultInstance()) return this;
        if (routesBuilder_ == null) {
          if (!other.routes_.isEmpty()) {
            if (routes_.isEmpty()) {
              routes_ = other.routes_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRoutesIsMutable();
              routes_.addAll(other.routes_);
            }
            onChanged();
          }
        } else {
          if (!other.routes_.isEmpty()) {
            if (routesBuilder_.isEmpty()) {
              routesBuilder_.dispose();
              routesBuilder_ = null;
              routes_ = other.routes_;
              bitField0_ = (bitField0_ & ~0x00000001);
              routesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRoutesFieldBuilder() : null;
            } else {
              routesBuilder_.addAllMessages(other.routes_);
            }
          }
        }
        if (other.getCaseInsensitive() != false) {
          setCaseInsensitive(other.getCaseInsensitive());
        }
        if (other.hasCatchAllRoute()) {
          mergeCatchAllRoute(other.getCatchAllRoute());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route> routes_ =
        java.util.Collections.emptyList();
      private void ensureRoutesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          routes_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route>(routes_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> routesBuilder_;

      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route> getRoutesList() {
        if (routesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(routes_);
        } else {
          return routesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public int getRoutesCount() {
        if (routesBuilder_ == null) {
          return routes_.size();
        } else {
          return routesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getRoutes(int index) {
        if (routesBuilder_ == null) {
          return routes_.get(index);
        } else {
          return routesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder setRoutes(
          int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route value) {
        if (routesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoutesIsMutable();
          routes_.set(index, value);
          onChanged();
        } else {
          routesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder setRoutes(
          int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder builderForValue) {
        if (routesBuilder_ == null) {
          ensureRoutesIsMutable();
          routes_.set(index, builderForValue.build());
          onChanged();
        } else {
          routesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder addRoutes(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route value) {
        if (routesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoutesIsMutable();
          routes_.add(value);
          onChanged();
        } else {
          routesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder addRoutes(
          int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route value) {
        if (routesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoutesIsMutable();
          routes_.add(index, value);
          onChanged();
        } else {
          routesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder addRoutes(
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder builderForValue) {
        if (routesBuilder_ == null) {
          ensureRoutesIsMutable();
          routes_.add(builderForValue.build());
          onChanged();
        } else {
          routesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder addRoutes(
          int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder builderForValue) {
        if (routesBuilder_ == null) {
          ensureRoutesIsMutable();
          routes_.add(index, builderForValue.build());
          onChanged();
        } else {
          routesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder addAllRoutes(
          java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route> values) {
        if (routesBuilder_ == null) {
          ensureRoutesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, routes_);
          onChanged();
        } else {
          routesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder clearRoutes() {
        if (routesBuilder_ == null) {
          routes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          routesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public Builder removeRoutes(int index) {
        if (routesBuilder_ == null) {
          ensureRoutesIsMutable();
          routes_.remove(index);
          onChanged();
        } else {
          routesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder getRoutesBuilder(
          int index) {
        return getRoutesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder getRoutesOrBuilder(
          int index) {
        if (routesBuilder_ == null) {
          return routes_.get(index);  } else {
          return routesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> 
           getRoutesOrBuilderList() {
        if (routesBuilder_ != null) {
          return routesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(routes_);
        }
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder addRoutesBuilder() {
        return getRoutesFieldBuilder().addBuilder(
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance());
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder addRoutesBuilder(
          int index) {
        return getRoutesFieldBuilder().addBuilder(
            index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance());
      }
      /**
       * <pre>
       * List of prefix routes.
       * </pre>
       *
       * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route routes = 1;</code>
       */
      public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder> 
           getRoutesBuilderList() {
        return getRoutesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> 
          getRoutesFieldBuilder() {
        if (routesBuilder_ == null) {
          routesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder>(
                  routes_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          routes_ = null;
        }
        return routesBuilder_;
      }

      private boolean caseInsensitive_ ;
      /**
       * <pre>
       * Indicates that prefix matching should be case insensitive.
       * </pre>
       *
       * <code>bool case_insensitive = 2;</code>
       * @return The caseInsensitive.
       */
      @java.lang.Override
      public boolean getCaseInsensitive() {
        return caseInsensitive_;
      }
      /**
       * <pre>
       * Indicates that prefix matching should be case insensitive.
       * </pre>
       *
       * <code>bool case_insensitive = 2;</code>
       * @param value The caseInsensitive to set.
       * @return This builder for chaining.
       */
      public Builder setCaseInsensitive(boolean value) {
        
        caseInsensitive_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates that prefix matching should be case insensitive.
       * </pre>
       *
       * <code>bool case_insensitive = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCaseInsensitive() {
        
        caseInsensitive_ = false;
        onChanged();
        return this;
      }

      private io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catchAllRoute_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> catchAllRouteBuilder_;
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       * @return Whether the catchAllRoute field is set.
       */
      public boolean hasCatchAllRoute() {
        return catchAllRouteBuilder_ != null || catchAllRoute_ != null;
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       * @return The catchAllRoute.
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route getCatchAllRoute() {
        if (catchAllRouteBuilder_ == null) {
          return catchAllRoute_ == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance() : catchAllRoute_;
        } else {
          return catchAllRouteBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      public Builder setCatchAllRoute(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route value) {
        if (catchAllRouteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          catchAllRoute_ = value;
          onChanged();
        } else {
          catchAllRouteBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      public Builder setCatchAllRoute(
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder builderForValue) {
        if (catchAllRouteBuilder_ == null) {
          catchAllRoute_ = builderForValue.build();
          onChanged();
        } else {
          catchAllRouteBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      public Builder mergeCatchAllRoute(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route value) {
        if (catchAllRouteBuilder_ == null) {
          if (catchAllRoute_ != null) {
            catchAllRoute_ =
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.newBuilder(catchAllRoute_).mergeFrom(value).buildPartial();
          } else {
            catchAllRoute_ = value;
          }
          onChanged();
        } else {
          catchAllRouteBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      public Builder clearCatchAllRoute() {
        if (catchAllRouteBuilder_ == null) {
          catchAllRoute_ = null;
          onChanged();
        } else {
          catchAllRoute_ = null;
          catchAllRouteBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder getCatchAllRouteBuilder() {
        
        onChanged();
        return getCatchAllRouteFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder getCatchAllRouteOrBuilder() {
        if (catchAllRouteBuilder_ != null) {
          return catchAllRouteBuilder_.getMessageOrBuilder();
        } else {
          return catchAllRoute_ == null ?
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.getDefaultInstance() : catchAllRoute_;
        }
      }
      /**
       * <pre>
       * Optional catch-all route to forward commands that doesn't match any of the routes. The
       * catch-all route becomes required when no routes are specified.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route catch_all_route = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder> 
          getCatchAllRouteFieldBuilder() {
        if (catchAllRouteBuilder_ == null) {
          catchAllRouteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Route.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.RouteOrBuilder>(
                  getCatchAllRoute(),
                  getParentForChildren(),
                  isClean());
          catchAllRoute_ = null;
        }
        return catchAllRouteBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes)
    private static final io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes();
    }

    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PrefixRoutes>
        PARSER = new com.google.protobuf.AbstractParser<PrefixRoutes>() {
      @java.lang.Override
      public PrefixRoutes parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PrefixRoutes(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PrefixRoutes> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PrefixRoutes> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RedisFaultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Fault type.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for faultType.
     */
    int getFaultTypeValue();
    /**
     * <pre>
     * Fault type.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
     * @return The faultType.
     */
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType getFaultType();

    /**
     * <pre>
     * Percentage of requests fault applies to.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the faultEnabled field is set.
     */
    boolean hasFaultEnabled();
    /**
     * <pre>
     * Percentage of requests fault applies to.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
     * @return The faultEnabled.
     */
    io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFaultEnabled();
    /**
     * <pre>
     * Percentage of requests fault applies to.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
     */
    io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFaultEnabledOrBuilder();

    /**
     * <pre>
     * Delay for all faults. If not set, defaults to zero
     * </pre>
     *
     * <code>.google.protobuf.Duration delay = 3;</code>
     * @return Whether the delay field is set.
     */
    boolean hasDelay();
    /**
     * <pre>
     * Delay for all faults. If not set, defaults to zero
     * </pre>
     *
     * <code>.google.protobuf.Duration delay = 3;</code>
     * @return The delay.
     */
    com.google.protobuf.Duration getDelay();
    /**
     * <pre>
     * Delay for all faults. If not set, defaults to zero
     * </pre>
     *
     * <code>.google.protobuf.Duration delay = 3;</code>
     */
    com.google.protobuf.DurationOrBuilder getDelayOrBuilder();

    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @return A list containing the commands.
     */
    java.util.List<java.lang.String>
        getCommandsList();
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @return The count of commands.
     */
    int getCommandsCount();
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @param index The index of the element to return.
     * @return The commands at the given index.
     */
    java.lang.String getCommands(int index);
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the commands at the given index.
     */
    com.google.protobuf.ByteString
        getCommandsBytes(int index);
  }
  /**
   * <pre>
   * RedisFault defines faults used for fault injection.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault}
   */
  public static final class RedisFault extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)
      RedisFaultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RedisFault.newBuilder() to construct.
    private RedisFault(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RedisFault() {
      faultType_ = 0;
      commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RedisFault();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RedisFault(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              faultType_ = rawValue;
              break;
            }
            case 18: {
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder subBuilder = null;
              if (faultEnabled_ != null) {
                subBuilder = faultEnabled_.toBuilder();
              }
              faultEnabled_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(faultEnabled_);
                faultEnabled_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (delay_ != null) {
                subBuilder = delay_.toBuilder();
              }
              delay_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(delay_);
                delay_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                commands_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              commands_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          commands_ = commands_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_RedisFault_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_RedisFault_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder.class);
    }

    /**
     * Protobuf enum {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType}
     */
    public enum RedisFaultType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Delays requests. This is the base fault; other faults can have delays added.
       * </pre>
       *
       * <code>DELAY = 0;</code>
       */
      DELAY(0),
      /**
       * <pre>
       * Returns errors on requests.
       * </pre>
       *
       * <code>ERROR = 1;</code>
       */
      ERROR(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Delays requests. This is the base fault; other faults can have delays added.
       * </pre>
       *
       * <code>DELAY = 0;</code>
       */
      public static final int DELAY_VALUE = 0;
      /**
       * <pre>
       * Returns errors on requests.
       * </pre>
       *
       * <code>ERROR = 1;</code>
       */
      public static final int ERROR_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RedisFaultType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static RedisFaultType forNumber(int value) {
        switch (value) {
          case 0: return DELAY;
          case 1: return ERROR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RedisFaultType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RedisFaultType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RedisFaultType>() {
              public RedisFaultType findValueByNumber(int number) {
                return RedisFaultType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.getDescriptor().getEnumTypes().get(0);
      }

      private static final RedisFaultType[] VALUES = values();

      public static RedisFaultType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RedisFaultType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType)
    }

    public static final int FAULT_TYPE_FIELD_NUMBER = 1;
    private int faultType_;
    /**
     * <pre>
     * Fault type.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for faultType.
     */
    @java.lang.Override public int getFaultTypeValue() {
      return faultType_;
    }
    /**
     * <pre>
     * Fault type.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
     * @return The faultType.
     */
    @java.lang.Override public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType getFaultType() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType result = io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType.valueOf(faultType_);
      return result == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType.UNRECOGNIZED : result;
    }

    public static final int FAULT_ENABLED_FIELD_NUMBER = 2;
    private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent faultEnabled_;
    /**
     * <pre>
     * Percentage of requests fault applies to.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the faultEnabled field is set.
     */
    @java.lang.Override
    public boolean hasFaultEnabled() {
      return faultEnabled_ != null;
    }
    /**
     * <pre>
     * Percentage of requests fault applies to.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
     * @return The faultEnabled.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFaultEnabled() {
      return faultEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : faultEnabled_;
    }
    /**
     * <pre>
     * Percentage of requests fault applies to.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFaultEnabledOrBuilder() {
      return getFaultEnabled();
    }

    public static final int DELAY_FIELD_NUMBER = 3;
    private com.google.protobuf.Duration delay_;
    /**
     * <pre>
     * Delay for all faults. If not set, defaults to zero
     * </pre>
     *
     * <code>.google.protobuf.Duration delay = 3;</code>
     * @return Whether the delay field is set.
     */
    @java.lang.Override
    public boolean hasDelay() {
      return delay_ != null;
    }
    /**
     * <pre>
     * Delay for all faults. If not set, defaults to zero
     * </pre>
     *
     * <code>.google.protobuf.Duration delay = 3;</code>
     * @return The delay.
     */
    @java.lang.Override
    public com.google.protobuf.Duration getDelay() {
      return delay_ == null ? com.google.protobuf.Duration.getDefaultInstance() : delay_;
    }
    /**
     * <pre>
     * Delay for all faults. If not set, defaults to zero
     * </pre>
     *
     * <code>.google.protobuf.Duration delay = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DurationOrBuilder getDelayOrBuilder() {
      return getDelay();
    }

    public static final int COMMANDS_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList commands_;
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @return A list containing the commands.
     */
    public com.google.protobuf.ProtocolStringList
        getCommandsList() {
      return commands_;
    }
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @return The count of commands.
     */
    public int getCommandsCount() {
      return commands_.size();
    }
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @param index The index of the element to return.
     * @return The commands at the given index.
     */
    public java.lang.String getCommands(int index) {
      return commands_.get(index);
    }
    /**
     * <pre>
     * Commands fault is restricted to, if any. If not set, fault applies to all commands
     * other than auth and ping (due to special handling of those commands in Envoy).
     * </pre>
     *
     * <code>repeated string commands = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the commands at the given index.
     */
    public com.google.protobuf.ByteString
        getCommandsBytes(int index) {
      return commands_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (faultType_ != io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType.DELAY.getNumber()) {
        output.writeEnum(1, faultType_);
      }
      if (faultEnabled_ != null) {
        output.writeMessage(2, getFaultEnabled());
      }
      if (delay_ != null) {
        output.writeMessage(3, getDelay());
      }
      for (int i = 0; i < commands_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, commands_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (faultType_ != io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType.DELAY.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, faultType_);
      }
      if (faultEnabled_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFaultEnabled());
      }
      if (delay_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDelay());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < commands_.size(); i++) {
          dataSize += computeStringSizeNoTag(commands_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getCommandsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault other = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault) obj;

      if (faultType_ != other.faultType_) return false;
      if (hasFaultEnabled() != other.hasFaultEnabled()) return false;
      if (hasFaultEnabled()) {
        if (!getFaultEnabled()
            .equals(other.getFaultEnabled())) return false;
      }
      if (hasDelay() != other.hasDelay()) return false;
      if (hasDelay()) {
        if (!getDelay()
            .equals(other.getDelay())) return false;
      }
      if (!getCommandsList()
          .equals(other.getCommandsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FAULT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + faultType_;
      if (hasFaultEnabled()) {
        hash = (37 * hash) + FAULT_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + getFaultEnabled().hashCode();
      }
      if (hasDelay()) {
        hash = (37 * hash) + DELAY_FIELD_NUMBER;
        hash = (53 * hash) + getDelay().hashCode();
      }
      if (getCommandsCount() > 0) {
        hash = (37 * hash) + COMMANDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommandsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RedisFault defines faults used for fault injection.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_RedisFault_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_RedisFault_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        faultType_ = 0;

        if (faultEnabledBuilder_ == null) {
          faultEnabled_ = null;
        } else {
          faultEnabled_ = null;
          faultEnabledBuilder_ = null;
        }
        if (delayBuilder_ == null) {
          delay_ = null;
        } else {
          delay_ = null;
          delayBuilder_ = null;
        }
        commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_RedisFault_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault build() {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault buildPartial() {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault result = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault(this);
        int from_bitField0_ = bitField0_;
        result.faultType_ = faultType_;
        if (faultEnabledBuilder_ == null) {
          result.faultEnabled_ = faultEnabled_;
        } else {
          result.faultEnabled_ = faultEnabledBuilder_.build();
        }
        if (delayBuilder_ == null) {
          result.delay_ = delay_;
        } else {
          result.delay_ = delayBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          commands_ = commands_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.commands_ = commands_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault other) {
        if (other == io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.getDefaultInstance()) return this;
        if (other.faultType_ != 0) {
          setFaultTypeValue(other.getFaultTypeValue());
        }
        if (other.hasFaultEnabled()) {
          mergeFaultEnabled(other.getFaultEnabled());
        }
        if (other.hasDelay()) {
          mergeDelay(other.getDelay());
        }
        if (!other.commands_.isEmpty()) {
          if (commands_.isEmpty()) {
            commands_ = other.commands_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCommandsIsMutable();
            commands_.addAll(other.commands_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int faultType_ = 0;
      /**
       * <pre>
       * Fault type.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
       * @return The enum numeric value on the wire for faultType.
       */
      @java.lang.Override public int getFaultTypeValue() {
        return faultType_;
      }
      /**
       * <pre>
       * Fault type.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
       * @param value The enum numeric value on the wire for faultType to set.
       * @return This builder for chaining.
       */
      public Builder setFaultTypeValue(int value) {
        
        faultType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fault type.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
       * @return The faultType.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType getFaultType() {
        @SuppressWarnings("deprecation")
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType result = io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType.valueOf(faultType_);
        return result == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Fault type.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
       * @param value The faultType to set.
       * @return This builder for chaining.
       */
      public Builder setFaultType(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        faultType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fault type.
       * </pre>
       *
       * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.RedisFaultType fault_type = 1 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFaultType() {
        
        faultType_ = 0;
        onChanged();
        return this;
      }

      private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent faultEnabled_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> faultEnabledBuilder_;
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       * @return Whether the faultEnabled field is set.
       */
      public boolean hasFaultEnabled() {
        return faultEnabledBuilder_ != null || faultEnabled_ != null;
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       * @return The faultEnabled.
       */
      public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFaultEnabled() {
        if (faultEnabledBuilder_ == null) {
          return faultEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : faultEnabled_;
        } else {
          return faultEnabledBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setFaultEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
        if (faultEnabledBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          faultEnabled_ = value;
          onChanged();
        } else {
          faultEnabledBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setFaultEnabled(
          io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
        if (faultEnabledBuilder_ == null) {
          faultEnabled_ = builderForValue.build();
          onChanged();
        } else {
          faultEnabledBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeFaultEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
        if (faultEnabledBuilder_ == null) {
          if (faultEnabled_ != null) {
            faultEnabled_ =
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.newBuilder(faultEnabled_).mergeFrom(value).buildPartial();
          } else {
            faultEnabled_ = value;
          }
          onChanged();
        } else {
          faultEnabledBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder clearFaultEnabled() {
        if (faultEnabledBuilder_ == null) {
          faultEnabled_ = null;
          onChanged();
        } else {
          faultEnabled_ = null;
          faultEnabledBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getFaultEnabledBuilder() {
        
        onChanged();
        return getFaultEnabledFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFaultEnabledOrBuilder() {
        if (faultEnabledBuilder_ != null) {
          return faultEnabledBuilder_.getMessageOrBuilder();
        } else {
          return faultEnabled_ == null ?
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : faultEnabled_;
        }
      }
      /**
       * <pre>
       * Percentage of requests fault applies to.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFractionalPercent fault_enabled = 2 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
          getFaultEnabledFieldBuilder() {
        if (faultEnabledBuilder_ == null) {
          faultEnabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                  getFaultEnabled(),
                  getParentForChildren(),
                  isClean());
          faultEnabled_ = null;
        }
        return faultEnabledBuilder_;
      }

      private com.google.protobuf.Duration delay_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> delayBuilder_;
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       * @return Whether the delay field is set.
       */
      public boolean hasDelay() {
        return delayBuilder_ != null || delay_ != null;
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       * @return The delay.
       */
      public com.google.protobuf.Duration getDelay() {
        if (delayBuilder_ == null) {
          return delay_ == null ? com.google.protobuf.Duration.getDefaultInstance() : delay_;
        } else {
          return delayBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      public Builder setDelay(com.google.protobuf.Duration value) {
        if (delayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          delay_ = value;
          onChanged();
        } else {
          delayBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      public Builder setDelay(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (delayBuilder_ == null) {
          delay_ = builderForValue.build();
          onChanged();
        } else {
          delayBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      public Builder mergeDelay(com.google.protobuf.Duration value) {
        if (delayBuilder_ == null) {
          if (delay_ != null) {
            delay_ =
              com.google.protobuf.Duration.newBuilder(delay_).mergeFrom(value).buildPartial();
          } else {
            delay_ = value;
          }
          onChanged();
        } else {
          delayBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      public Builder clearDelay() {
        if (delayBuilder_ == null) {
          delay_ = null;
          onChanged();
        } else {
          delay_ = null;
          delayBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      public com.google.protobuf.Duration.Builder getDelayBuilder() {
        
        onChanged();
        return getDelayFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      public com.google.protobuf.DurationOrBuilder getDelayOrBuilder() {
        if (delayBuilder_ != null) {
          return delayBuilder_.getMessageOrBuilder();
        } else {
          return delay_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : delay_;
        }
      }
      /**
       * <pre>
       * Delay for all faults. If not set, defaults to zero
       * </pre>
       *
       * <code>.google.protobuf.Duration delay = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getDelayFieldBuilder() {
        if (delayBuilder_ == null) {
          delayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getDelay(),
                  getParentForChildren(),
                  isClean());
          delay_ = null;
        }
        return delayBuilder_;
      }

      private com.google.protobuf.LazyStringList commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCommandsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          commands_ = new com.google.protobuf.LazyStringArrayList(commands_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @return A list containing the commands.
       */
      public com.google.protobuf.ProtocolStringList
          getCommandsList() {
        return commands_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @return The count of commands.
       */
      public int getCommandsCount() {
        return commands_.size();
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @param index The index of the element to return.
       * @return The commands at the given index.
       */
      public java.lang.String getCommands(int index) {
        return commands_.get(index);
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the commands at the given index.
       */
      public com.google.protobuf.ByteString
          getCommandsBytes(int index) {
        return commands_.getByteString(index);
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @param index The index to set the value at.
       * @param value The commands to set.
       * @return This builder for chaining.
       */
      public Builder setCommands(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandsIsMutable();
        commands_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @param value The commands to add.
       * @return This builder for chaining.
       */
      public Builder addCommands(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandsIsMutable();
        commands_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @param values The commands to add.
       * @return This builder for chaining.
       */
      public Builder addAllCommands(
          java.lang.Iterable<java.lang.String> values) {
        ensureCommandsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, commands_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommands() {
        commands_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Commands fault is restricted to, if any. If not set, fault applies to all commands
       * other than auth and ping (due to special handling of those commands in Envoy).
       * </pre>
       *
       * <code>repeated string commands = 4;</code>
       * @param value The bytes of the commands to add.
       * @return This builder for chaining.
       */
      public Builder addCommandsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureCommandsIsMutable();
        commands_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault)
    private static final io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault();
    }

    public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RedisFault>
        PARSER = new com.google.protobuf.AbstractParser<RedisFault>() {
      @java.lang.Override
      public RedisFault parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RedisFault(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RedisFault> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RedisFault> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int STAT_PREFIX_FIELD_NUMBER = 1;
  private volatile java.lang.Object statPrefix_;
  /**
   * <pre>
   * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  @java.lang.Override
  public java.lang.String getStatPrefix() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      statPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStatPrefixBytes() {
    java.lang.Object ref = statPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      statPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SETTINGS_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings_;
  /**
   * <pre>
   * Network settings for the connection pool to the upstream clusters.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the settings field is set.
   */
  @java.lang.Override
  public boolean hasSettings() {
    return settings_ != null;
  }
  /**
   * <pre>
   * Network settings for the connection pool to the upstream clusters.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
   * @return The settings.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings getSettings() {
    return settings_ == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.getDefaultInstance() : settings_;
  }
  /**
   * <pre>
   * Network settings for the connection pool to the upstream clusters.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettingsOrBuilder getSettingsOrBuilder() {
    return getSettings();
  }

  public static final int LATENCY_IN_MICROS_FIELD_NUMBER = 4;
  private boolean latencyInMicros_;
  /**
   * <pre>
   * Indicates that latency stat should be computed in microseconds. By default it is computed in
   * milliseconds. This does not apply to upstream command stats currently.
   * </pre>
   *
   * <code>bool latency_in_micros = 4;</code>
   * @return The latencyInMicros.
   */
  @java.lang.Override
  public boolean getLatencyInMicros() {
    return latencyInMicros_;
  }

  public static final int PREFIX_ROUTES_FIELD_NUMBER = 5;
  private io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefixRoutes_;
  /**
   * <pre>
   * List of **unique** prefixes used to separate keys from different workloads to different
   * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
   * cluster can be used to forward commands when there is no match. Time complexity of the
   * lookups are in O(min(longest key prefix, key length)).
   * Example:
   * .. code-block:: yaml
   *    prefix_routes:
   *      routes:
   *        - prefix: "ab"
   *          cluster: "cluster_a"
   *        - prefix: "abc"
   *          cluster: "cluster_b"
   * When using the above routes, the following prefixes would be sent to:
   * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
   * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
   * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
   *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
   *   would have retrieved the key from that cluster instead.
   * See the :ref:`configuration section
   * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
   * configuring the backing clusters.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
   * @return Whether the prefixRoutes field is set.
   */
  @java.lang.Override
  public boolean hasPrefixRoutes() {
    return prefixRoutes_ != null;
  }
  /**
   * <pre>
   * List of **unique** prefixes used to separate keys from different workloads to different
   * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
   * cluster can be used to forward commands when there is no match. Time complexity of the
   * lookups are in O(min(longest key prefix, key length)).
   * Example:
   * .. code-block:: yaml
   *    prefix_routes:
   *      routes:
   *        - prefix: "ab"
   *          cluster: "cluster_a"
   *        - prefix: "abc"
   *          cluster: "cluster_b"
   * When using the above routes, the following prefixes would be sent to:
   * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
   * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
   * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
   *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
   *   would have retrieved the key from that cluster instead.
   * See the :ref:`configuration section
   * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
   * configuring the backing clusters.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
   * @return The prefixRoutes.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes getPrefixRoutes() {
    return prefixRoutes_ == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.getDefaultInstance() : prefixRoutes_;
  }
  /**
   * <pre>
   * List of **unique** prefixes used to separate keys from different workloads to different
   * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
   * cluster can be used to forward commands when there is no match. Time complexity of the
   * lookups are in O(min(longest key prefix, key length)).
   * Example:
   * .. code-block:: yaml
   *    prefix_routes:
   *      routes:
   *        - prefix: "ab"
   *          cluster: "cluster_a"
   *        - prefix: "abc"
   *          cluster: "cluster_b"
   * When using the above routes, the following prefixes would be sent to:
   * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
   * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
   * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
   *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
   *   would have retrieved the key from that cluster instead.
   * See the :ref:`configuration section
   * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
   * configuring the backing clusters.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutesOrBuilder getPrefixRoutesOrBuilder() {
    return getPrefixRoutes();
  }

  public static final int DOWNSTREAM_AUTH_PASSWORD_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.core.v3.DataSource downstreamAuthPassword_;
  /**
   * <pre>
   * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
   * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
   * command. If an AUTH command's password matches this password, an "OK" response will be returned
   * to the client. If the AUTH command password does not match this password, then an "ERR invalid
   * password" error will be returned. If any other command is received before AUTH when this
   * password is set, then a "NOAUTH Authentication required." error response will be sent to the
   * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
   * AUTH, but no password is set" error will be returned.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
   * @return Whether the downstreamAuthPassword field is set.
   */
  @java.lang.Override
  public boolean hasDownstreamAuthPassword() {
    return downstreamAuthPassword_ != null;
  }
  /**
   * <pre>
   * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
   * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
   * command. If an AUTH command's password matches this password, an "OK" response will be returned
   * to the client. If the AUTH command password does not match this password, then an "ERR invalid
   * password" error will be returned. If any other command is received before AUTH when this
   * password is set, then a "NOAUTH Authentication required." error response will be sent to the
   * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
   * AUTH, but no password is set" error will be returned.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
   * @return The downstreamAuthPassword.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSource getDownstreamAuthPassword() {
    return downstreamAuthPassword_ == null ? io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : downstreamAuthPassword_;
  }
  /**
   * <pre>
   * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
   * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
   * command. If an AUTH command's password matches this password, an "OK" response will be returned
   * to the client. If the AUTH command password does not match this password, then an "ERR invalid
   * password" error will be returned. If any other command is received before AUTH when this
   * password is set, then a "NOAUTH Authentication required." error response will be sent to the
   * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
   * AUTH, but no password is set" error will be returned.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDownstreamAuthPasswordOrBuilder() {
    return getDownstreamAuthPassword();
  }

  public static final int FAULTS_FIELD_NUMBER = 8;
  private java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault> faults_;
  /**
   * <pre>
   * List of faults to inject. Faults currently come in two flavors:
   * - Delay, which delays a request.
   * - Error, which responds to a request with an error. Errors can also have delays attached.
   * Example:
   * .. code-block:: yaml
   *    faults:
   *    - fault_type: ERROR
   *      fault_enabled:
   *        default_value:
   *          numerator: 10
   *          denominator: HUNDRED
   *        runtime_key: "bogus_key"
   *        commands:
   *        - GET
   *      - fault_type: DELAY
   *        fault_enabled:
   *          default_value:
   *            numerator: 10
   *            denominator: HUNDRED
   *          runtime_key: "bogus_key"
   *        delay: 2s
   * See the :ref:`fault injection section
   * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault> getFaultsList() {
    return faults_;
  }
  /**
   * <pre>
   * List of faults to inject. Faults currently come in two flavors:
   * - Delay, which delays a request.
   * - Error, which responds to a request with an error. Errors can also have delays attached.
   * Example:
   * .. code-block:: yaml
   *    faults:
   *    - fault_type: ERROR
   *      fault_enabled:
   *        default_value:
   *          numerator: 10
   *          denominator: HUNDRED
   *        runtime_key: "bogus_key"
   *        commands:
   *        - GET
   *      - fault_type: DELAY
   *        fault_enabled:
   *          default_value:
   *            numerator: 10
   *            denominator: HUNDRED
   *          runtime_key: "bogus_key"
   *        delay: 2s
   * See the :ref:`fault injection section
   * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder> 
      getFaultsOrBuilderList() {
    return faults_;
  }
  /**
   * <pre>
   * List of faults to inject. Faults currently come in two flavors:
   * - Delay, which delays a request.
   * - Error, which responds to a request with an error. Errors can also have delays attached.
   * Example:
   * .. code-block:: yaml
   *    faults:
   *    - fault_type: ERROR
   *      fault_enabled:
   *        default_value:
   *          numerator: 10
   *          denominator: HUNDRED
   *        runtime_key: "bogus_key"
   *        commands:
   *        - GET
   *      - fault_type: DELAY
   *        fault_enabled:
   *          default_value:
   *            numerator: 10
   *            denominator: HUNDRED
   *          runtime_key: "bogus_key"
   *        delay: 2s
   * See the :ref:`fault injection section
   * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
   */
  @java.lang.Override
  public int getFaultsCount() {
    return faults_.size();
  }
  /**
   * <pre>
   * List of faults to inject. Faults currently come in two flavors:
   * - Delay, which delays a request.
   * - Error, which responds to a request with an error. Errors can also have delays attached.
   * Example:
   * .. code-block:: yaml
   *    faults:
   *    - fault_type: ERROR
   *      fault_enabled:
   *        default_value:
   *          numerator: 10
   *          denominator: HUNDRED
   *        runtime_key: "bogus_key"
   *        commands:
   *        - GET
   *      - fault_type: DELAY
   *        fault_enabled:
   *          default_value:
   *            numerator: 10
   *            denominator: HUNDRED
   *          runtime_key: "bogus_key"
   *        delay: 2s
   * See the :ref:`fault injection section
   * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault getFaults(int index) {
    return faults_.get(index);
  }
  /**
   * <pre>
   * List of faults to inject. Faults currently come in two flavors:
   * - Delay, which delays a request.
   * - Error, which responds to a request with an error. Errors can also have delays attached.
   * Example:
   * .. code-block:: yaml
   *    faults:
   *    - fault_type: ERROR
   *      fault_enabled:
   *        default_value:
   *          numerator: 10
   *          denominator: HUNDRED
   *        runtime_key: "bogus_key"
   *        commands:
   *        - GET
   *      - fault_type: DELAY
   *        fault_enabled:
   *          default_value:
   *            numerator: 10
   *            denominator: HUNDRED
   *          runtime_key: "bogus_key"
   *        delay: 2s
   * See the :ref:`fault injection section
   * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder getFaultsOrBuilder(
      int index) {
    return faults_.get(index);
  }

  public static final int DOWNSTREAM_AUTH_USERNAME_FIELD_NUMBER = 7;
  private io.envoyproxy.envoy.config.core.v3.DataSource downstreamAuthUsername_;
  /**
   * <pre>
   * If a username is provided an ACL style AUTH command will be required with a username and password.
   * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
   * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
   * before enabling any other command. If an AUTH command's username and password matches this username
   * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
   * command username or password does not match this username or the *downstream_auth_password*, then an
   * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
   * password is set, then a "NOAUTH Authentication required." error response will be sent to the
   * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
   * AUTH, but no ACL is set" error will be returned.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
   * @return Whether the downstreamAuthUsername field is set.
   */
  @java.lang.Override
  public boolean hasDownstreamAuthUsername() {
    return downstreamAuthUsername_ != null;
  }
  /**
   * <pre>
   * If a username is provided an ACL style AUTH command will be required with a username and password.
   * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
   * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
   * before enabling any other command. If an AUTH command's username and password matches this username
   * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
   * command username or password does not match this username or the *downstream_auth_password*, then an
   * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
   * password is set, then a "NOAUTH Authentication required." error response will be sent to the
   * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
   * AUTH, but no ACL is set" error will be returned.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
   * @return The downstreamAuthUsername.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSource getDownstreamAuthUsername() {
    return downstreamAuthUsername_ == null ? io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : downstreamAuthUsername_;
  }
  /**
   * <pre>
   * If a username is provided an ACL style AUTH command will be required with a username and password.
   * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
   * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
   * before enabling any other command. If an AUTH command's username and password matches this username
   * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
   * command username or password does not match this username or the *downstream_auth_password*, then an
   * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
   * password is set, then a "NOAUTH Authentication required." error response will be sent to the
   * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
   * AUTH, but no ACL is set" error will be returned.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDownstreamAuthUsernameOrBuilder() {
    return getDownstreamAuthUsername();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getStatPrefixBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, statPrefix_);
    }
    if (settings_ != null) {
      output.writeMessage(3, getSettings());
    }
    if (latencyInMicros_ != false) {
      output.writeBool(4, latencyInMicros_);
    }
    if (prefixRoutes_ != null) {
      output.writeMessage(5, getPrefixRoutes());
    }
    if (downstreamAuthPassword_ != null) {
      output.writeMessage(6, getDownstreamAuthPassword());
    }
    if (downstreamAuthUsername_ != null) {
      output.writeMessage(7, getDownstreamAuthUsername());
    }
    for (int i = 0; i < faults_.size(); i++) {
      output.writeMessage(8, faults_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getStatPrefixBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, statPrefix_);
    }
    if (settings_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getSettings());
    }
    if (latencyInMicros_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, latencyInMicros_);
    }
    if (prefixRoutes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getPrefixRoutes());
    }
    if (downstreamAuthPassword_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getDownstreamAuthPassword());
    }
    if (downstreamAuthUsername_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getDownstreamAuthUsername());
    }
    for (int i = 0; i < faults_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, faults_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy other = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy) obj;

    if (!getStatPrefix()
        .equals(other.getStatPrefix())) return false;
    if (hasSettings() != other.hasSettings()) return false;
    if (hasSettings()) {
      if (!getSettings()
          .equals(other.getSettings())) return false;
    }
    if (getLatencyInMicros()
        != other.getLatencyInMicros()) return false;
    if (hasPrefixRoutes() != other.hasPrefixRoutes()) return false;
    if (hasPrefixRoutes()) {
      if (!getPrefixRoutes()
          .equals(other.getPrefixRoutes())) return false;
    }
    if (hasDownstreamAuthPassword() != other.hasDownstreamAuthPassword()) return false;
    if (hasDownstreamAuthPassword()) {
      if (!getDownstreamAuthPassword()
          .equals(other.getDownstreamAuthPassword())) return false;
    }
    if (!getFaultsList()
        .equals(other.getFaultsList())) return false;
    if (hasDownstreamAuthUsername() != other.hasDownstreamAuthUsername()) return false;
    if (hasDownstreamAuthUsername()) {
      if (!getDownstreamAuthUsername()
          .equals(other.getDownstreamAuthUsername())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STAT_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getStatPrefix().hashCode();
    if (hasSettings()) {
      hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
      hash = (53 * hash) + getSettings().hashCode();
    }
    hash = (37 * hash) + LATENCY_IN_MICROS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getLatencyInMicros());
    if (hasPrefixRoutes()) {
      hash = (37 * hash) + PREFIX_ROUTES_FIELD_NUMBER;
      hash = (53 * hash) + getPrefixRoutes().hashCode();
    }
    if (hasDownstreamAuthPassword()) {
      hash = (37 * hash) + DOWNSTREAM_AUTH_PASSWORD_FIELD_NUMBER;
      hash = (53 * hash) + getDownstreamAuthPassword().hashCode();
    }
    if (getFaultsCount() > 0) {
      hash = (37 * hash) + FAULTS_FIELD_NUMBER;
      hash = (53 * hash) + getFaultsList().hashCode();
    }
    if (hasDownstreamAuthUsername()) {
      hash = (37 * hash) + DOWNSTREAM_AUTH_USERNAME_FIELD_NUMBER;
      hash = (53 * hash) + getDownstreamAuthUsername().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.network.redis_proxy.v3.RedisProxy}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy)
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.class, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getFaultsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      statPrefix_ = "";

      if (settingsBuilder_ == null) {
        settings_ = null;
      } else {
        settings_ = null;
        settingsBuilder_ = null;
      }
      latencyInMicros_ = false;

      if (prefixRoutesBuilder_ == null) {
        prefixRoutes_ = null;
      } else {
        prefixRoutes_ = null;
        prefixRoutesBuilder_ = null;
      }
      if (downstreamAuthPasswordBuilder_ == null) {
        downstreamAuthPassword_ = null;
      } else {
        downstreamAuthPassword_ = null;
        downstreamAuthPasswordBuilder_ = null;
      }
      if (faultsBuilder_ == null) {
        faults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        faultsBuilder_.clear();
      }
      if (downstreamAuthUsernameBuilder_ == null) {
        downstreamAuthUsername_ = null;
      } else {
        downstreamAuthUsername_ = null;
        downstreamAuthUsernameBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxyProto.internal_static_envoy_extensions_filters_network_redis_proxy_v3_RedisProxy_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy build() {
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy buildPartial() {
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy result = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy(this);
      int from_bitField0_ = bitField0_;
      result.statPrefix_ = statPrefix_;
      if (settingsBuilder_ == null) {
        result.settings_ = settings_;
      } else {
        result.settings_ = settingsBuilder_.build();
      }
      result.latencyInMicros_ = latencyInMicros_;
      if (prefixRoutesBuilder_ == null) {
        result.prefixRoutes_ = prefixRoutes_;
      } else {
        result.prefixRoutes_ = prefixRoutesBuilder_.build();
      }
      if (downstreamAuthPasswordBuilder_ == null) {
        result.downstreamAuthPassword_ = downstreamAuthPassword_;
      } else {
        result.downstreamAuthPassword_ = downstreamAuthPasswordBuilder_.build();
      }
      if (faultsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          faults_ = java.util.Collections.unmodifiableList(faults_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.faults_ = faults_;
      } else {
        result.faults_ = faultsBuilder_.build();
      }
      if (downstreamAuthUsernameBuilder_ == null) {
        result.downstreamAuthUsername_ = downstreamAuthUsername_;
      } else {
        result.downstreamAuthUsername_ = downstreamAuthUsernameBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy other) {
      if (other == io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.getDefaultInstance()) return this;
      if (!other.getStatPrefix().isEmpty()) {
        statPrefix_ = other.statPrefix_;
        onChanged();
      }
      if (other.hasSettings()) {
        mergeSettings(other.getSettings());
      }
      if (other.getLatencyInMicros() != false) {
        setLatencyInMicros(other.getLatencyInMicros());
      }
      if (other.hasPrefixRoutes()) {
        mergePrefixRoutes(other.getPrefixRoutes());
      }
      if (other.hasDownstreamAuthPassword()) {
        mergeDownstreamAuthPassword(other.getDownstreamAuthPassword());
      }
      if (faultsBuilder_ == null) {
        if (!other.faults_.isEmpty()) {
          if (faults_.isEmpty()) {
            faults_ = other.faults_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFaultsIsMutable();
            faults_.addAll(other.faults_);
          }
          onChanged();
        }
      } else {
        if (!other.faults_.isEmpty()) {
          if (faultsBuilder_.isEmpty()) {
            faultsBuilder_.dispose();
            faultsBuilder_ = null;
            faults_ = other.faults_;
            bitField0_ = (bitField0_ & ~0x00000001);
            faultsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFaultsFieldBuilder() : null;
          } else {
            faultsBuilder_.addAllMessages(other.faults_);
          }
        }
      }
      if (other.hasDownstreamAuthUsername()) {
        mergeDownstreamAuthUsername(other.getDownstreamAuthUsername());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object statPrefix_ = "";
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The statPrefix.
     */
    public java.lang.String getStatPrefix() {
      java.lang.Object ref = statPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for statPrefix.
     */
    public com.google.protobuf.ByteString
        getStatPrefixBytes() {
      java.lang.Object ref = statPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefix(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      statPrefix_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearStatPrefix() {
      
      statPrefix_ = getDefaultInstance().getStatPrefix();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The prefix to use when emitting :ref:`statistics &lt;config_network_filters_redis_proxy_stats&gt;`.
     * </pre>
     *
     * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for statPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setStatPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      statPrefix_ = value;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettingsOrBuilder> settingsBuilder_;
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the settings field is set.
     */
    public boolean hasSettings() {
      return settingsBuilder_ != null || settings_ != null;
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     * @return The settings.
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings getSettings() {
      if (settingsBuilder_ == null) {
        return settings_ == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.getDefaultInstance() : settings_;
      } else {
        return settingsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setSettings(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings value) {
      if (settingsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        settings_ = value;
        onChanged();
      } else {
        settingsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setSettings(
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder builderForValue) {
      if (settingsBuilder_ == null) {
        settings_ = builderForValue.build();
        onChanged();
      } else {
        settingsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeSettings(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings value) {
      if (settingsBuilder_ == null) {
        if (settings_ != null) {
          settings_ =
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.newBuilder(settings_).mergeFrom(value).buildPartial();
        } else {
          settings_ = value;
        }
        onChanged();
      } else {
        settingsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearSettings() {
      if (settingsBuilder_ == null) {
        settings_ = null;
        onChanged();
      } else {
        settings_ = null;
        settingsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder getSettingsBuilder() {
      
      onChanged();
      return getSettingsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettingsOrBuilder getSettingsOrBuilder() {
      if (settingsBuilder_ != null) {
        return settingsBuilder_.getMessageOrBuilder();
      } else {
        return settings_ == null ?
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.getDefaultInstance() : settings_;
      }
    }
    /**
     * <pre>
     * Network settings for the connection pool to the upstream clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings settings = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettingsOrBuilder> 
        getSettingsFieldBuilder() {
      if (settingsBuilder_ == null) {
        settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettings.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.ConnPoolSettingsOrBuilder>(
                getSettings(),
                getParentForChildren(),
                isClean());
        settings_ = null;
      }
      return settingsBuilder_;
    }

    private boolean latencyInMicros_ ;
    /**
     * <pre>
     * Indicates that latency stat should be computed in microseconds. By default it is computed in
     * milliseconds. This does not apply to upstream command stats currently.
     * </pre>
     *
     * <code>bool latency_in_micros = 4;</code>
     * @return The latencyInMicros.
     */
    @java.lang.Override
    public boolean getLatencyInMicros() {
      return latencyInMicros_;
    }
    /**
     * <pre>
     * Indicates that latency stat should be computed in microseconds. By default it is computed in
     * milliseconds. This does not apply to upstream command stats currently.
     * </pre>
     *
     * <code>bool latency_in_micros = 4;</code>
     * @param value The latencyInMicros to set.
     * @return This builder for chaining.
     */
    public Builder setLatencyInMicros(boolean value) {
      
      latencyInMicros_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates that latency stat should be computed in microseconds. By default it is computed in
     * milliseconds. This does not apply to upstream command stats currently.
     * </pre>
     *
     * <code>bool latency_in_micros = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearLatencyInMicros() {
      
      latencyInMicros_ = false;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefixRoutes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutesOrBuilder> prefixRoutesBuilder_;
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     * @return Whether the prefixRoutes field is set.
     */
    public boolean hasPrefixRoutes() {
      return prefixRoutesBuilder_ != null || prefixRoutes_ != null;
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     * @return The prefixRoutes.
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes getPrefixRoutes() {
      if (prefixRoutesBuilder_ == null) {
        return prefixRoutes_ == null ? io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.getDefaultInstance() : prefixRoutes_;
      } else {
        return prefixRoutesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    public Builder setPrefixRoutes(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes value) {
      if (prefixRoutesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        prefixRoutes_ = value;
        onChanged();
      } else {
        prefixRoutesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    public Builder setPrefixRoutes(
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder builderForValue) {
      if (prefixRoutesBuilder_ == null) {
        prefixRoutes_ = builderForValue.build();
        onChanged();
      } else {
        prefixRoutesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    public Builder mergePrefixRoutes(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes value) {
      if (prefixRoutesBuilder_ == null) {
        if (prefixRoutes_ != null) {
          prefixRoutes_ =
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.newBuilder(prefixRoutes_).mergeFrom(value).buildPartial();
        } else {
          prefixRoutes_ = value;
        }
        onChanged();
      } else {
        prefixRoutesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    public Builder clearPrefixRoutes() {
      if (prefixRoutesBuilder_ == null) {
        prefixRoutes_ = null;
        onChanged();
      } else {
        prefixRoutes_ = null;
        prefixRoutesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder getPrefixRoutesBuilder() {
      
      onChanged();
      return getPrefixRoutesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutesOrBuilder getPrefixRoutesOrBuilder() {
      if (prefixRoutesBuilder_ != null) {
        return prefixRoutesBuilder_.getMessageOrBuilder();
      } else {
        return prefixRoutes_ == null ?
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.getDefaultInstance() : prefixRoutes_;
      }
    }
    /**
     * <pre>
     * List of **unique** prefixes used to separate keys from different workloads to different
     * clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
     * cluster can be used to forward commands when there is no match. Time complexity of the
     * lookups are in O(min(longest key prefix, key length)).
     * Example:
     * .. code-block:: yaml
     *    prefix_routes:
     *      routes:
     *        - prefix: "ab"
     *          cluster: "cluster_a"
     *        - prefix: "abc"
     *          cluster: "cluster_b"
     * When using the above routes, the following prefixes would be sent to:
     * * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
     * * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
     * * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
     *   route&lt;envoy_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route&gt;`
     *   would have retrieved the key from that cluster instead.
     * See the :ref:`configuration section
     * &lt;arch_overview_redis_configuration&gt;` of the architecture overview for recommendations on
     * configuring the backing clusters.
     * </pre>
     *
     * <code>.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes prefix_routes = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutesOrBuilder> 
        getPrefixRoutesFieldBuilder() {
      if (prefixRoutesBuilder_ == null) {
        prefixRoutesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutesOrBuilder>(
                getPrefixRoutes(),
                getParentForChildren(),
                isClean());
        prefixRoutes_ = null;
      }
      return prefixRoutesBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.DataSource downstreamAuthPassword_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> downstreamAuthPasswordBuilder_;
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     * @return Whether the downstreamAuthPassword field is set.
     */
    public boolean hasDownstreamAuthPassword() {
      return downstreamAuthPasswordBuilder_ != null || downstreamAuthPassword_ != null;
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     * @return The downstreamAuthPassword.
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource getDownstreamAuthPassword() {
      if (downstreamAuthPasswordBuilder_ == null) {
        return downstreamAuthPassword_ == null ? io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : downstreamAuthPassword_;
      } else {
        return downstreamAuthPasswordBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder setDownstreamAuthPassword(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (downstreamAuthPasswordBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        downstreamAuthPassword_ = value;
        onChanged();
      } else {
        downstreamAuthPasswordBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder setDownstreamAuthPassword(
        io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (downstreamAuthPasswordBuilder_ == null) {
        downstreamAuthPassword_ = builderForValue.build();
        onChanged();
      } else {
        downstreamAuthPasswordBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder mergeDownstreamAuthPassword(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (downstreamAuthPasswordBuilder_ == null) {
        if (downstreamAuthPassword_ != null) {
          downstreamAuthPassword_ =
            io.envoyproxy.envoy.config.core.v3.DataSource.newBuilder(downstreamAuthPassword_).mergeFrom(value).buildPartial();
        } else {
          downstreamAuthPassword_ = value;
        }
        onChanged();
      } else {
        downstreamAuthPasswordBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder clearDownstreamAuthPassword() {
      if (downstreamAuthPasswordBuilder_ == null) {
        downstreamAuthPassword_ = null;
        onChanged();
      } else {
        downstreamAuthPassword_ = null;
        downstreamAuthPasswordBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getDownstreamAuthPasswordBuilder() {
      
      onChanged();
      return getDownstreamAuthPasswordFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDownstreamAuthPasswordOrBuilder() {
      if (downstreamAuthPasswordBuilder_ != null) {
        return downstreamAuthPasswordBuilder_.getMessageOrBuilder();
      } else {
        return downstreamAuthPassword_ == null ?
            io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : downstreamAuthPassword_;
      }
    }
    /**
     * <pre>
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this password before enabling any other
     * command. If an AUTH command's password matches this password, an "OK" response will be returned
     * to the client. If the AUTH command password does not match this password, then an "ERR invalid
     * password" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no password is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_password = 6 [(.udpa.annotations.sensitive) = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
        getDownstreamAuthPasswordFieldBuilder() {
      if (downstreamAuthPasswordBuilder_ == null) {
        downstreamAuthPasswordBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                getDownstreamAuthPassword(),
                getParentForChildren(),
                isClean());
        downstreamAuthPassword_ = null;
      }
      return downstreamAuthPasswordBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault> faults_ =
      java.util.Collections.emptyList();
    private void ensureFaultsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        faults_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault>(faults_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder> faultsBuilder_;

    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault> getFaultsList() {
      if (faultsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(faults_);
      } else {
        return faultsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public int getFaultsCount() {
      if (faultsBuilder_ == null) {
        return faults_.size();
      } else {
        return faultsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault getFaults(int index) {
      if (faultsBuilder_ == null) {
        return faults_.get(index);
      } else {
        return faultsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder setFaults(
        int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault value) {
      if (faultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFaultsIsMutable();
        faults_.set(index, value);
        onChanged();
      } else {
        faultsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder setFaults(
        int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder builderForValue) {
      if (faultsBuilder_ == null) {
        ensureFaultsIsMutable();
        faults_.set(index, builderForValue.build());
        onChanged();
      } else {
        faultsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder addFaults(io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault value) {
      if (faultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFaultsIsMutable();
        faults_.add(value);
        onChanged();
      } else {
        faultsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder addFaults(
        int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault value) {
      if (faultsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFaultsIsMutable();
        faults_.add(index, value);
        onChanged();
      } else {
        faultsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder addFaults(
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder builderForValue) {
      if (faultsBuilder_ == null) {
        ensureFaultsIsMutable();
        faults_.add(builderForValue.build());
        onChanged();
      } else {
        faultsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder addFaults(
        int index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder builderForValue) {
      if (faultsBuilder_ == null) {
        ensureFaultsIsMutable();
        faults_.add(index, builderForValue.build());
        onChanged();
      } else {
        faultsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder addAllFaults(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault> values) {
      if (faultsBuilder_ == null) {
        ensureFaultsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, faults_);
        onChanged();
      } else {
        faultsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder clearFaults() {
      if (faultsBuilder_ == null) {
        faults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        faultsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public Builder removeFaults(int index) {
      if (faultsBuilder_ == null) {
        ensureFaultsIsMutable();
        faults_.remove(index);
        onChanged();
      } else {
        faultsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder getFaultsBuilder(
        int index) {
      return getFaultsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder getFaultsOrBuilder(
        int index) {
      if (faultsBuilder_ == null) {
        return faults_.get(index);  } else {
        return faultsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder> 
         getFaultsOrBuilderList() {
      if (faultsBuilder_ != null) {
        return faultsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(faults_);
      }
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder addFaultsBuilder() {
      return getFaultsFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.getDefaultInstance());
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder addFaultsBuilder(
        int index) {
      return getFaultsFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.getDefaultInstance());
    }
    /**
     * <pre>
     * List of faults to inject. Faults currently come in two flavors:
     * - Delay, which delays a request.
     * - Error, which responds to a request with an error. Errors can also have delays attached.
     * Example:
     * .. code-block:: yaml
     *    faults:
     *    - fault_type: ERROR
     *      fault_enabled:
     *        default_value:
     *          numerator: 10
     *          denominator: HUNDRED
     *        runtime_key: "bogus_key"
     *        commands:
     *        - GET
     *      - fault_type: DELAY
     *        fault_enabled:
     *          default_value:
     *            numerator: 10
     *            denominator: HUNDRED
     *          runtime_key: "bogus_key"
     *        delay: 2s
     * See the :ref:`fault injection section
     * &lt;config_network_filters_redis_proxy_fault_injection&gt;` for more information on how to configure this.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault faults = 8;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder> 
         getFaultsBuilderList() {
      return getFaultsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder> 
        getFaultsFieldBuilder() {
      if (faultsBuilder_ == null) {
        faultsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFault.Builder, io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy.RedisFaultOrBuilder>(
                faults_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        faults_ = null;
      }
      return faultsBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.DataSource downstreamAuthUsername_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> downstreamAuthUsernameBuilder_;
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     * @return Whether the downstreamAuthUsername field is set.
     */
    public boolean hasDownstreamAuthUsername() {
      return downstreamAuthUsernameBuilder_ != null || downstreamAuthUsername_ != null;
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     * @return The downstreamAuthUsername.
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource getDownstreamAuthUsername() {
      if (downstreamAuthUsernameBuilder_ == null) {
        return downstreamAuthUsername_ == null ? io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : downstreamAuthUsername_;
      } else {
        return downstreamAuthUsernameBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder setDownstreamAuthUsername(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (downstreamAuthUsernameBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        downstreamAuthUsername_ = value;
        onChanged();
      } else {
        downstreamAuthUsernameBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder setDownstreamAuthUsername(
        io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (downstreamAuthUsernameBuilder_ == null) {
        downstreamAuthUsername_ = builderForValue.build();
        onChanged();
      } else {
        downstreamAuthUsernameBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder mergeDownstreamAuthUsername(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (downstreamAuthUsernameBuilder_ == null) {
        if (downstreamAuthUsername_ != null) {
          downstreamAuthUsername_ =
            io.envoyproxy.envoy.config.core.v3.DataSource.newBuilder(downstreamAuthUsername_).mergeFrom(value).buildPartial();
        } else {
          downstreamAuthUsername_ = value;
        }
        onChanged();
      } else {
        downstreamAuthUsernameBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    public Builder clearDownstreamAuthUsername() {
      if (downstreamAuthUsernameBuilder_ == null) {
        downstreamAuthUsername_ = null;
        onChanged();
      } else {
        downstreamAuthUsername_ = null;
        downstreamAuthUsernameBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getDownstreamAuthUsernameBuilder() {
      
      onChanged();
      return getDownstreamAuthUsernameFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getDownstreamAuthUsernameOrBuilder() {
      if (downstreamAuthUsernameBuilder_ != null) {
        return downstreamAuthUsernameBuilder_.getMessageOrBuilder();
      } else {
        return downstreamAuthUsername_ == null ?
            io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance() : downstreamAuthUsername_;
      }
    }
    /**
     * <pre>
     * If a username is provided an ACL style AUTH command will be required with a username and password.
     * Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
     * AUTH command &lt;https://redis.io/commands/auth&gt;`_ with this username and the *downstream_auth_password*
     * before enabling any other command. If an AUTH command's username and password matches this username
     * and the *downstream_auth_password* , an "OK" response will be returned to the client. If the AUTH
     * command username or password does not match this username or the *downstream_auth_password*, then an
     * "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
     * password is set, then a "NOAUTH Authentication required." error response will be sent to the
     * client. If an AUTH command is received when the password is not set, then an "ERR Client sent
     * AUTH, but no ACL is set" error will be returned.
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource downstream_auth_username = 7 [(.udpa.annotations.sensitive) = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
        getDownstreamAuthUsernameFieldBuilder() {
      if (downstreamAuthUsernameBuilder_ == null) {
        downstreamAuthUsernameBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                getDownstreamAuthUsername(),
                getParentForChildren(),
                isClean());
        downstreamAuthUsername_ = null;
      }
      return downstreamAuthUsernameBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.redis_proxy.v3.RedisProxy)
  private static final io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy();
  }

  public static io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RedisProxy>
      PARSER = new com.google.protobuf.AbstractParser<RedisProxy>() {
    @java.lang.Override
    public RedisProxy parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RedisProxy(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RedisProxy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RedisProxy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.redis_proxy.v3.RedisProxy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

