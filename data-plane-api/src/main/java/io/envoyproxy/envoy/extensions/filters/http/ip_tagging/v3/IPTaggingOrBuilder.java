// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto

package io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3;

public interface IPTaggingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.ip_tagging.v3.IPTagging)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The type of request the filter should apply to.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for requestType.
   */
  int getRequestTypeValue();
  /**
   * <pre>
   * The type of request the filter should apply to.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
   * @return The requestType.
   */
  io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType getRequestType();

  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag> 
      getIpTagsList();
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag getIpTags(int index);
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  int getIpTagsCount();
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder> 
      getIpTagsOrBuilderList();
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder getIpTagsOrBuilder(
      int index);
}
