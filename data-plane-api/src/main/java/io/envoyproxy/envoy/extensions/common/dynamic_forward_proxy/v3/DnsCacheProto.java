// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto

package io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3;

public final class DnsCacheProto {
  private DnsCacheProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheCircuitBreakers_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheCircuitBreakers_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n@envoy/extensions/common/dynamic_forwar" +
      "d_proxy/v3/dns_cache.proto\0220envoy.extens" +
      "ions.common.dynamic_forward_proxy.v3\032%en" +
      "voy/config/cluster/v3/cluster.proto\032\036goo" +
      "gle/protobuf/duration.proto\032\036google/prot" +
      "obuf/wrappers.proto\032\035udpa/annotations/st" +
      "atus.proto\032!udpa/annotations/versioning." +
      "proto\032\027validate/validate.proto\"U\n\027DnsCac" +
      "heCircuitBreakers\022:\n\024max_pending_request" +
      "s\030\001 \001(\0132\034.google.protobuf.UInt32Value\"\332\004" +
      "\n\016DnsCacheConfig\022\025\n\004name\030\001 \001(\tB\007\372B\004r\002\020\001\022" +
      "U\n\021dns_lookup_family\030\002 \001(\01620.envoy.confi" +
      "g.cluster.v3.Cluster.DnsLookupFamilyB\010\372B" +
      "\005\202\001\002\020\001\022A\n\020dns_refresh_rate\030\003 \001(\0132\031.googl" +
      "e.protobuf.DurationB\014\372B\t\252\001\0062\004\020\300\204=\0225\n\010hos" +
      "t_ttl\030\004 \001(\0132\031.google.protobuf.DurationB\010" +
      "\372B\005\252\001\002*\000\0228\n\tmax_hosts\030\005 \001(\0132\034.google.pro" +
      "tobuf.UInt32ValueB\007\372B\004*\002 \000\022N\n\030dns_failur" +
      "e_refresh_rate\030\006 \001(\0132,.envoy.config.clus" +
      "ter.v3.Cluster.RefreshRate\022l\n\031dns_cache_" +
      "circuit_breaker\030\007 \001(\0132I.envoy.extensions" +
      ".common.dynamic_forward_proxy.v3.DnsCach" +
      "eCircuitBreakers\022\037\n\027use_tcp_for_dns_look" +
      "ups\030\010 \001(\010:G\232\305\210\036B\n@envoy.config.common.dy" +
      "namic_forward_proxy.v2alpha.DnsCacheConf" +
      "igBY\n>io.envoyproxy.envoy.extensions.com" +
      "mon.dynamic_forward_proxy.v3B\rDnsCachePr" +
      "otoP\001\272\200\310\321\006\002\020\002b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.envoyproxy.envoy.config.cluster.v3.ClusterProto.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
          com.google.protobuf.WrappersProto.getDescriptor(),
          udpa.annotations.Status.getDescriptor(),
          udpa.annotations.Versioning.getDescriptor(),
          io.envoyproxy.pgv.validate.Validate.getDescriptor(),
        });
    internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheCircuitBreakers_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheCircuitBreakers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheCircuitBreakers_descriptor,
        new java.lang.String[] { "MaxPendingRequests", });
    internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor,
        new java.lang.String[] { "Name", "DnsLookupFamily", "DnsRefreshRate", "HostTtl", "MaxHosts", "DnsFailureRefreshRate", "DnsCacheCircuitBreaker", "UseTcpForDnsLookups", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(udpa.annotations.Status.fileStatus);
    registry.add(udpa.annotations.Versioning.versioning);
    registry.add(io.envoyproxy.pgv.validate.Validate.rules);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    io.envoyproxy.envoy.config.cluster.v3.ClusterProto.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
    com.google.protobuf.WrappersProto.getDescriptor();
    udpa.annotations.Status.getDescriptor();
    udpa.annotations.Versioning.getDescriptor();
    io.envoyproxy.pgv.validate.Validate.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
