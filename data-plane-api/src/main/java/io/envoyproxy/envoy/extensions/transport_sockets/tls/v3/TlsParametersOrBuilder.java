// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/tls/v3/common.proto

package io.envoyproxy.envoy.extensions.transport_sockets.tls.v3;

public interface TlsParametersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.tls.v3.TlsParameters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for tlsMinimumProtocolVersion.
   */
  int getTlsMinimumProtocolVersionValue();
  /**
   * <pre>
   * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
   * @return The tlsMinimumProtocolVersion.
   */
  io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol getTlsMinimumProtocolVersion();

  /**
   * <pre>
   * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for tlsMaximumProtocolVersion.
   */
  int getTlsMaximumProtocolVersionValue();
  /**
   * <pre>
   * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
   * @return The tlsMaximumProtocolVersion.
   */
  io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol getTlsMaximumProtocolVersion();

  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @return A list containing the cipherSuites.
   */
  java.util.List<java.lang.String>
      getCipherSuitesList();
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @return The count of cipherSuites.
   */
  int getCipherSuitesCount();
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @param index The index of the element to return.
   * @return The cipherSuites at the given index.
   */
  java.lang.String getCipherSuites(int index);
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cipherSuites at the given index.
   */
  com.google.protobuf.ByteString
      getCipherSuitesBytes(int index);

  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @return A list containing the ecdhCurves.
   */
  java.util.List<java.lang.String>
      getEcdhCurvesList();
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @return The count of ecdhCurves.
   */
  int getEcdhCurvesCount();
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @param index The index of the element to return.
   * @return The ecdhCurves at the given index.
   */
  java.lang.String getEcdhCurves(int index);
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the ecdhCurves at the given index.
   */
  com.google.protobuf.ByteString
      getEcdhCurvesBytes(int index);
}
