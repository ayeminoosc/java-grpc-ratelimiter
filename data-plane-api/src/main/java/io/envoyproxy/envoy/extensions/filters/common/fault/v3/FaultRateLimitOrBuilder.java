// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/common/fault/v3/fault.proto

package io.envoyproxy.envoy.extensions.filters.common.fault.v3;

public interface FaultRateLimitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.common.fault.v3.FaultRateLimit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A fixed rate limit.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimit fixed_limit = 1;</code>
   * @return Whether the fixedLimit field is set.
   */
  boolean hasFixedLimit();
  /**
   * <pre>
   * A fixed rate limit.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimit fixed_limit = 1;</code>
   * @return The fixedLimit.
   */
  io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimit getFixedLimit();
  /**
   * <pre>
   * A fixed rate limit.
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimit fixed_limit = 1;</code>
   */
  io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimitOrBuilder getFixedLimitOrBuilder();

  /**
   * <pre>
   * Rate limits are controlled via an HTTP header (if applicable).
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimit header_limit = 3;</code>
   * @return Whether the headerLimit field is set.
   */
  boolean hasHeaderLimit();
  /**
   * <pre>
   * Rate limits are controlled via an HTTP header (if applicable).
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimit header_limit = 3;</code>
   * @return The headerLimit.
   */
  io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimit getHeaderLimit();
  /**
   * <pre>
   * Rate limits are controlled via an HTTP header (if applicable).
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimit header_limit = 3;</code>
   */
  io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimitOrBuilder getHeaderLimitOrBuilder();

  /**
   * <pre>
   * The percentage of operations/connections/requests on which the rate limit will be injected.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percentage = 2;</code>
   * @return Whether the percentage field is set.
   */
  boolean hasPercentage();
  /**
   * <pre>
   * The percentage of operations/connections/requests on which the rate limit will be injected.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percentage = 2;</code>
   * @return The percentage.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getPercentage();
  /**
   * <pre>
   * The percentage of operations/connections/requests on which the rate limit will be injected.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percentage = 2;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getPercentageOrBuilder();

  public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultRateLimit.LimitTypeCase getLimitTypeCase();
}
