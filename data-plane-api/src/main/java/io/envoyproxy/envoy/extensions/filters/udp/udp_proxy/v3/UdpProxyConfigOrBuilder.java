// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto

package io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3;

public interface UdpProxyConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The stat prefix used when emitting UDP proxy filter stats.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * The stat prefix used when emitting UDP proxy filter stats.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();

  /**
   * <pre>
   * The upstream cluster to connect to.
   * </pre>
   *
   * <code>string cluster = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the cluster field is set.
   */
  boolean hasCluster();
  /**
   * <pre>
   * The upstream cluster to connect to.
   * </pre>
   *
   * <code>string cluster = 2 [(.validate.rules) = { ... }</code>
   * @return The cluster.
   */
  java.lang.String getCluster();
  /**
   * <pre>
   * The upstream cluster to connect to.
   * </pre>
   *
   * <code>string cluster = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for cluster.
   */
  com.google.protobuf.ByteString
      getClusterBytes();

  /**
   * <pre>
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 3;</code>
   * @return Whether the idleTimeout field is set.
   */
  boolean hasIdleTimeout();
  /**
   * <pre>
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 3;</code>
   * @return The idleTimeout.
   */
  com.google.protobuf.Duration getIdleTimeout();
  /**
   * <pre>
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder();

  /**
   * <pre>
   * Use the remote downstream IP address as the sender IP address when sending packets to upstream hosts.
   * This option requires Envoy to be run with the *CAP_NET_ADMIN* capability on Linux.
   * And the IPv6 stack must be enabled on Linux kernel.
   * This option does not preserve the remote downstream port.
   * If this option is enabled, the IP address of sent datagrams will be changed to the remote downstream IP address.
   * This means that Envoy will not receive packets that are sent by upstream hosts because the upstream hosts
   * will send the packets with the remote downstream IP address as the destination. All packets will be routed
   * to the remote downstream directly if there are route rules on the upstream host side.
   * There are two options to return the packets back to the remote downstream.
   * The first one is to use DSR (Direct Server Return).
   * The other one is to configure routing rules on the upstream hosts to forward
   * all packets back to Envoy and configure iptables rules on the host running Envoy to
   * forward all packets from upstream hosts to the Envoy process so that Envoy can forward the packets to the downstream.
   * If the platform does not support this option, Envoy will raise a configuration error.
   * </pre>
   *
   * <code>bool use_original_src_ip = 4;</code>
   * @return The useOriginalSrcIp.
   */
  boolean getUseOriginalSrcIp();

  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy> 
      getHashPoliciesList();
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy getHashPolicies(int index);
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  int getHashPoliciesCount();
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder> 
      getHashPoliciesOrBuilderList();
  /**
   * <pre>
   * Optional configuration for UDP proxy hash policies. If hash_policies is not set, the hash-based
   * load balancing algorithms will select a host randomly. Currently the number of hash policies is
   * limited to 1.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicyOrBuilder getHashPoliciesOrBuilder(
      int index);

  public io.envoyproxy.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.RouteSpecifierCase getRouteSpecifierCase();
}
