// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto

package io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3;

public interface ResponseMapperOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Filter to determine if this mapper should apply.
   * </pre>
   *
   * <code>.envoy.config.accesslog.v3.AccessLogFilter filter = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <pre>
   * Filter to determine if this mapper should apply.
   * </pre>
   *
   * <code>.envoy.config.accesslog.v3.AccessLogFilter filter = 1 [(.validate.rules) = { ... }</code>
   * @return The filter.
   */
  io.envoyproxy.envoy.config.accesslog.v3.AccessLogFilter getFilter();
  /**
   * <pre>
   * Filter to determine if this mapper should apply.
   * </pre>
   *
   * <code>.envoy.config.accesslog.v3.AccessLogFilter filter = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.accesslog.v3.AccessLogFilterOrBuilder getFilterOrBuilder();

  /**
   * <pre>
   * The new response status code if specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value status_code = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the statusCode field is set.
   */
  boolean hasStatusCode();
  /**
   * <pre>
   * The new response status code if specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value status_code = 2 [(.validate.rules) = { ... }</code>
   * @return The statusCode.
   */
  com.google.protobuf.UInt32Value getStatusCode();
  /**
   * <pre>
   * The new response status code if specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value status_code = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getStatusCodeOrBuilder();

  /**
   * <pre>
   * The new local reply body text if specified. It will be used in the `%LOCAL_REPLY_BODY%`
   * command operator in the `body_format`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource body = 3;</code>
   * @return Whether the body field is set.
   */
  boolean hasBody();
  /**
   * <pre>
   * The new local reply body text if specified. It will be used in the `%LOCAL_REPLY_BODY%`
   * command operator in the `body_format`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource body = 3;</code>
   * @return The body.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getBody();
  /**
   * <pre>
   * The new local reply body text if specified. It will be used in the `%LOCAL_REPLY_BODY%`
   * command operator in the `body_format`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource body = 3;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getBodyOrBuilder();

  /**
   * <pre>
   * A per mapper `body_format` to override the :ref:`body_format &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.body_format&gt;`.
   * It will be used when this mapper is matched.
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format_override = 4;</code>
   * @return Whether the bodyFormatOverride field is set.
   */
  boolean hasBodyFormatOverride();
  /**
   * <pre>
   * A per mapper `body_format` to override the :ref:`body_format &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.body_format&gt;`.
   * It will be used when this mapper is matched.
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format_override = 4;</code>
   * @return The bodyFormatOverride.
   */
  io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getBodyFormatOverride();
  /**
   * <pre>
   * A per mapper `body_format` to override the :ref:`body_format &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.body_format&gt;`.
   * It will be used when this mapper is matched.
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format_override = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder getBodyFormatOverrideOrBuilder();

  /**
   * <pre>
   * HTTP headers to add to a local reply. This allows the response mapper to append, to add
   * or to override headers of any local reply before it is sent to a downstream client.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption headers_to_add = 5 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.HeaderValueOption> 
      getHeadersToAddList();
  /**
   * <pre>
   * HTTP headers to add to a local reply. This allows the response mapper to append, to add
   * or to override headers of any local reply before it is sent to a downstream client.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption headers_to_add = 5 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderValueOption getHeadersToAdd(int index);
  /**
   * <pre>
   * HTTP headers to add to a local reply. This allows the response mapper to append, to add
   * or to override headers of any local reply before it is sent to a downstream client.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption headers_to_add = 5 [(.validate.rules) = { ... }</code>
   */
  int getHeadersToAddCount();
  /**
   * <pre>
   * HTTP headers to add to a local reply. This allows the response mapper to append, to add
   * or to override headers of any local reply before it is sent to a downstream client.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption headers_to_add = 5 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder> 
      getHeadersToAddOrBuilderList();
  /**
   * <pre>
   * HTTP headers to add to a local reply. This allows the response mapper to append, to add
   * or to override headers of any local reply before it is sent to a downstream client.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.HeaderValueOption headers_to_add = 5 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.HeaderValueOptionOrBuilder getHeadersToAddOrBuilder(
      int index);
}
