// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto

package io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3;

public interface ScopedRoutesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name assigned to the scoped routing configuration.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name assigned to the scoped routing configuration.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * The algorithm to use for constructing a scope key for each request.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder scope_key_builder = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the scopeKeyBuilder field is set.
   */
  boolean hasScopeKeyBuilder();
  /**
   * <pre>
   * The algorithm to use for constructing a scope key for each request.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder scope_key_builder = 2 [(.validate.rules) = { ... }</code>
   * @return The scopeKeyBuilder.
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder getScopeKeyBuilder();
  /**
   * <pre>
   * The algorithm to use for constructing a scope key for each request.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder scope_key_builder = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilderOrBuilder getScopeKeyBuilderOrBuilder();

  /**
   * <pre>
   * Configuration source specifier for RDS.
   * This config source is used to subscribe to RouteConfiguration resources specified in
   * ScopedRouteConfiguration messages.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource rds_config_source = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the rdsConfigSource field is set.
   */
  boolean hasRdsConfigSource();
  /**
   * <pre>
   * Configuration source specifier for RDS.
   * This config source is used to subscribe to RouteConfiguration resources specified in
   * ScopedRouteConfiguration messages.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource rds_config_source = 3 [(.validate.rules) = { ... }</code>
   * @return The rdsConfigSource.
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSource getRdsConfigSource();
  /**
   * <pre>
   * Configuration source specifier for RDS.
   * This config source is used to subscribe to RouteConfiguration resources specified in
   * ScopedRouteConfiguration messages.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource rds_config_source = 3 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSourceOrBuilder getRdsConfigSourceOrBuilder();

  /**
   * <pre>
   * The set of routing scopes corresponding to the HCM. A scope is assigned to a request by
   * matching a key constructed from the request's attributes according to the algorithm specified
   * by the
   * :ref:`ScopeKeyBuilder&lt;envoy_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder&gt;`
   * in this message.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList scoped_route_configurations_list = 4;</code>
   * @return Whether the scopedRouteConfigurationsList field is set.
   */
  boolean hasScopedRouteConfigurationsList();
  /**
   * <pre>
   * The set of routing scopes corresponding to the HCM. A scope is assigned to a request by
   * matching a key constructed from the request's attributes according to the algorithm specified
   * by the
   * :ref:`ScopeKeyBuilder&lt;envoy_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder&gt;`
   * in this message.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList scoped_route_configurations_list = 4;</code>
   * @return The scopedRouteConfigurationsList.
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList getScopedRouteConfigurationsList();
  /**
   * <pre>
   * The set of routing scopes corresponding to the HCM. A scope is assigned to a request by
   * matching a key constructed from the request's attributes according to the algorithm specified
   * by the
   * :ref:`ScopeKeyBuilder&lt;envoy_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder&gt;`
   * in this message.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList scoped_route_configurations_list = 4;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsListOrBuilder getScopedRouteConfigurationsListOrBuilder();

  /**
   * <pre>
   * The set of routing scopes associated with the HCM will be dynamically loaded via the SRDS
   * API. A scope is assigned to a request by matching a key constructed from the request's
   * attributes according to the algorithm specified by the
   * :ref:`ScopeKeyBuilder&lt;envoy_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder&gt;`
   * in this message.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds scoped_rds = 5;</code>
   * @return Whether the scopedRds field is set.
   */
  boolean hasScopedRds();
  /**
   * <pre>
   * The set of routing scopes associated with the HCM will be dynamically loaded via the SRDS
   * API. A scope is assigned to a request by matching a key constructed from the request's
   * attributes according to the algorithm specified by the
   * :ref:`ScopeKeyBuilder&lt;envoy_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder&gt;`
   * in this message.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds scoped_rds = 5;</code>
   * @return The scopedRds.
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds getScopedRds();
  /**
   * <pre>
   * The set of routing scopes associated with the HCM will be dynamically loaded via the SRDS
   * API. A scope is assigned to a request by matching a key constructed from the request's
   * attributes according to the algorithm specified by the
   * :ref:`ScopeKeyBuilder&lt;envoy_api_msg_extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder&gt;`
   * in this message.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds scoped_rds = 5;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRdsOrBuilder getScopedRdsOrBuilder();

  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ConfigSpecifierCase getConfigSpecifierCase();
}
