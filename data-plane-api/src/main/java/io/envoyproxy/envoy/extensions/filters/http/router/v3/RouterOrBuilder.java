// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/router/v3/router.proto

package io.envoyproxy.envoy.extensions.filters.http.router.v3;

public interface RouterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.router.v3.Router)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
   * @return Whether the dynamicStats field is set.
   */
  boolean hasDynamicStats();
  /**
   * <pre>
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
   * @return The dynamicStats.
   */
  com.google.protobuf.BoolValue getDynamicStats();
  /**
   * <pre>
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue dynamic_stats = 1;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getDynamicStatsOrBuilder();

  /**
   * <pre>
   * Whether to start a child span for egress routed calls. This can be
   * useful in scenarios where other filters (auth, ratelimit, etc.) make
   * outbound calls and have child spans rooted at the same ingress
   * parent. Defaults to false.
   * </pre>
   *
   * <code>bool start_child_span = 2;</code>
   * @return The startChildSpan.
   */
  boolean getStartChildSpan();

  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.accesslog.v3.AccessLog> 
      getUpstreamLogList();
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  io.envoyproxy.envoy.config.accesslog.v3.AccessLog getUpstreamLog(int index);
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  int getUpstreamLogCount();
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder> 
      getUpstreamLogOrBuilderList();
  /**
   * <pre>
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   * </pre>
   *
   * <code>repeated .envoy.config.accesslog.v3.AccessLog upstream_log = 3;</code>
   */
  io.envoyproxy.envoy.config.accesslog.v3.AccessLogOrBuilder getUpstreamLogOrBuilder(
      int index);

  /**
   * <pre>
   * Do not add any additional *x-envoy-* headers to requests or responses. This
   * only affects the :ref:`router filter generated *x-envoy-* headers
   * &lt;config_http_filters_router_headers_set&gt;`, other Envoy filters and the HTTP
   * connection manager may continue to set *x-envoy-* headers.
   * </pre>
   *
   * <code>bool suppress_envoy_headers = 4;</code>
   * @return The suppressEnvoyHeaders.
   */
  boolean getSuppressEnvoyHeaders();

  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @return A list containing the strictCheckHeaders.
   */
  java.util.List<java.lang.String>
      getStrictCheckHeadersList();
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @return The count of strictCheckHeaders.
   */
  int getStrictCheckHeadersCount();
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @param index The index of the element to return.
   * @return The strictCheckHeaders at the given index.
   */
  java.lang.String getStrictCheckHeaders(int index);
  /**
   * <pre>
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   * Value must be an integer:
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   * </pre>
   *
   * <code>repeated string strict_check_headers = 5 [(.validate.rules) = { ... }</code>
   * @param index The index of the value to return.
   * @return The bytes of the strictCheckHeaders at the given index.
   */
  com.google.protobuf.ByteString
      getStrictCheckHeadersBytes(int index);

  /**
   * <pre>
   * If not set, ingress Envoy will ignore
   * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
   * Envoy, when deriving timeout for upstream cluster.
   * </pre>
   *
   * <code>bool respect_expected_rq_timeout = 6;</code>
   * @return The respectExpectedRqTimeout.
   */
  boolean getRespectExpectedRqTimeout();
}
