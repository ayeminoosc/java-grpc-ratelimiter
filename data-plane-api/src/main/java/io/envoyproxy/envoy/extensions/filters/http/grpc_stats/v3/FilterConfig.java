// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/grpc_stats/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3;

/**
 * <pre>
 * gRPC statistics filter configuration
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.grpc_stats.v3.FilterConfig}
 */
public final class FilterConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.grpc_stats.v3.FilterConfig)
    FilterConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FilterConfig.newBuilder() to construct.
  private FilterConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FilterConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FilterConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FilterConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            emitFilterState_ = input.readBool();
            break;
          }
          case 18: {
            io.envoyproxy.envoy.config.core.v3.GrpcMethodList.Builder subBuilder = null;
            if (perMethodStatSpecifierCase_ == 2) {
              subBuilder = ((io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_).toBuilder();
            }
            perMethodStatSpecifier_ =
                input.readMessage(io.envoyproxy.envoy.config.core.v3.GrpcMethodList.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_);
              perMethodStatSpecifier_ = subBuilder.buildPartial();
            }
            perMethodStatSpecifierCase_ = 2;
            break;
          }
          case 26: {
            com.google.protobuf.BoolValue.Builder subBuilder = null;
            if (perMethodStatSpecifierCase_ == 3) {
              subBuilder = ((com.google.protobuf.BoolValue) perMethodStatSpecifier_).toBuilder();
            }
            perMethodStatSpecifier_ =
                input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.protobuf.BoolValue) perMethodStatSpecifier_);
              perMethodStatSpecifier_ = subBuilder.buildPartial();
            }
            perMethodStatSpecifierCase_ = 3;
            break;
          }
          case 32: {

            enableUpstreamStats_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.ConfigProto.internal_static_envoy_extensions_filters_http_grpc_stats_v3_FilterConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.ConfigProto.internal_static_envoy_extensions_filters_http_grpc_stats_v3_FilterConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.class, io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.Builder.class);
  }

  private int perMethodStatSpecifierCase_ = 0;
  private java.lang.Object perMethodStatSpecifier_;
  public enum PerMethodStatSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    INDIVIDUAL_METHOD_STATS_ALLOWLIST(2),
    STATS_FOR_ALL_METHODS(3),
    PERMETHODSTATSPECIFIER_NOT_SET(0);
    private final int value;
    private PerMethodStatSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PerMethodStatSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static PerMethodStatSpecifierCase forNumber(int value) {
      switch (value) {
        case 2: return INDIVIDUAL_METHOD_STATS_ALLOWLIST;
        case 3: return STATS_FOR_ALL_METHODS;
        case 0: return PERMETHODSTATSPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PerMethodStatSpecifierCase
  getPerMethodStatSpecifierCase() {
    return PerMethodStatSpecifierCase.forNumber(
        perMethodStatSpecifierCase_);
  }

  public static final int EMIT_FILTER_STATE_FIELD_NUMBER = 1;
  private boolean emitFilterState_;
  /**
   * <pre>
   * If true, the filter maintains a filter state object with the request and response message
   * counts.
   * </pre>
   *
   * <code>bool emit_filter_state = 1;</code>
   * @return The emitFilterState.
   */
  @java.lang.Override
  public boolean getEmitFilterState() {
    return emitFilterState_;
  }

  public static final int INDIVIDUAL_METHOD_STATS_ALLOWLIST_FIELD_NUMBER = 2;
  /**
   * <pre>
   * If set, specifies an allowlist of service/methods that will have individual stats
   * emitted for them. Any call that does not match the allowlist will be counted
   * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
   * @return Whether the individualMethodStatsAllowlist field is set.
   */
  @java.lang.Override
  public boolean hasIndividualMethodStatsAllowlist() {
    return perMethodStatSpecifierCase_ == 2;
  }
  /**
   * <pre>
   * If set, specifies an allowlist of service/methods that will have individual stats
   * emitted for them. Any call that does not match the allowlist will be counted
   * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
   * @return The individualMethodStatsAllowlist.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.GrpcMethodList getIndividualMethodStatsAllowlist() {
    if (perMethodStatSpecifierCase_ == 2) {
       return (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance();
  }
  /**
   * <pre>
   * If set, specifies an allowlist of service/methods that will have individual stats
   * emitted for them. Any call that does not match the allowlist will be counted
   * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.GrpcMethodListOrBuilder getIndividualMethodStatsAllowlistOrBuilder() {
    if (perMethodStatSpecifierCase_ == 2) {
       return (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_;
    }
    return io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance();
  }

  public static final int STATS_FOR_ALL_METHODS_FIELD_NUMBER = 3;
  /**
   * <pre>
   * If set to true, emit stats for all service/method names.
   * If set to false, emit stats for all service/message types to the same stats without including
   * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
   * service/method granularity is not needed, or if each cluster only receives a single method.
   * .. attention::
   *   This option is only safe if all clients are trusted. If this option is enabled
   *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
   *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
   * .. attention::
   *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
   *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
   *   and in a future release, if neither field is set, it will default to
   *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
   *   controlled with runtime override
   *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
   * @return Whether the statsForAllMethods field is set.
   */
  @java.lang.Override
  public boolean hasStatsForAllMethods() {
    return perMethodStatSpecifierCase_ == 3;
  }
  /**
   * <pre>
   * If set to true, emit stats for all service/method names.
   * If set to false, emit stats for all service/message types to the same stats without including
   * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
   * service/method granularity is not needed, or if each cluster only receives a single method.
   * .. attention::
   *   This option is only safe if all clients are trusted. If this option is enabled
   *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
   *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
   * .. attention::
   *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
   *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
   *   and in a future release, if neither field is set, it will default to
   *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
   *   controlled with runtime override
   *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
   * @return The statsForAllMethods.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getStatsForAllMethods() {
    if (perMethodStatSpecifierCase_ == 3) {
       return (com.google.protobuf.BoolValue) perMethodStatSpecifier_;
    }
    return com.google.protobuf.BoolValue.getDefaultInstance();
  }
  /**
   * <pre>
   * If set to true, emit stats for all service/method names.
   * If set to false, emit stats for all service/message types to the same stats without including
   * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
   * service/method granularity is not needed, or if each cluster only receives a single method.
   * .. attention::
   *   This option is only safe if all clients are trusted. If this option is enabled
   *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
   *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
   * .. attention::
   *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
   *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
   *   and in a future release, if neither field is set, it will default to
   *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
   *   controlled with runtime override
   *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getStatsForAllMethodsOrBuilder() {
    if (perMethodStatSpecifierCase_ == 3) {
       return (com.google.protobuf.BoolValue) perMethodStatSpecifier_;
    }
    return com.google.protobuf.BoolValue.getDefaultInstance();
  }

  public static final int ENABLE_UPSTREAM_STATS_FIELD_NUMBER = 4;
  private boolean enableUpstreamStats_;
  /**
   * <pre>
   * If true, the filter will gather a histogram for the request time of the upstream.
   * It works with :ref:`stats_for_all_methods
   * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods&gt;`
   * and :ref:`individual_method_stats_allowlist
   * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist&gt;` the same way
   * request_message_count and response_message_count works.
   * </pre>
   *
   * <code>bool enable_upstream_stats = 4;</code>
   * @return The enableUpstreamStats.
   */
  @java.lang.Override
  public boolean getEnableUpstreamStats() {
    return enableUpstreamStats_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (emitFilterState_ != false) {
      output.writeBool(1, emitFilterState_);
    }
    if (perMethodStatSpecifierCase_ == 2) {
      output.writeMessage(2, (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_);
    }
    if (perMethodStatSpecifierCase_ == 3) {
      output.writeMessage(3, (com.google.protobuf.BoolValue) perMethodStatSpecifier_);
    }
    if (enableUpstreamStats_ != false) {
      output.writeBool(4, enableUpstreamStats_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (emitFilterState_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, emitFilterState_);
    }
    if (perMethodStatSpecifierCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_);
    }
    if (perMethodStatSpecifierCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.google.protobuf.BoolValue) perMethodStatSpecifier_);
    }
    if (enableUpstreamStats_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, enableUpstreamStats_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig other = (io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig) obj;

    if (getEmitFilterState()
        != other.getEmitFilterState()) return false;
    if (getEnableUpstreamStats()
        != other.getEnableUpstreamStats()) return false;
    if (!getPerMethodStatSpecifierCase().equals(other.getPerMethodStatSpecifierCase())) return false;
    switch (perMethodStatSpecifierCase_) {
      case 2:
        if (!getIndividualMethodStatsAllowlist()
            .equals(other.getIndividualMethodStatsAllowlist())) return false;
        break;
      case 3:
        if (!getStatsForAllMethods()
            .equals(other.getStatsForAllMethods())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + EMIT_FILTER_STATE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEmitFilterState());
    hash = (37 * hash) + ENABLE_UPSTREAM_STATS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getEnableUpstreamStats());
    switch (perMethodStatSpecifierCase_) {
      case 2:
        hash = (37 * hash) + INDIVIDUAL_METHOD_STATS_ALLOWLIST_FIELD_NUMBER;
        hash = (53 * hash) + getIndividualMethodStatsAllowlist().hashCode();
        break;
      case 3:
        hash = (37 * hash) + STATS_FOR_ALL_METHODS_FIELD_NUMBER;
        hash = (53 * hash) + getStatsForAllMethods().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * gRPC statistics filter configuration
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.grpc_stats.v3.FilterConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.grpc_stats.v3.FilterConfig)
      io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.ConfigProto.internal_static_envoy_extensions_filters_http_grpc_stats_v3_FilterConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.ConfigProto.internal_static_envoy_extensions_filters_http_grpc_stats_v3_FilterConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.class, io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      emitFilterState_ = false;

      enableUpstreamStats_ = false;

      perMethodStatSpecifierCase_ = 0;
      perMethodStatSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.ConfigProto.internal_static_envoy_extensions_filters_http_grpc_stats_v3_FilterConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig build() {
      io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig result = new io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig(this);
      result.emitFilterState_ = emitFilterState_;
      if (perMethodStatSpecifierCase_ == 2) {
        if (individualMethodStatsAllowlistBuilder_ == null) {
          result.perMethodStatSpecifier_ = perMethodStatSpecifier_;
        } else {
          result.perMethodStatSpecifier_ = individualMethodStatsAllowlistBuilder_.build();
        }
      }
      if (perMethodStatSpecifierCase_ == 3) {
        if (statsForAllMethodsBuilder_ == null) {
          result.perMethodStatSpecifier_ = perMethodStatSpecifier_;
        } else {
          result.perMethodStatSpecifier_ = statsForAllMethodsBuilder_.build();
        }
      }
      result.enableUpstreamStats_ = enableUpstreamStats_;
      result.perMethodStatSpecifierCase_ = perMethodStatSpecifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig.getDefaultInstance()) return this;
      if (other.getEmitFilterState() != false) {
        setEmitFilterState(other.getEmitFilterState());
      }
      if (other.getEnableUpstreamStats() != false) {
        setEnableUpstreamStats(other.getEnableUpstreamStats());
      }
      switch (other.getPerMethodStatSpecifierCase()) {
        case INDIVIDUAL_METHOD_STATS_ALLOWLIST: {
          mergeIndividualMethodStatsAllowlist(other.getIndividualMethodStatsAllowlist());
          break;
        }
        case STATS_FOR_ALL_METHODS: {
          mergeStatsForAllMethods(other.getStatsForAllMethods());
          break;
        }
        case PERMETHODSTATSPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int perMethodStatSpecifierCase_ = 0;
    private java.lang.Object perMethodStatSpecifier_;
    public PerMethodStatSpecifierCase
        getPerMethodStatSpecifierCase() {
      return PerMethodStatSpecifierCase.forNumber(
          perMethodStatSpecifierCase_);
    }

    public Builder clearPerMethodStatSpecifier() {
      perMethodStatSpecifierCase_ = 0;
      perMethodStatSpecifier_ = null;
      onChanged();
      return this;
    }


    private boolean emitFilterState_ ;
    /**
     * <pre>
     * If true, the filter maintains a filter state object with the request and response message
     * counts.
     * </pre>
     *
     * <code>bool emit_filter_state = 1;</code>
     * @return The emitFilterState.
     */
    @java.lang.Override
    public boolean getEmitFilterState() {
      return emitFilterState_;
    }
    /**
     * <pre>
     * If true, the filter maintains a filter state object with the request and response message
     * counts.
     * </pre>
     *
     * <code>bool emit_filter_state = 1;</code>
     * @param value The emitFilterState to set.
     * @return This builder for chaining.
     */
    public Builder setEmitFilterState(boolean value) {
      
      emitFilterState_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, the filter maintains a filter state object with the request and response message
     * counts.
     * </pre>
     *
     * <code>bool emit_filter_state = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearEmitFilterState() {
      
      emitFilterState_ = false;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.GrpcMethodList, io.envoyproxy.envoy.config.core.v3.GrpcMethodList.Builder, io.envoyproxy.envoy.config.core.v3.GrpcMethodListOrBuilder> individualMethodStatsAllowlistBuilder_;
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     * @return Whether the individualMethodStatsAllowlist field is set.
     */
    @java.lang.Override
    public boolean hasIndividualMethodStatsAllowlist() {
      return perMethodStatSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     * @return The individualMethodStatsAllowlist.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.GrpcMethodList getIndividualMethodStatsAllowlist() {
      if (individualMethodStatsAllowlistBuilder_ == null) {
        if (perMethodStatSpecifierCase_ == 2) {
          return (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance();
      } else {
        if (perMethodStatSpecifierCase_ == 2) {
          return individualMethodStatsAllowlistBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    public Builder setIndividualMethodStatsAllowlist(io.envoyproxy.envoy.config.core.v3.GrpcMethodList value) {
      if (individualMethodStatsAllowlistBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        perMethodStatSpecifier_ = value;
        onChanged();
      } else {
        individualMethodStatsAllowlistBuilder_.setMessage(value);
      }
      perMethodStatSpecifierCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    public Builder setIndividualMethodStatsAllowlist(
        io.envoyproxy.envoy.config.core.v3.GrpcMethodList.Builder builderForValue) {
      if (individualMethodStatsAllowlistBuilder_ == null) {
        perMethodStatSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        individualMethodStatsAllowlistBuilder_.setMessage(builderForValue.build());
      }
      perMethodStatSpecifierCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    public Builder mergeIndividualMethodStatsAllowlist(io.envoyproxy.envoy.config.core.v3.GrpcMethodList value) {
      if (individualMethodStatsAllowlistBuilder_ == null) {
        if (perMethodStatSpecifierCase_ == 2 &&
            perMethodStatSpecifier_ != io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance()) {
          perMethodStatSpecifier_ = io.envoyproxy.envoy.config.core.v3.GrpcMethodList.newBuilder((io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          perMethodStatSpecifier_ = value;
        }
        onChanged();
      } else {
        if (perMethodStatSpecifierCase_ == 2) {
          individualMethodStatsAllowlistBuilder_.mergeFrom(value);
        }
        individualMethodStatsAllowlistBuilder_.setMessage(value);
      }
      perMethodStatSpecifierCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    public Builder clearIndividualMethodStatsAllowlist() {
      if (individualMethodStatsAllowlistBuilder_ == null) {
        if (perMethodStatSpecifierCase_ == 2) {
          perMethodStatSpecifierCase_ = 0;
          perMethodStatSpecifier_ = null;
          onChanged();
        }
      } else {
        if (perMethodStatSpecifierCase_ == 2) {
          perMethodStatSpecifierCase_ = 0;
          perMethodStatSpecifier_ = null;
        }
        individualMethodStatsAllowlistBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.GrpcMethodList.Builder getIndividualMethodStatsAllowlistBuilder() {
      return getIndividualMethodStatsAllowlistFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.GrpcMethodListOrBuilder getIndividualMethodStatsAllowlistOrBuilder() {
      if ((perMethodStatSpecifierCase_ == 2) && (individualMethodStatsAllowlistBuilder_ != null)) {
        return individualMethodStatsAllowlistBuilder_.getMessageOrBuilder();
      } else {
        if (perMethodStatSpecifierCase_ == 2) {
          return (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_;
        }
        return io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: `cluster.&lt;name&gt;.grpc.*`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.GrpcMethodList individual_method_stats_allowlist = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.GrpcMethodList, io.envoyproxy.envoy.config.core.v3.GrpcMethodList.Builder, io.envoyproxy.envoy.config.core.v3.GrpcMethodListOrBuilder> 
        getIndividualMethodStatsAllowlistFieldBuilder() {
      if (individualMethodStatsAllowlistBuilder_ == null) {
        if (!(perMethodStatSpecifierCase_ == 2)) {
          perMethodStatSpecifier_ = io.envoyproxy.envoy.config.core.v3.GrpcMethodList.getDefaultInstance();
        }
        individualMethodStatsAllowlistBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.GrpcMethodList, io.envoyproxy.envoy.config.core.v3.GrpcMethodList.Builder, io.envoyproxy.envoy.config.core.v3.GrpcMethodListOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.GrpcMethodList) perMethodStatSpecifier_,
                getParentForChildren(),
                isClean());
        perMethodStatSpecifier_ = null;
      }
      perMethodStatSpecifierCase_ = 2;
      onChanged();;
      return individualMethodStatsAllowlistBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> statsForAllMethodsBuilder_;
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     * @return Whether the statsForAllMethods field is set.
     */
    @java.lang.Override
    public boolean hasStatsForAllMethods() {
      return perMethodStatSpecifierCase_ == 3;
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     * @return The statsForAllMethods.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getStatsForAllMethods() {
      if (statsForAllMethodsBuilder_ == null) {
        if (perMethodStatSpecifierCase_ == 3) {
          return (com.google.protobuf.BoolValue) perMethodStatSpecifier_;
        }
        return com.google.protobuf.BoolValue.getDefaultInstance();
      } else {
        if (perMethodStatSpecifierCase_ == 3) {
          return statsForAllMethodsBuilder_.getMessage();
        }
        return com.google.protobuf.BoolValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    public Builder setStatsForAllMethods(com.google.protobuf.BoolValue value) {
      if (statsForAllMethodsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        perMethodStatSpecifier_ = value;
        onChanged();
      } else {
        statsForAllMethodsBuilder_.setMessage(value);
      }
      perMethodStatSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    public Builder setStatsForAllMethods(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (statsForAllMethodsBuilder_ == null) {
        perMethodStatSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        statsForAllMethodsBuilder_.setMessage(builderForValue.build());
      }
      perMethodStatSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    public Builder mergeStatsForAllMethods(com.google.protobuf.BoolValue value) {
      if (statsForAllMethodsBuilder_ == null) {
        if (perMethodStatSpecifierCase_ == 3 &&
            perMethodStatSpecifier_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
          perMethodStatSpecifier_ = com.google.protobuf.BoolValue.newBuilder((com.google.protobuf.BoolValue) perMethodStatSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          perMethodStatSpecifier_ = value;
        }
        onChanged();
      } else {
        if (perMethodStatSpecifierCase_ == 3) {
          statsForAllMethodsBuilder_.mergeFrom(value);
        }
        statsForAllMethodsBuilder_.setMessage(value);
      }
      perMethodStatSpecifierCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    public Builder clearStatsForAllMethods() {
      if (statsForAllMethodsBuilder_ == null) {
        if (perMethodStatSpecifierCase_ == 3) {
          perMethodStatSpecifierCase_ = 0;
          perMethodStatSpecifier_ = null;
          onChanged();
        }
      } else {
        if (perMethodStatSpecifierCase_ == 3) {
          perMethodStatSpecifierCase_ = 0;
          perMethodStatSpecifier_ = null;
        }
        statsForAllMethodsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    public com.google.protobuf.BoolValue.Builder getStatsForAllMethodsBuilder() {
      return getStatsForAllMethodsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getStatsForAllMethodsOrBuilder() {
      if ((perMethodStatSpecifierCase_ == 3) && (statsForAllMethodsBuilder_ != null)) {
        return statsForAllMethodsBuilder_.getMessageOrBuilder();
      } else {
        if (perMethodStatSpecifierCase_ == 3) {
          return (com.google.protobuf.BoolValue) perMethodStatSpecifier_;
        }
        return com.google.protobuf.BoolValue.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If set to true, emit stats for all service/method names.
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix `cluster.&lt;name&gt;.grpc`. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     * .. attention::
     *   If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
     *   behavior will default to `stats_for_all_methods=true`. This default value is deprecated,
     *   and in a future release, if neither field is set, it will default to
     *   `stats_for_all_methods=false` in order to be safe by default. This behavior can be
     *   controlled with runtime override
     *   `envoy.deprecated_features.grpc_stats_filter_enable_stats_for_all_methods_by_default`.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue stats_for_all_methods = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getStatsForAllMethodsFieldBuilder() {
      if (statsForAllMethodsBuilder_ == null) {
        if (!(perMethodStatSpecifierCase_ == 3)) {
          perMethodStatSpecifier_ = com.google.protobuf.BoolValue.getDefaultInstance();
        }
        statsForAllMethodsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                (com.google.protobuf.BoolValue) perMethodStatSpecifier_,
                getParentForChildren(),
                isClean());
        perMethodStatSpecifier_ = null;
      }
      perMethodStatSpecifierCase_ = 3;
      onChanged();;
      return statsForAllMethodsBuilder_;
    }

    private boolean enableUpstreamStats_ ;
    /**
     * <pre>
     * If true, the filter will gather a histogram for the request time of the upstream.
     * It works with :ref:`stats_for_all_methods
     * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods&gt;`
     * and :ref:`individual_method_stats_allowlist
     * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist&gt;` the same way
     * request_message_count and response_message_count works.
     * </pre>
     *
     * <code>bool enable_upstream_stats = 4;</code>
     * @return The enableUpstreamStats.
     */
    @java.lang.Override
    public boolean getEnableUpstreamStats() {
      return enableUpstreamStats_;
    }
    /**
     * <pre>
     * If true, the filter will gather a histogram for the request time of the upstream.
     * It works with :ref:`stats_for_all_methods
     * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods&gt;`
     * and :ref:`individual_method_stats_allowlist
     * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist&gt;` the same way
     * request_message_count and response_message_count works.
     * </pre>
     *
     * <code>bool enable_upstream_stats = 4;</code>
     * @param value The enableUpstreamStats to set.
     * @return This builder for chaining.
     */
    public Builder setEnableUpstreamStats(boolean value) {
      
      enableUpstreamStats_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, the filter will gather a histogram for the request time of the upstream.
     * It works with :ref:`stats_for_all_methods
     * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods&gt;`
     * and :ref:`individual_method_stats_allowlist
     * &lt;envoy_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist&gt;` the same way
     * request_message_count and response_message_count works.
     * </pre>
     *
     * <code>bool enable_upstream_stats = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEnableUpstreamStats() {
      
      enableUpstreamStats_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.grpc_stats.v3.FilterConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.grpc_stats.v3.FilterConfig)
  private static final io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FilterConfig>
      PARSER = new com.google.protobuf.AbstractParser<FilterConfig>() {
    @java.lang.Override
    public FilterConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FilterConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FilterConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FilterConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.grpc_stats.v3.FilterConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

