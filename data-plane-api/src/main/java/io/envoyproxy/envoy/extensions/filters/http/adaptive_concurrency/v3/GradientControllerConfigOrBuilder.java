// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto

package io.envoyproxy.envoy.extensions.filters.http.adaptive_concurrency.v3;

public interface GradientControllerConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The percentile to use when summarizing aggregated samples. Defaults to p50.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent sample_aggregate_percentile = 1;</code>
   * @return Whether the sampleAggregatePercentile field is set.
   */
  boolean hasSampleAggregatePercentile();
  /**
   * <pre>
   * The percentile to use when summarizing aggregated samples. Defaults to p50.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent sample_aggregate_percentile = 1;</code>
   * @return The sampleAggregatePercentile.
   */
  io.envoyproxy.envoy.type.v3.Percent getSampleAggregatePercentile();
  /**
   * <pre>
   * The percentile to use when summarizing aggregated samples. Defaults to p50.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent sample_aggregate_percentile = 1;</code>
   */
  io.envoyproxy.envoy.type.v3.PercentOrBuilder getSampleAggregatePercentileOrBuilder();

  /**
   * <code>.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams concurrency_limit_params = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the concurrencyLimitParams field is set.
   */
  boolean hasConcurrencyLimitParams();
  /**
   * <code>.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams concurrency_limit_params = 2 [(.validate.rules) = { ... }</code>
   * @return The concurrencyLimitParams.
   */
  io.envoyproxy.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams getConcurrencyLimitParams();
  /**
   * <code>.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams concurrency_limit_params = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParamsOrBuilder getConcurrencyLimitParamsOrBuilder();

  /**
   * <code>.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams min_rtt_calc_params = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the minRttCalcParams field is set.
   */
  boolean hasMinRttCalcParams();
  /**
   * <code>.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams min_rtt_calc_params = 3 [(.validate.rules) = { ... }</code>
   * @return The minRttCalcParams.
   */
  io.envoyproxy.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams getMinRttCalcParams();
  /**
   * <code>.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams min_rtt_calc_params = 3 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParamsOrBuilder getMinRttCalcParamsOrBuilder();
}
