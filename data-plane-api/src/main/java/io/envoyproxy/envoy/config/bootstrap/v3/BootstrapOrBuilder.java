// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/bootstrap/v3/bootstrap.proto

package io.envoyproxy.envoy.config.bootstrap.v3;

public interface BootstrapOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.bootstrap.v3.Bootstrap)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Node identity to present to the management server and for instance
   * identification purposes (e.g. in generated headers).
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   * @return Whether the node field is set.
   */
  boolean hasNode();
  /**
   * <pre>
   * Node identity to present to the management server and for instance
   * identification purposes (e.g. in generated headers).
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   * @return The node.
   */
  io.envoyproxy.envoy.config.core.v3.Node getNode();
  /**
   * <pre>
   * Node identity to present to the management server and for instance
   * identification purposes (e.g. in generated headers).
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.NodeOrBuilder getNodeOrBuilder();

  /**
   * <pre>
   * A list of :ref:`Node &lt;envoy_v3_api_msg_config.core.v3.Node&gt;` field names
   * that will be included in the context parameters of the effective
   * xdstp:// URL that is sent in a discovery request when resource
   * locators are used for LDS/CDS. Any non-string field will have its JSON
   * encoding set as the context parameter value, with the exception of
   * metadata, which will be flattened (see example below). The supported field
   * names are:
   * - "cluster"
   * - "id"
   * - "locality.region"
   * - "locality.sub_zone"
   * - "locality.zone"
   * - "metadata"
   * - "user_agent_build_version.metadata"
   * - "user_agent_build_version.version"
   * - "user_agent_name"
   * - "user_agent_version"
   * The node context parameters act as a base layer dictionary for the context
   * parameters (i.e. more specific resource specific context parameters will
   * override). Field names will be prefixed with “udpa.node.” when included in
   * context parameters.
   * For example, if node_context_params is ``["user_agent_name", "metadata"]``,
   * the implied context parameters might be::
   *   node.user_agent_name: "envoy"
   *   node.metadata.foo: "{&#92;"bar&#92;": &#92;"baz&#92;"}"
   *   node.metadata.some: "42"
   *   node.metadata.thing: "&#92;"thing&#92;""
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string node_context_params = 26;</code>
   * @return A list containing the nodeContextParams.
   */
  java.util.List<java.lang.String>
      getNodeContextParamsList();
  /**
   * <pre>
   * A list of :ref:`Node &lt;envoy_v3_api_msg_config.core.v3.Node&gt;` field names
   * that will be included in the context parameters of the effective
   * xdstp:// URL that is sent in a discovery request when resource
   * locators are used for LDS/CDS. Any non-string field will have its JSON
   * encoding set as the context parameter value, with the exception of
   * metadata, which will be flattened (see example below). The supported field
   * names are:
   * - "cluster"
   * - "id"
   * - "locality.region"
   * - "locality.sub_zone"
   * - "locality.zone"
   * - "metadata"
   * - "user_agent_build_version.metadata"
   * - "user_agent_build_version.version"
   * - "user_agent_name"
   * - "user_agent_version"
   * The node context parameters act as a base layer dictionary for the context
   * parameters (i.e. more specific resource specific context parameters will
   * override). Field names will be prefixed with “udpa.node.” when included in
   * context parameters.
   * For example, if node_context_params is ``["user_agent_name", "metadata"]``,
   * the implied context parameters might be::
   *   node.user_agent_name: "envoy"
   *   node.metadata.foo: "{&#92;"bar&#92;": &#92;"baz&#92;"}"
   *   node.metadata.some: "42"
   *   node.metadata.thing: "&#92;"thing&#92;""
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string node_context_params = 26;</code>
   * @return The count of nodeContextParams.
   */
  int getNodeContextParamsCount();
  /**
   * <pre>
   * A list of :ref:`Node &lt;envoy_v3_api_msg_config.core.v3.Node&gt;` field names
   * that will be included in the context parameters of the effective
   * xdstp:// URL that is sent in a discovery request when resource
   * locators are used for LDS/CDS. Any non-string field will have its JSON
   * encoding set as the context parameter value, with the exception of
   * metadata, which will be flattened (see example below). The supported field
   * names are:
   * - "cluster"
   * - "id"
   * - "locality.region"
   * - "locality.sub_zone"
   * - "locality.zone"
   * - "metadata"
   * - "user_agent_build_version.metadata"
   * - "user_agent_build_version.version"
   * - "user_agent_name"
   * - "user_agent_version"
   * The node context parameters act as a base layer dictionary for the context
   * parameters (i.e. more specific resource specific context parameters will
   * override). Field names will be prefixed with “udpa.node.” when included in
   * context parameters.
   * For example, if node_context_params is ``["user_agent_name", "metadata"]``,
   * the implied context parameters might be::
   *   node.user_agent_name: "envoy"
   *   node.metadata.foo: "{&#92;"bar&#92;": &#92;"baz&#92;"}"
   *   node.metadata.some: "42"
   *   node.metadata.thing: "&#92;"thing&#92;""
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string node_context_params = 26;</code>
   * @param index The index of the element to return.
   * @return The nodeContextParams at the given index.
   */
  java.lang.String getNodeContextParams(int index);
  /**
   * <pre>
   * A list of :ref:`Node &lt;envoy_v3_api_msg_config.core.v3.Node&gt;` field names
   * that will be included in the context parameters of the effective
   * xdstp:// URL that is sent in a discovery request when resource
   * locators are used for LDS/CDS. Any non-string field will have its JSON
   * encoding set as the context parameter value, with the exception of
   * metadata, which will be flattened (see example below). The supported field
   * names are:
   * - "cluster"
   * - "id"
   * - "locality.region"
   * - "locality.sub_zone"
   * - "locality.zone"
   * - "metadata"
   * - "user_agent_build_version.metadata"
   * - "user_agent_build_version.version"
   * - "user_agent_name"
   * - "user_agent_version"
   * The node context parameters act as a base layer dictionary for the context
   * parameters (i.e. more specific resource specific context parameters will
   * override). Field names will be prefixed with “udpa.node.” when included in
   * context parameters.
   * For example, if node_context_params is ``["user_agent_name", "metadata"]``,
   * the implied context parameters might be::
   *   node.user_agent_name: "envoy"
   *   node.metadata.foo: "{&#92;"bar&#92;": &#92;"baz&#92;"}"
   *   node.metadata.some: "42"
   *   node.metadata.thing: "&#92;"thing&#92;""
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated string node_context_params = 26;</code>
   * @param index The index of the value to return.
   * @return The bytes of the nodeContextParams at the given index.
   */
  com.google.protobuf.ByteString
      getNodeContextParamsBytes(int index);

  /**
   * <pre>
   * Statically specified resources.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Bootstrap.StaticResources static_resources = 2;</code>
   * @return Whether the staticResources field is set.
   */
  boolean hasStaticResources();
  /**
   * <pre>
   * Statically specified resources.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Bootstrap.StaticResources static_resources = 2;</code>
   * @return The staticResources.
   */
  io.envoyproxy.envoy.config.bootstrap.v3.Bootstrap.StaticResources getStaticResources();
  /**
   * <pre>
   * Statically specified resources.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Bootstrap.StaticResources static_resources = 2;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.Bootstrap.StaticResourcesOrBuilder getStaticResourcesOrBuilder();

  /**
   * <pre>
   * xDS configuration sources.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Bootstrap.DynamicResources dynamic_resources = 3;</code>
   * @return Whether the dynamicResources field is set.
   */
  boolean hasDynamicResources();
  /**
   * <pre>
   * xDS configuration sources.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Bootstrap.DynamicResources dynamic_resources = 3;</code>
   * @return The dynamicResources.
   */
  io.envoyproxy.envoy.config.bootstrap.v3.Bootstrap.DynamicResources getDynamicResources();
  /**
   * <pre>
   * xDS configuration sources.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Bootstrap.DynamicResources dynamic_resources = 3;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.Bootstrap.DynamicResourcesOrBuilder getDynamicResourcesOrBuilder();

  /**
   * <pre>
   * Configuration for the cluster manager which owns all upstream clusters
   * within the server.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.ClusterManager cluster_manager = 4;</code>
   * @return Whether the clusterManager field is set.
   */
  boolean hasClusterManager();
  /**
   * <pre>
   * Configuration for the cluster manager which owns all upstream clusters
   * within the server.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.ClusterManager cluster_manager = 4;</code>
   * @return The clusterManager.
   */
  io.envoyproxy.envoy.config.bootstrap.v3.ClusterManager getClusterManager();
  /**
   * <pre>
   * Configuration for the cluster manager which owns all upstream clusters
   * within the server.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.ClusterManager cluster_manager = 4;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.ClusterManagerOrBuilder getClusterManagerOrBuilder();

  /**
   * <pre>
   * Health discovery service config option.
   * (:ref:`core.ApiConfigSource &lt;envoy_api_msg_config.core.v3.ApiConfigSource&gt;`)
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource hds_config = 14;</code>
   * @return Whether the hdsConfig field is set.
   */
  boolean hasHdsConfig();
  /**
   * <pre>
   * Health discovery service config option.
   * (:ref:`core.ApiConfigSource &lt;envoy_api_msg_config.core.v3.ApiConfigSource&gt;`)
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource hds_config = 14;</code>
   * @return The hdsConfig.
   */
  io.envoyproxy.envoy.config.core.v3.ApiConfigSource getHdsConfig();
  /**
   * <pre>
   * Health discovery service config option.
   * (:ref:`core.ApiConfigSource &lt;envoy_api_msg_config.core.v3.ApiConfigSource&gt;`)
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource hds_config = 14;</code>
   */
  io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder getHdsConfigOrBuilder();

  /**
   * <pre>
   * Optional file system path to search for startup flag files.
   * </pre>
   *
   * <code>string flags_path = 5;</code>
   * @return The flagsPath.
   */
  java.lang.String getFlagsPath();
  /**
   * <pre>
   * Optional file system path to search for startup flag files.
   * </pre>
   *
   * <code>string flags_path = 5;</code>
   * @return The bytes for flagsPath.
   */
  com.google.protobuf.ByteString
      getFlagsPathBytes();

  /**
   * <pre>
   * Optional set of stats sinks.
   * </pre>
   *
   * <code>repeated .envoy.config.metrics.v3.StatsSink stats_sinks = 6;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.metrics.v3.StatsSink> 
      getStatsSinksList();
  /**
   * <pre>
   * Optional set of stats sinks.
   * </pre>
   *
   * <code>repeated .envoy.config.metrics.v3.StatsSink stats_sinks = 6;</code>
   */
  io.envoyproxy.envoy.config.metrics.v3.StatsSink getStatsSinks(int index);
  /**
   * <pre>
   * Optional set of stats sinks.
   * </pre>
   *
   * <code>repeated .envoy.config.metrics.v3.StatsSink stats_sinks = 6;</code>
   */
  int getStatsSinksCount();
  /**
   * <pre>
   * Optional set of stats sinks.
   * </pre>
   *
   * <code>repeated .envoy.config.metrics.v3.StatsSink stats_sinks = 6;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.metrics.v3.StatsSinkOrBuilder> 
      getStatsSinksOrBuilderList();
  /**
   * <pre>
   * Optional set of stats sinks.
   * </pre>
   *
   * <code>repeated .envoy.config.metrics.v3.StatsSink stats_sinks = 6;</code>
   */
  io.envoyproxy.envoy.config.metrics.v3.StatsSinkOrBuilder getStatsSinksOrBuilder(
      int index);

  /**
   * <pre>
   * Configuration for internal processing of stats.
   * </pre>
   *
   * <code>.envoy.config.metrics.v3.StatsConfig stats_config = 13;</code>
   * @return Whether the statsConfig field is set.
   */
  boolean hasStatsConfig();
  /**
   * <pre>
   * Configuration for internal processing of stats.
   * </pre>
   *
   * <code>.envoy.config.metrics.v3.StatsConfig stats_config = 13;</code>
   * @return The statsConfig.
   */
  io.envoyproxy.envoy.config.metrics.v3.StatsConfig getStatsConfig();
  /**
   * <pre>
   * Configuration for internal processing of stats.
   * </pre>
   *
   * <code>.envoy.config.metrics.v3.StatsConfig stats_config = 13;</code>
   */
  io.envoyproxy.envoy.config.metrics.v3.StatsConfigOrBuilder getStatsConfigOrBuilder();

  /**
   * <pre>
   * Optional duration between flushes to configured stats sinks. For
   * performance reasons Envoy latches counters and only flushes counters and
   * gauges at a periodic interval. If not specified the default is 5000ms (5
   * seconds). Only one of `stats_flush_interval` or `stats_flush_on_admin`
   * can be set.
   * Duration must be at least 1ms and at most 5 min.
   * </pre>
   *
   * <code>.google.protobuf.Duration stats_flush_interval = 7 [(.validate.rules) = { ... }</code>
   * @return Whether the statsFlushInterval field is set.
   */
  boolean hasStatsFlushInterval();
  /**
   * <pre>
   * Optional duration between flushes to configured stats sinks. For
   * performance reasons Envoy latches counters and only flushes counters and
   * gauges at a periodic interval. If not specified the default is 5000ms (5
   * seconds). Only one of `stats_flush_interval` or `stats_flush_on_admin`
   * can be set.
   * Duration must be at least 1ms and at most 5 min.
   * </pre>
   *
   * <code>.google.protobuf.Duration stats_flush_interval = 7 [(.validate.rules) = { ... }</code>
   * @return The statsFlushInterval.
   */
  com.google.protobuf.Duration getStatsFlushInterval();
  /**
   * <pre>
   * Optional duration between flushes to configured stats sinks. For
   * performance reasons Envoy latches counters and only flushes counters and
   * gauges at a periodic interval. If not specified the default is 5000ms (5
   * seconds). Only one of `stats_flush_interval` or `stats_flush_on_admin`
   * can be set.
   * Duration must be at least 1ms and at most 5 min.
   * </pre>
   *
   * <code>.google.protobuf.Duration stats_flush_interval = 7 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getStatsFlushIntervalOrBuilder();

  /**
   * <pre>
   * Flush stats to sinks only when queried for on the admin interface. If set,
   * a flush timer is not created. Only one of `stats_flush_on_admin` or
   * `stats_flush_interval` can be set.
   * </pre>
   *
   * <code>bool stats_flush_on_admin = 29 [(.validate.rules) = { ... }</code>
   * @return Whether the statsFlushOnAdmin field is set.
   */
  boolean hasStatsFlushOnAdmin();
  /**
   * <pre>
   * Flush stats to sinks only when queried for on the admin interface. If set,
   * a flush timer is not created. Only one of `stats_flush_on_admin` or
   * `stats_flush_interval` can be set.
   * </pre>
   *
   * <code>bool stats_flush_on_admin = 29 [(.validate.rules) = { ... }</code>
   * @return The statsFlushOnAdmin.
   */
  boolean getStatsFlushOnAdmin();

  /**
   * <pre>
   * Optional watchdog configuration.
   * This is for a single watchdog configuration for the entire system.
   * Deprecated in favor of *watchdogs* which has finer granularity.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Watchdog watchdog = 8 [deprecated = true];</code>
   * @return Whether the watchdog field is set.
   */
  @java.lang.Deprecated boolean hasWatchdog();
  /**
   * <pre>
   * Optional watchdog configuration.
   * This is for a single watchdog configuration for the entire system.
   * Deprecated in favor of *watchdogs* which has finer granularity.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Watchdog watchdog = 8 [deprecated = true];</code>
   * @return The watchdog.
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.bootstrap.v3.Watchdog getWatchdog();
  /**
   * <pre>
   * Optional watchdog configuration.
   * This is for a single watchdog configuration for the entire system.
   * Deprecated in favor of *watchdogs* which has finer granularity.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Watchdog watchdog = 8 [deprecated = true];</code>
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.bootstrap.v3.WatchdogOrBuilder getWatchdogOrBuilder();

  /**
   * <pre>
   * Optional watchdogs configuration.
   * This is used for specifying different watchdogs for the different subsystems.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Watchdogs watchdogs = 27;</code>
   * @return Whether the watchdogs field is set.
   */
  boolean hasWatchdogs();
  /**
   * <pre>
   * Optional watchdogs configuration.
   * This is used for specifying different watchdogs for the different subsystems.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Watchdogs watchdogs = 27;</code>
   * @return The watchdogs.
   */
  io.envoyproxy.envoy.config.bootstrap.v3.Watchdogs getWatchdogs();
  /**
   * <pre>
   * Optional watchdogs configuration.
   * This is used for specifying different watchdogs for the different subsystems.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Watchdogs watchdogs = 27;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.WatchdogsOrBuilder getWatchdogsOrBuilder();

  /**
   * <pre>
   * Configuration for an external tracing provider.
   * .. attention::
   *  This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
   *  &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider&gt;`.
   * </pre>
   *
   * <code>.envoy.config.trace.v3.Tracing tracing = 9 [deprecated = true];</code>
   * @return Whether the tracing field is set.
   */
  @java.lang.Deprecated boolean hasTracing();
  /**
   * <pre>
   * Configuration for an external tracing provider.
   * .. attention::
   *  This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
   *  &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider&gt;`.
   * </pre>
   *
   * <code>.envoy.config.trace.v3.Tracing tracing = 9 [deprecated = true];</code>
   * @return The tracing.
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.trace.v3.Tracing getTracing();
  /**
   * <pre>
   * Configuration for an external tracing provider.
   * .. attention::
   *  This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
   *  &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider&gt;`.
   * </pre>
   *
   * <code>.envoy.config.trace.v3.Tracing tracing = 9 [deprecated = true];</code>
   */
  @java.lang.Deprecated io.envoyproxy.envoy.config.trace.v3.TracingOrBuilder getTracingOrBuilder();

  /**
   * <pre>
   * Configuration for the runtime configuration provider. If not
   * specified, a “null” provider will be used which will result in all defaults
   * being used.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.LayeredRuntime layered_runtime = 17;</code>
   * @return Whether the layeredRuntime field is set.
   */
  boolean hasLayeredRuntime();
  /**
   * <pre>
   * Configuration for the runtime configuration provider. If not
   * specified, a “null” provider will be used which will result in all defaults
   * being used.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.LayeredRuntime layered_runtime = 17;</code>
   * @return The layeredRuntime.
   */
  io.envoyproxy.envoy.config.bootstrap.v3.LayeredRuntime getLayeredRuntime();
  /**
   * <pre>
   * Configuration for the runtime configuration provider. If not
   * specified, a “null” provider will be used which will result in all defaults
   * being used.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.LayeredRuntime layered_runtime = 17;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.LayeredRuntimeOrBuilder getLayeredRuntimeOrBuilder();

  /**
   * <pre>
   * Configuration for the local administration HTTP server.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Admin admin = 12;</code>
   * @return Whether the admin field is set.
   */
  boolean hasAdmin();
  /**
   * <pre>
   * Configuration for the local administration HTTP server.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Admin admin = 12;</code>
   * @return The admin.
   */
  io.envoyproxy.envoy.config.bootstrap.v3.Admin getAdmin();
  /**
   * <pre>
   * Configuration for the local administration HTTP server.
   * </pre>
   *
   * <code>.envoy.config.bootstrap.v3.Admin admin = 12;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.AdminOrBuilder getAdminOrBuilder();

  /**
   * <pre>
   * Optional overload manager configuration.
   * </pre>
   *
   * <code>.envoy.config.overload.v3.OverloadManager overload_manager = 15 [(.udpa.annotations.security) = { ... }</code>
   * @return Whether the overloadManager field is set.
   */
  boolean hasOverloadManager();
  /**
   * <pre>
   * Optional overload manager configuration.
   * </pre>
   *
   * <code>.envoy.config.overload.v3.OverloadManager overload_manager = 15 [(.udpa.annotations.security) = { ... }</code>
   * @return The overloadManager.
   */
  io.envoyproxy.envoy.config.overload.v3.OverloadManager getOverloadManager();
  /**
   * <pre>
   * Optional overload manager configuration.
   * </pre>
   *
   * <code>.envoy.config.overload.v3.OverloadManager overload_manager = 15 [(.udpa.annotations.security) = { ... }</code>
   */
  io.envoyproxy.envoy.config.overload.v3.OverloadManagerOrBuilder getOverloadManagerOrBuilder();

  /**
   * <pre>
   * Enable :ref:`stats for event dispatcher &lt;operations_performance&gt;`, defaults to false.
   * Note that this records a value for each iteration of the event loop on every thread. This
   * should normally be minimal overhead, but when using
   * :ref:`statsd &lt;envoy_api_msg_config.metrics.v3.StatsdSink&gt;`, it will send each observed value
   * over the wire individually because the statsd protocol doesn't have any way to represent a
   * histogram summary. Be aware that this can be a very large volume of data.
   * </pre>
   *
   * <code>bool enable_dispatcher_stats = 16;</code>
   * @return The enableDispatcherStats.
   */
  boolean getEnableDispatcherStats();

  /**
   * <pre>
   * Optional string which will be used in lieu of x-envoy in prefixing headers.
   * For example, if this string is present and set to X-Foo, then x-envoy-retry-on will be
   * transformed into x-foo-retry-on etc.
   * Note this applies to the headers Envoy will generate, the headers Envoy will sanitize, and the
   * headers Envoy will trust for core code and core extensions only. Be VERY careful making
   * changes to this string, especially in multi-layer Envoy deployments or deployments using
   * extensions which are not upstream.
   * </pre>
   *
   * <code>string header_prefix = 18;</code>
   * @return The headerPrefix.
   */
  java.lang.String getHeaderPrefix();
  /**
   * <pre>
   * Optional string which will be used in lieu of x-envoy in prefixing headers.
   * For example, if this string is present and set to X-Foo, then x-envoy-retry-on will be
   * transformed into x-foo-retry-on etc.
   * Note this applies to the headers Envoy will generate, the headers Envoy will sanitize, and the
   * headers Envoy will trust for core code and core extensions only. Be VERY careful making
   * changes to this string, especially in multi-layer Envoy deployments or deployments using
   * extensions which are not upstream.
   * </pre>
   *
   * <code>string header_prefix = 18;</code>
   * @return The bytes for headerPrefix.
   */
  com.google.protobuf.ByteString
      getHeaderPrefixBytes();

  /**
   * <pre>
   * Optional proxy version which will be used to set the value of :ref:`server.version statistic
   * &lt;server_statistics&gt;` if specified. Envoy will not process this value, it will be sent as is to
   * :ref:`stats sinks &lt;envoy_api_msg_config.metrics.v3.StatsSink&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value stats_server_version_override = 19;</code>
   * @return Whether the statsServerVersionOverride field is set.
   */
  boolean hasStatsServerVersionOverride();
  /**
   * <pre>
   * Optional proxy version which will be used to set the value of :ref:`server.version statistic
   * &lt;server_statistics&gt;` if specified. Envoy will not process this value, it will be sent as is to
   * :ref:`stats sinks &lt;envoy_api_msg_config.metrics.v3.StatsSink&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value stats_server_version_override = 19;</code>
   * @return The statsServerVersionOverride.
   */
  com.google.protobuf.UInt64Value getStatsServerVersionOverride();
  /**
   * <pre>
   * Optional proxy version which will be used to set the value of :ref:`server.version statistic
   * &lt;server_statistics&gt;` if specified. Envoy will not process this value, it will be sent as is to
   * :ref:`stats sinks &lt;envoy_api_msg_config.metrics.v3.StatsSink&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value stats_server_version_override = 19;</code>
   */
  com.google.protobuf.UInt64ValueOrBuilder getStatsServerVersionOverrideOrBuilder();

  /**
   * <pre>
   * Always use TCP queries instead of UDP queries for DNS lookups.
   * This may be overridden on a per-cluster basis in cds_config,
   * when :ref:`dns_resolvers &lt;envoy_api_field_config.cluster.v3.Cluster.dns_resolvers&gt;` and
   * :ref:`use_tcp_for_dns_lookups &lt;envoy_api_field_config.cluster.v3.Cluster.use_tcp_for_dns_lookups&gt;` are
   * specified.
   * Setting this value causes failure if the
   * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
   * server startup. Apple' API only uses UDP for DNS resolution.
   * </pre>
   *
   * <code>bool use_tcp_for_dns_lookups = 20;</code>
   * @return The useTcpForDnsLookups.
   */
  boolean getUseTcpForDnsLookups();

  /**
   * <pre>
   * Specifies optional bootstrap extensions to be instantiated at startup time.
   * Each item contains extension specific configuration.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.TypedExtensionConfig bootstrap_extensions = 21;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig> 
      getBootstrapExtensionsList();
  /**
   * <pre>
   * Specifies optional bootstrap extensions to be instantiated at startup time.
   * Each item contains extension specific configuration.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.TypedExtensionConfig bootstrap_extensions = 21;</code>
   */
  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getBootstrapExtensions(int index);
  /**
   * <pre>
   * Specifies optional bootstrap extensions to be instantiated at startup time.
   * Each item contains extension specific configuration.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.TypedExtensionConfig bootstrap_extensions = 21;</code>
   */
  int getBootstrapExtensionsCount();
  /**
   * <pre>
   * Specifies optional bootstrap extensions to be instantiated at startup time.
   * Each item contains extension specific configuration.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.TypedExtensionConfig bootstrap_extensions = 21;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
      getBootstrapExtensionsOrBuilderList();
  /**
   * <pre>
   * Specifies optional bootstrap extensions to be instantiated at startup time.
   * Each item contains extension specific configuration.
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.TypedExtensionConfig bootstrap_extensions = 21;</code>
   */
  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getBootstrapExtensionsOrBuilder(
      int index);

  /**
   * <pre>
   * Specifies optional extensions instantiated at startup time and
   * invoked during crash time on the request that caused the crash.
   * </pre>
   *
   * <code>repeated .envoy.config.bootstrap.v3.FatalAction fatal_actions = 28;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.bootstrap.v3.FatalAction> 
      getFatalActionsList();
  /**
   * <pre>
   * Specifies optional extensions instantiated at startup time and
   * invoked during crash time on the request that caused the crash.
   * </pre>
   *
   * <code>repeated .envoy.config.bootstrap.v3.FatalAction fatal_actions = 28;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.FatalAction getFatalActions(int index);
  /**
   * <pre>
   * Specifies optional extensions instantiated at startup time and
   * invoked during crash time on the request that caused the crash.
   * </pre>
   *
   * <code>repeated .envoy.config.bootstrap.v3.FatalAction fatal_actions = 28;</code>
   */
  int getFatalActionsCount();
  /**
   * <pre>
   * Specifies optional extensions instantiated at startup time and
   * invoked during crash time on the request that caused the crash.
   * </pre>
   *
   * <code>repeated .envoy.config.bootstrap.v3.FatalAction fatal_actions = 28;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.bootstrap.v3.FatalActionOrBuilder> 
      getFatalActionsOrBuilderList();
  /**
   * <pre>
   * Specifies optional extensions instantiated at startup time and
   * invoked during crash time on the request that caused the crash.
   * </pre>
   *
   * <code>repeated .envoy.config.bootstrap.v3.FatalAction fatal_actions = 28;</code>
   */
  io.envoyproxy.envoy.config.bootstrap.v3.FatalActionOrBuilder getFatalActionsOrBuilder(
      int index);

  /**
   * <pre>
   * Configuration sources that will participate in
   * xdstp:// URL authority resolution. The algorithm is as
   * follows:
   * 1. The authority field is taken from the xdstp:// URL, call
   *    this *resource_authority*.
   * 2. *resource_authority* is compared against the authorities in any peer
   *    *ConfigSource*. The peer *ConfigSource* is the configuration source
   *    message which would have been used unconditionally for resolution
   *    with opaque resource names. If there is a match with an authority, the
   *    peer *ConfigSource* message is used.
   * 3. *resource_authority* is compared sequentially with the authorities in
   *    each configuration source in *config_sources*. The first *ConfigSource*
   *    to match wins.
   * 4. As a fallback, if no configuration source matches, then
   *    *default_config_source* is used.
   * 5. If *default_config_source* is not specified, resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.ConfigSource config_sources = 22;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.ConfigSource> 
      getConfigSourcesList();
  /**
   * <pre>
   * Configuration sources that will participate in
   * xdstp:// URL authority resolution. The algorithm is as
   * follows:
   * 1. The authority field is taken from the xdstp:// URL, call
   *    this *resource_authority*.
   * 2. *resource_authority* is compared against the authorities in any peer
   *    *ConfigSource*. The peer *ConfigSource* is the configuration source
   *    message which would have been used unconditionally for resolution
   *    with opaque resource names. If there is a match with an authority, the
   *    peer *ConfigSource* message is used.
   * 3. *resource_authority* is compared sequentially with the authorities in
   *    each configuration source in *config_sources*. The first *ConfigSource*
   *    to match wins.
   * 4. As a fallback, if no configuration source matches, then
   *    *default_config_source* is used.
   * 5. If *default_config_source* is not specified, resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.ConfigSource config_sources = 22;</code>
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSource getConfigSources(int index);
  /**
   * <pre>
   * Configuration sources that will participate in
   * xdstp:// URL authority resolution. The algorithm is as
   * follows:
   * 1. The authority field is taken from the xdstp:// URL, call
   *    this *resource_authority*.
   * 2. *resource_authority* is compared against the authorities in any peer
   *    *ConfigSource*. The peer *ConfigSource* is the configuration source
   *    message which would have been used unconditionally for resolution
   *    with opaque resource names. If there is a match with an authority, the
   *    peer *ConfigSource* message is used.
   * 3. *resource_authority* is compared sequentially with the authorities in
   *    each configuration source in *config_sources*. The first *ConfigSource*
   *    to match wins.
   * 4. As a fallback, if no configuration source matches, then
   *    *default_config_source* is used.
   * 5. If *default_config_source* is not specified, resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.ConfigSource config_sources = 22;</code>
   */
  int getConfigSourcesCount();
  /**
   * <pre>
   * Configuration sources that will participate in
   * xdstp:// URL authority resolution. The algorithm is as
   * follows:
   * 1. The authority field is taken from the xdstp:// URL, call
   *    this *resource_authority*.
   * 2. *resource_authority* is compared against the authorities in any peer
   *    *ConfigSource*. The peer *ConfigSource* is the configuration source
   *    message which would have been used unconditionally for resolution
   *    with opaque resource names. If there is a match with an authority, the
   *    peer *ConfigSource* message is used.
   * 3. *resource_authority* is compared sequentially with the authorities in
   *    each configuration source in *config_sources*. The first *ConfigSource*
   *    to match wins.
   * 4. As a fallback, if no configuration source matches, then
   *    *default_config_source* is used.
   * 5. If *default_config_source* is not specified, resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.ConfigSource config_sources = 22;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.ConfigSourceOrBuilder> 
      getConfigSourcesOrBuilderList();
  /**
   * <pre>
   * Configuration sources that will participate in
   * xdstp:// URL authority resolution. The algorithm is as
   * follows:
   * 1. The authority field is taken from the xdstp:// URL, call
   *    this *resource_authority*.
   * 2. *resource_authority* is compared against the authorities in any peer
   *    *ConfigSource*. The peer *ConfigSource* is the configuration source
   *    message which would have been used unconditionally for resolution
   *    with opaque resource names. If there is a match with an authority, the
   *    peer *ConfigSource* message is used.
   * 3. *resource_authority* is compared sequentially with the authorities in
   *    each configuration source in *config_sources*. The first *ConfigSource*
   *    to match wins.
   * 4. As a fallback, if no configuration source matches, then
   *    *default_config_source* is used.
   * 5. If *default_config_source* is not specified, resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.ConfigSource config_sources = 22;</code>
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSourceOrBuilder getConfigSourcesOrBuilder(
      int index);

  /**
   * <pre>
   * Default configuration source for xdstp:// URLs if all
   * other resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource default_config_source = 23;</code>
   * @return Whether the defaultConfigSource field is set.
   */
  boolean hasDefaultConfigSource();
  /**
   * <pre>
   * Default configuration source for xdstp:// URLs if all
   * other resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource default_config_source = 23;</code>
   * @return The defaultConfigSource.
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSource getDefaultConfigSource();
  /**
   * <pre>
   * Default configuration source for xdstp:// URLs if all
   * other resolution fails.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.config.core.v3.ConfigSource default_config_source = 23;</code>
   */
  io.envoyproxy.envoy.config.core.v3.ConfigSourceOrBuilder getDefaultConfigSourceOrBuilder();

  /**
   * <pre>
   * Optional overriding of default socket interface. The value must be the name of one of the
   * socket interface factories initialized through a bootstrap extension
   * </pre>
   *
   * <code>string default_socket_interface = 24;</code>
   * @return The defaultSocketInterface.
   */
  java.lang.String getDefaultSocketInterface();
  /**
   * <pre>
   * Optional overriding of default socket interface. The value must be the name of one of the
   * socket interface factories initialized through a bootstrap extension
   * </pre>
   *
   * <code>string default_socket_interface = 24;</code>
   * @return The bytes for defaultSocketInterface.
   */
  com.google.protobuf.ByteString
      getDefaultSocketInterfaceBytes();

  /**
   * <pre>
   * Global map of CertificateProvider instances. These instances are referred to by name in the
   * :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name&gt;`
   * field.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.TypedExtensionConfig&gt; certificate_provider_instances = 25;</code>
   */
  int getCertificateProviderInstancesCount();
  /**
   * <pre>
   * Global map of CertificateProvider instances. These instances are referred to by name in the
   * :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name&gt;`
   * field.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.TypedExtensionConfig&gt; certificate_provider_instances = 25;</code>
   */
  boolean containsCertificateProviderInstances(
      java.lang.String key);
  /**
   * Use {@link #getCertificateProviderInstancesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig>
  getCertificateProviderInstances();
  /**
   * <pre>
   * Global map of CertificateProvider instances. These instances are referred to by name in the
   * :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name&gt;`
   * field.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.TypedExtensionConfig&gt; certificate_provider_instances = 25;</code>
   */
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig>
  getCertificateProviderInstancesMap();
  /**
   * <pre>
   * Global map of CertificateProvider instances. These instances are referred to by name in the
   * :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name&gt;`
   * field.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.TypedExtensionConfig&gt; certificate_provider_instances = 25;</code>
   */

  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCertificateProviderInstancesOrDefault(
      java.lang.String key,
      io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig defaultValue);
  /**
   * <pre>
   * Global map of CertificateProvider instances. These instances are referred to by name in the
   * :ref:`CommonTlsContext.CertificateProviderInstance.instance_name
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.instance_name&gt;`
   * field.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.TypedExtensionConfig&gt; certificate_provider_instances = 25;</code>
   */

  io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCertificateProviderInstancesOrThrow(
      java.lang.String key);

  public io.envoyproxy.envoy.config.bootstrap.v3.Bootstrap.StatsFlushCase getStatsFlushCase();
}
