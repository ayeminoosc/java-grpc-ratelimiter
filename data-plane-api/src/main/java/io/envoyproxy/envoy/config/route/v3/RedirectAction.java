// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

/**
 * <pre>
 * [#next-free-field: 10]
 * </pre>
 *
 * Protobuf type {@code envoy.config.route.v3.RedirectAction}
 */
public final class RedirectAction extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.route.v3.RedirectAction)
    RedirectActionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RedirectAction.newBuilder() to construct.
  private RedirectAction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RedirectAction() {
    hostRedirect_ = "";
    responseCode_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RedirectAction();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RedirectAction(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            hostRedirect_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            pathRewriteSpecifierCase_ = 2;
            pathRewriteSpecifier_ = s;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            responseCode_ = rawValue;
            break;
          }
          case 32: {
            schemeRewriteSpecifierCase_ = 4;
            schemeRewriteSpecifier_ = input.readBool();
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();
            pathRewriteSpecifierCase_ = 5;
            pathRewriteSpecifier_ = s;
            break;
          }
          case 48: {

            stripQuery_ = input.readBool();
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();
            schemeRewriteSpecifierCase_ = 7;
            schemeRewriteSpecifier_ = s;
            break;
          }
          case 64: {

            portRedirect_ = input.readUInt32();
            break;
          }
          case 74: {
            io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder subBuilder = null;
            if (pathRewriteSpecifierCase_ == 9) {
              subBuilder = ((io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_).toBuilder();
            }
            pathRewriteSpecifier_ =
                input.readMessage(io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_);
              pathRewriteSpecifier_ = subBuilder.buildPartial();
            }
            pathRewriteSpecifierCase_ = 9;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RedirectAction_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RedirectAction_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.route.v3.RedirectAction.class, io.envoyproxy.envoy.config.route.v3.RedirectAction.Builder.class);
  }

  /**
   * Protobuf enum {@code envoy.config.route.v3.RedirectAction.RedirectResponseCode}
   */
  public enum RedirectResponseCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Moved Permanently HTTP Status Code - 301.
     * </pre>
     *
     * <code>MOVED_PERMANENTLY = 0;</code>
     */
    MOVED_PERMANENTLY(0),
    /**
     * <pre>
     * Found HTTP Status Code - 302.
     * </pre>
     *
     * <code>FOUND = 1;</code>
     */
    FOUND(1),
    /**
     * <pre>
     * See Other HTTP Status Code - 303.
     * </pre>
     *
     * <code>SEE_OTHER = 2;</code>
     */
    SEE_OTHER(2),
    /**
     * <pre>
     * Temporary Redirect HTTP Status Code - 307.
     * </pre>
     *
     * <code>TEMPORARY_REDIRECT = 3;</code>
     */
    TEMPORARY_REDIRECT(3),
    /**
     * <pre>
     * Permanent Redirect HTTP Status Code - 308.
     * </pre>
     *
     * <code>PERMANENT_REDIRECT = 4;</code>
     */
    PERMANENT_REDIRECT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Moved Permanently HTTP Status Code - 301.
     * </pre>
     *
     * <code>MOVED_PERMANENTLY = 0;</code>
     */
    public static final int MOVED_PERMANENTLY_VALUE = 0;
    /**
     * <pre>
     * Found HTTP Status Code - 302.
     * </pre>
     *
     * <code>FOUND = 1;</code>
     */
    public static final int FOUND_VALUE = 1;
    /**
     * <pre>
     * See Other HTTP Status Code - 303.
     * </pre>
     *
     * <code>SEE_OTHER = 2;</code>
     */
    public static final int SEE_OTHER_VALUE = 2;
    /**
     * <pre>
     * Temporary Redirect HTTP Status Code - 307.
     * </pre>
     *
     * <code>TEMPORARY_REDIRECT = 3;</code>
     */
    public static final int TEMPORARY_REDIRECT_VALUE = 3;
    /**
     * <pre>
     * Permanent Redirect HTTP Status Code - 308.
     * </pre>
     *
     * <code>PERMANENT_REDIRECT = 4;</code>
     */
    public static final int PERMANENT_REDIRECT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RedirectResponseCode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RedirectResponseCode forNumber(int value) {
      switch (value) {
        case 0: return MOVED_PERMANENTLY;
        case 1: return FOUND;
        case 2: return SEE_OTHER;
        case 3: return TEMPORARY_REDIRECT;
        case 4: return PERMANENT_REDIRECT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RedirectResponseCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RedirectResponseCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RedirectResponseCode>() {
            public RedirectResponseCode findValueByNumber(int number) {
              return RedirectResponseCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RedirectAction.getDescriptor().getEnumTypes().get(0);
    }

    private static final RedirectResponseCode[] VALUES = values();

    public static RedirectResponseCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RedirectResponseCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.config.route.v3.RedirectAction.RedirectResponseCode)
  }

  private int schemeRewriteSpecifierCase_ = 0;
  private java.lang.Object schemeRewriteSpecifier_;
  public enum SchemeRewriteSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    HTTPS_REDIRECT(4),
    SCHEME_REDIRECT(7),
    SCHEMEREWRITESPECIFIER_NOT_SET(0);
    private final int value;
    private SchemeRewriteSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SchemeRewriteSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static SchemeRewriteSpecifierCase forNumber(int value) {
      switch (value) {
        case 4: return HTTPS_REDIRECT;
        case 7: return SCHEME_REDIRECT;
        case 0: return SCHEMEREWRITESPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SchemeRewriteSpecifierCase
  getSchemeRewriteSpecifierCase() {
    return SchemeRewriteSpecifierCase.forNumber(
        schemeRewriteSpecifierCase_);
  }

  private int pathRewriteSpecifierCase_ = 0;
  private java.lang.Object pathRewriteSpecifier_;
  public enum PathRewriteSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PATH_REDIRECT(2),
    PREFIX_REWRITE(5),
    REGEX_REWRITE(9),
    PATHREWRITESPECIFIER_NOT_SET(0);
    private final int value;
    private PathRewriteSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PathRewriteSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static PathRewriteSpecifierCase forNumber(int value) {
      switch (value) {
        case 2: return PATH_REDIRECT;
        case 5: return PREFIX_REWRITE;
        case 9: return REGEX_REWRITE;
        case 0: return PATHREWRITESPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PathRewriteSpecifierCase
  getPathRewriteSpecifierCase() {
    return PathRewriteSpecifierCase.forNumber(
        pathRewriteSpecifierCase_);
  }

  public static final int HTTPS_REDIRECT_FIELD_NUMBER = 4;
  /**
   * <pre>
   * The scheme portion of the URL will be swapped with "https".
   * </pre>
   *
   * <code>bool https_redirect = 4;</code>
   * @return Whether the httpsRedirect field is set.
   */
  @java.lang.Override
  public boolean hasHttpsRedirect() {
    return schemeRewriteSpecifierCase_ == 4;
  }
  /**
   * <pre>
   * The scheme portion of the URL will be swapped with "https".
   * </pre>
   *
   * <code>bool https_redirect = 4;</code>
   * @return The httpsRedirect.
   */
  @java.lang.Override
  public boolean getHttpsRedirect() {
    if (schemeRewriteSpecifierCase_ == 4) {
      return (java.lang.Boolean) schemeRewriteSpecifier_;
    }
    return false;
  }

  public static final int SCHEME_REDIRECT_FIELD_NUMBER = 7;
  /**
   * <pre>
   * The scheme portion of the URL will be swapped with this value.
   * </pre>
   *
   * <code>string scheme_redirect = 7;</code>
   * @return Whether the schemeRedirect field is set.
   */
  public boolean hasSchemeRedirect() {
    return schemeRewriteSpecifierCase_ == 7;
  }
  /**
   * <pre>
   * The scheme portion of the URL will be swapped with this value.
   * </pre>
   *
   * <code>string scheme_redirect = 7;</code>
   * @return The schemeRedirect.
   */
  public java.lang.String getSchemeRedirect() {
    java.lang.Object ref = "";
    if (schemeRewriteSpecifierCase_ == 7) {
      ref = schemeRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (schemeRewriteSpecifierCase_ == 7) {
        schemeRewriteSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The scheme portion of the URL will be swapped with this value.
   * </pre>
   *
   * <code>string scheme_redirect = 7;</code>
   * @return The bytes for schemeRedirect.
   */
  public com.google.protobuf.ByteString
      getSchemeRedirectBytes() {
    java.lang.Object ref = "";
    if (schemeRewriteSpecifierCase_ == 7) {
      ref = schemeRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (schemeRewriteSpecifierCase_ == 7) {
        schemeRewriteSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HOST_REDIRECT_FIELD_NUMBER = 1;
  private volatile java.lang.Object hostRedirect_;
  /**
   * <pre>
   * The host portion of the URL will be swapped with this value.
   * </pre>
   *
   * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
   * @return The hostRedirect.
   */
  @java.lang.Override
  public java.lang.String getHostRedirect() {
    java.lang.Object ref = hostRedirect_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      hostRedirect_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The host portion of the URL will be swapped with this value.
   * </pre>
   *
   * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for hostRedirect.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHostRedirectBytes() {
    java.lang.Object ref = hostRedirect_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      hostRedirect_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PORT_REDIRECT_FIELD_NUMBER = 8;
  private int portRedirect_;
  /**
   * <pre>
   * The port value of the URL will be swapped with this value.
   * </pre>
   *
   * <code>uint32 port_redirect = 8;</code>
   * @return The portRedirect.
   */
  @java.lang.Override
  public int getPortRedirect() {
    return portRedirect_;
  }

  public static final int PATH_REDIRECT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The path portion of the URL will be swapped with this value.
   * Please note that query string in path_redirect will override the
   * request's query string and will not be stripped.
   * For example, let's say we have the following routes:
   * - match: { path: "/old-path-1" }
   *   redirect: { path_redirect: "/new-path-1" }
   * - match: { path: "/old-path-2" }
   *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
   * - match: { path: "/old-path-3" }
   *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
   * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
   * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
   * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
   * </pre>
   *
   * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the pathRedirect field is set.
   */
  public boolean hasPathRedirect() {
    return pathRewriteSpecifierCase_ == 2;
  }
  /**
   * <pre>
   * The path portion of the URL will be swapped with this value.
   * Please note that query string in path_redirect will override the
   * request's query string and will not be stripped.
   * For example, let's say we have the following routes:
   * - match: { path: "/old-path-1" }
   *   redirect: { path_redirect: "/new-path-1" }
   * - match: { path: "/old-path-2" }
   *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
   * - match: { path: "/old-path-3" }
   *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
   * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
   * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
   * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
   * </pre>
   *
   * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
   * @return The pathRedirect.
   */
  public java.lang.String getPathRedirect() {
    java.lang.Object ref = "";
    if (pathRewriteSpecifierCase_ == 2) {
      ref = pathRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (pathRewriteSpecifierCase_ == 2) {
        pathRewriteSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The path portion of the URL will be swapped with this value.
   * Please note that query string in path_redirect will override the
   * request's query string and will not be stripped.
   * For example, let's say we have the following routes:
   * - match: { path: "/old-path-1" }
   *   redirect: { path_redirect: "/new-path-1" }
   * - match: { path: "/old-path-2" }
   *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
   * - match: { path: "/old-path-3" }
   *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
   * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
   * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
   * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
   * </pre>
   *
   * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for pathRedirect.
   */
  public com.google.protobuf.ByteString
      getPathRedirectBytes() {
    java.lang.Object ref = "";
    if (pathRewriteSpecifierCase_ == 2) {
      ref = pathRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (pathRewriteSpecifierCase_ == 2) {
        pathRewriteSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PREFIX_REWRITE_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Indicates that during redirection, the matched prefix (or path)
   * should be swapped with this value. This option allows redirect URLs be dynamically created
   * based on the request.
   * .. attention::
   *   Pay attention to the use of trailing slashes as mentioned in
   *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
   * </pre>
   *
   * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the prefixRewrite field is set.
   */
  public boolean hasPrefixRewrite() {
    return pathRewriteSpecifierCase_ == 5;
  }
  /**
   * <pre>
   * Indicates that during redirection, the matched prefix (or path)
   * should be swapped with this value. This option allows redirect URLs be dynamically created
   * based on the request.
   * .. attention::
   *   Pay attention to the use of trailing slashes as mentioned in
   *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
   * </pre>
   *
   * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
   * @return The prefixRewrite.
   */
  public java.lang.String getPrefixRewrite() {
    java.lang.Object ref = "";
    if (pathRewriteSpecifierCase_ == 5) {
      ref = pathRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (pathRewriteSpecifierCase_ == 5) {
        pathRewriteSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Indicates that during redirection, the matched prefix (or path)
   * should be swapped with this value. This option allows redirect URLs be dynamically created
   * based on the request.
   * .. attention::
   *   Pay attention to the use of trailing slashes as mentioned in
   *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
   * </pre>
   *
   * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
   * @return The bytes for prefixRewrite.
   */
  public com.google.protobuf.ByteString
      getPrefixRewriteBytes() {
    java.lang.Object ref = "";
    if (pathRewriteSpecifierCase_ == 5) {
      ref = pathRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (pathRewriteSpecifierCase_ == 5) {
        pathRewriteSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REGEX_REWRITE_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Indicates that during redirect, portions of the path that match the
   * pattern should be rewritten, even allowing the substitution of capture
   * groups from the pattern into the new path as specified by the rewrite
   * substitution string. This is useful to allow application paths to be
   * rewritten in a way that is aware of segments with variable content like
   * identifiers.
   * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
   * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
   *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
   *   into ``/v1/api/instance/foo``.
   * * The pattern ``one`` paired with a substitution string of ``two`` would
   *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
   * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
   *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
   *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
   * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
   *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
   *   ``/aaa/yyy/bbb``.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
   * @return Whether the regexRewrite field is set.
   */
  @java.lang.Override
  public boolean hasRegexRewrite() {
    return pathRewriteSpecifierCase_ == 9;
  }
  /**
   * <pre>
   * Indicates that during redirect, portions of the path that match the
   * pattern should be rewritten, even allowing the substitution of capture
   * groups from the pattern into the new path as specified by the rewrite
   * substitution string. This is useful to allow application paths to be
   * rewritten in a way that is aware of segments with variable content like
   * identifiers.
   * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
   * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
   *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
   *   into ``/v1/api/instance/foo``.
   * * The pattern ``one`` paired with a substitution string of ``two`` would
   *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
   * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
   *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
   *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
   * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
   *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
   *   ``/aaa/yyy/bbb``.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
   * @return The regexRewrite.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute getRegexRewrite() {
    if (pathRewriteSpecifierCase_ == 9) {
       return (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_;
    }
    return io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
  }
  /**
   * <pre>
   * Indicates that during redirect, portions of the path that match the
   * pattern should be rewritten, even allowing the substitution of capture
   * groups from the pattern into the new path as specified by the rewrite
   * substitution string. This is useful to allow application paths to be
   * rewritten in a way that is aware of segments with variable content like
   * identifiers.
   * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
   * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
   *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
   *   into ``/v1/api/instance/foo``.
   * * The pattern ``one`` paired with a substitution string of ``two`` would
   *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
   * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
   *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
   *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
   * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
   *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
   *   ``/aaa/yyy/bbb``.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstituteOrBuilder getRegexRewriteOrBuilder() {
    if (pathRewriteSpecifierCase_ == 9) {
       return (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_;
    }
    return io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
  }

  public static final int RESPONSE_CODE_FIELD_NUMBER = 3;
  private int responseCode_;
  /**
   * <pre>
   * The HTTP status code to use in the redirect response. The default response
   * code is MOVED_PERMANENTLY (301).
   * </pre>
   *
   * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for responseCode.
   */
  @java.lang.Override public int getResponseCodeValue() {
    return responseCode_;
  }
  /**
   * <pre>
   * The HTTP status code to use in the redirect response. The default response
   * code is MOVED_PERMANENTLY (301).
   * </pre>
   *
   * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
   * @return The responseCode.
   */
  @java.lang.Override public io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode getResponseCode() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode result = io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode.valueOf(responseCode_);
    return result == null ? io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode.UNRECOGNIZED : result;
  }

  public static final int STRIP_QUERY_FIELD_NUMBER = 6;
  private boolean stripQuery_;
  /**
   * <pre>
   * Indicates that during redirection, the query portion of the URL will
   * be removed. Default value is false.
   * </pre>
   *
   * <code>bool strip_query = 6;</code>
   * @return The stripQuery.
   */
  @java.lang.Override
  public boolean getStripQuery() {
    return stripQuery_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getHostRedirectBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, hostRedirect_);
    }
    if (pathRewriteSpecifierCase_ == 2) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, pathRewriteSpecifier_);
    }
    if (responseCode_ != io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode.MOVED_PERMANENTLY.getNumber()) {
      output.writeEnum(3, responseCode_);
    }
    if (schemeRewriteSpecifierCase_ == 4) {
      output.writeBool(
          4, (boolean)((java.lang.Boolean) schemeRewriteSpecifier_));
    }
    if (pathRewriteSpecifierCase_ == 5) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, pathRewriteSpecifier_);
    }
    if (stripQuery_ != false) {
      output.writeBool(6, stripQuery_);
    }
    if (schemeRewriteSpecifierCase_ == 7) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, schemeRewriteSpecifier_);
    }
    if (portRedirect_ != 0) {
      output.writeUInt32(8, portRedirect_);
    }
    if (pathRewriteSpecifierCase_ == 9) {
      output.writeMessage(9, (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getHostRedirectBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, hostRedirect_);
    }
    if (pathRewriteSpecifierCase_ == 2) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, pathRewriteSpecifier_);
    }
    if (responseCode_ != io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode.MOVED_PERMANENTLY.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, responseCode_);
    }
    if (schemeRewriteSpecifierCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            4, (boolean)((java.lang.Boolean) schemeRewriteSpecifier_));
    }
    if (pathRewriteSpecifierCase_ == 5) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, pathRewriteSpecifier_);
    }
    if (stripQuery_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, stripQuery_);
    }
    if (schemeRewriteSpecifierCase_ == 7) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, schemeRewriteSpecifier_);
    }
    if (portRedirect_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(8, portRedirect_);
    }
    if (pathRewriteSpecifierCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.route.v3.RedirectAction)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.route.v3.RedirectAction other = (io.envoyproxy.envoy.config.route.v3.RedirectAction) obj;

    if (!getHostRedirect()
        .equals(other.getHostRedirect())) return false;
    if (getPortRedirect()
        != other.getPortRedirect()) return false;
    if (responseCode_ != other.responseCode_) return false;
    if (getStripQuery()
        != other.getStripQuery()) return false;
    if (!getSchemeRewriteSpecifierCase().equals(other.getSchemeRewriteSpecifierCase())) return false;
    switch (schemeRewriteSpecifierCase_) {
      case 4:
        if (getHttpsRedirect()
            != other.getHttpsRedirect()) return false;
        break;
      case 7:
        if (!getSchemeRedirect()
            .equals(other.getSchemeRedirect())) return false;
        break;
      case 0:
      default:
    }
    if (!getPathRewriteSpecifierCase().equals(other.getPathRewriteSpecifierCase())) return false;
    switch (pathRewriteSpecifierCase_) {
      case 2:
        if (!getPathRedirect()
            .equals(other.getPathRedirect())) return false;
        break;
      case 5:
        if (!getPrefixRewrite()
            .equals(other.getPrefixRewrite())) return false;
        break;
      case 9:
        if (!getRegexRewrite()
            .equals(other.getRegexRewrite())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HOST_REDIRECT_FIELD_NUMBER;
    hash = (53 * hash) + getHostRedirect().hashCode();
    hash = (37 * hash) + PORT_REDIRECT_FIELD_NUMBER;
    hash = (53 * hash) + getPortRedirect();
    hash = (37 * hash) + RESPONSE_CODE_FIELD_NUMBER;
    hash = (53 * hash) + responseCode_;
    hash = (37 * hash) + STRIP_QUERY_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getStripQuery());
    switch (schemeRewriteSpecifierCase_) {
      case 4:
        hash = (37 * hash) + HTTPS_REDIRECT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHttpsRedirect());
        break;
      case 7:
        hash = (37 * hash) + SCHEME_REDIRECT_FIELD_NUMBER;
        hash = (53 * hash) + getSchemeRedirect().hashCode();
        break;
      case 0:
      default:
    }
    switch (pathRewriteSpecifierCase_) {
      case 2:
        hash = (37 * hash) + PATH_REDIRECT_FIELD_NUMBER;
        hash = (53 * hash) + getPathRedirect().hashCode();
        break;
      case 5:
        hash = (37 * hash) + PREFIX_REWRITE_FIELD_NUMBER;
        hash = (53 * hash) + getPrefixRewrite().hashCode();
        break;
      case 9:
        hash = (37 * hash) + REGEX_REWRITE_FIELD_NUMBER;
        hash = (53 * hash) + getRegexRewrite().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.RedirectAction parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.route.v3.RedirectAction prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 10]
   * </pre>
   *
   * Protobuf type {@code envoy.config.route.v3.RedirectAction}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.route.v3.RedirectAction)
      io.envoyproxy.envoy.config.route.v3.RedirectActionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RedirectAction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RedirectAction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.route.v3.RedirectAction.class, io.envoyproxy.envoy.config.route.v3.RedirectAction.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.route.v3.RedirectAction.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      hostRedirect_ = "";

      portRedirect_ = 0;

      responseCode_ = 0;

      stripQuery_ = false;

      schemeRewriteSpecifierCase_ = 0;
      schemeRewriteSpecifier_ = null;
      pathRewriteSpecifierCase_ = 0;
      pathRewriteSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RedirectAction_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RedirectAction getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.route.v3.RedirectAction.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RedirectAction build() {
      io.envoyproxy.envoy.config.route.v3.RedirectAction result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RedirectAction buildPartial() {
      io.envoyproxy.envoy.config.route.v3.RedirectAction result = new io.envoyproxy.envoy.config.route.v3.RedirectAction(this);
      if (schemeRewriteSpecifierCase_ == 4) {
        result.schemeRewriteSpecifier_ = schemeRewriteSpecifier_;
      }
      if (schemeRewriteSpecifierCase_ == 7) {
        result.schemeRewriteSpecifier_ = schemeRewriteSpecifier_;
      }
      result.hostRedirect_ = hostRedirect_;
      result.portRedirect_ = portRedirect_;
      if (pathRewriteSpecifierCase_ == 2) {
        result.pathRewriteSpecifier_ = pathRewriteSpecifier_;
      }
      if (pathRewriteSpecifierCase_ == 5) {
        result.pathRewriteSpecifier_ = pathRewriteSpecifier_;
      }
      if (pathRewriteSpecifierCase_ == 9) {
        if (regexRewriteBuilder_ == null) {
          result.pathRewriteSpecifier_ = pathRewriteSpecifier_;
        } else {
          result.pathRewriteSpecifier_ = regexRewriteBuilder_.build();
        }
      }
      result.responseCode_ = responseCode_;
      result.stripQuery_ = stripQuery_;
      result.schemeRewriteSpecifierCase_ = schemeRewriteSpecifierCase_;
      result.pathRewriteSpecifierCase_ = pathRewriteSpecifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.route.v3.RedirectAction) {
        return mergeFrom((io.envoyproxy.envoy.config.route.v3.RedirectAction)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.route.v3.RedirectAction other) {
      if (other == io.envoyproxy.envoy.config.route.v3.RedirectAction.getDefaultInstance()) return this;
      if (!other.getHostRedirect().isEmpty()) {
        hostRedirect_ = other.hostRedirect_;
        onChanged();
      }
      if (other.getPortRedirect() != 0) {
        setPortRedirect(other.getPortRedirect());
      }
      if (other.responseCode_ != 0) {
        setResponseCodeValue(other.getResponseCodeValue());
      }
      if (other.getStripQuery() != false) {
        setStripQuery(other.getStripQuery());
      }
      switch (other.getSchemeRewriteSpecifierCase()) {
        case HTTPS_REDIRECT: {
          setHttpsRedirect(other.getHttpsRedirect());
          break;
        }
        case SCHEME_REDIRECT: {
          schemeRewriteSpecifierCase_ = 7;
          schemeRewriteSpecifier_ = other.schemeRewriteSpecifier_;
          onChanged();
          break;
        }
        case SCHEMEREWRITESPECIFIER_NOT_SET: {
          break;
        }
      }
      switch (other.getPathRewriteSpecifierCase()) {
        case PATH_REDIRECT: {
          pathRewriteSpecifierCase_ = 2;
          pathRewriteSpecifier_ = other.pathRewriteSpecifier_;
          onChanged();
          break;
        }
        case PREFIX_REWRITE: {
          pathRewriteSpecifierCase_ = 5;
          pathRewriteSpecifier_ = other.pathRewriteSpecifier_;
          onChanged();
          break;
        }
        case REGEX_REWRITE: {
          mergeRegexRewrite(other.getRegexRewrite());
          break;
        }
        case PATHREWRITESPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.route.v3.RedirectAction parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.route.v3.RedirectAction) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int schemeRewriteSpecifierCase_ = 0;
    private java.lang.Object schemeRewriteSpecifier_;
    public SchemeRewriteSpecifierCase
        getSchemeRewriteSpecifierCase() {
      return SchemeRewriteSpecifierCase.forNumber(
          schemeRewriteSpecifierCase_);
    }

    public Builder clearSchemeRewriteSpecifier() {
      schemeRewriteSpecifierCase_ = 0;
      schemeRewriteSpecifier_ = null;
      onChanged();
      return this;
    }

    private int pathRewriteSpecifierCase_ = 0;
    private java.lang.Object pathRewriteSpecifier_;
    public PathRewriteSpecifierCase
        getPathRewriteSpecifierCase() {
      return PathRewriteSpecifierCase.forNumber(
          pathRewriteSpecifierCase_);
    }

    public Builder clearPathRewriteSpecifier() {
      pathRewriteSpecifierCase_ = 0;
      pathRewriteSpecifier_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     * The scheme portion of the URL will be swapped with "https".
     * </pre>
     *
     * <code>bool https_redirect = 4;</code>
     * @return Whether the httpsRedirect field is set.
     */
    public boolean hasHttpsRedirect() {
      return schemeRewriteSpecifierCase_ == 4;
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with "https".
     * </pre>
     *
     * <code>bool https_redirect = 4;</code>
     * @return The httpsRedirect.
     */
    public boolean getHttpsRedirect() {
      if (schemeRewriteSpecifierCase_ == 4) {
        return (java.lang.Boolean) schemeRewriteSpecifier_;
      }
      return false;
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with "https".
     * </pre>
     *
     * <code>bool https_redirect = 4;</code>
     * @param value The httpsRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setHttpsRedirect(boolean value) {
      schemeRewriteSpecifierCase_ = 4;
      schemeRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with "https".
     * </pre>
     *
     * <code>bool https_redirect = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearHttpsRedirect() {
      if (schemeRewriteSpecifierCase_ == 4) {
        schemeRewriteSpecifierCase_ = 0;
        schemeRewriteSpecifier_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * The scheme portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string scheme_redirect = 7;</code>
     * @return Whether the schemeRedirect field is set.
     */
    @java.lang.Override
    public boolean hasSchemeRedirect() {
      return schemeRewriteSpecifierCase_ == 7;
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string scheme_redirect = 7;</code>
     * @return The schemeRedirect.
     */
    @java.lang.Override
    public java.lang.String getSchemeRedirect() {
      java.lang.Object ref = "";
      if (schemeRewriteSpecifierCase_ == 7) {
        ref = schemeRewriteSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (schemeRewriteSpecifierCase_ == 7) {
          schemeRewriteSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string scheme_redirect = 7;</code>
     * @return The bytes for schemeRedirect.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSchemeRedirectBytes() {
      java.lang.Object ref = "";
      if (schemeRewriteSpecifierCase_ == 7) {
        ref = schemeRewriteSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (schemeRewriteSpecifierCase_ == 7) {
          schemeRewriteSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string scheme_redirect = 7;</code>
     * @param value The schemeRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setSchemeRedirect(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  schemeRewriteSpecifierCase_ = 7;
      schemeRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string scheme_redirect = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearSchemeRedirect() {
      if (schemeRewriteSpecifierCase_ == 7) {
        schemeRewriteSpecifierCase_ = 0;
        schemeRewriteSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The scheme portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string scheme_redirect = 7;</code>
     * @param value The bytes for schemeRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setSchemeRedirectBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      schemeRewriteSpecifierCase_ = 7;
      schemeRewriteSpecifier_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object hostRedirect_ = "";
    /**
     * <pre>
     * The host portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
     * @return The hostRedirect.
     */
    public java.lang.String getHostRedirect() {
      java.lang.Object ref = hostRedirect_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        hostRedirect_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The host portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for hostRedirect.
     */
    public com.google.protobuf.ByteString
        getHostRedirectBytes() {
      java.lang.Object ref = hostRedirect_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hostRedirect_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The host portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
     * @param value The hostRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setHostRedirect(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hostRedirect_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The host portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearHostRedirect() {
      
      hostRedirect_ = getDefaultInstance().getHostRedirect();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The host portion of the URL will be swapped with this value.
     * </pre>
     *
     * <code>string host_redirect = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for hostRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setHostRedirectBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      hostRedirect_ = value;
      onChanged();
      return this;
    }

    private int portRedirect_ ;
    /**
     * <pre>
     * The port value of the URL will be swapped with this value.
     * </pre>
     *
     * <code>uint32 port_redirect = 8;</code>
     * @return The portRedirect.
     */
    @java.lang.Override
    public int getPortRedirect() {
      return portRedirect_;
    }
    /**
     * <pre>
     * The port value of the URL will be swapped with this value.
     * </pre>
     *
     * <code>uint32 port_redirect = 8;</code>
     * @param value The portRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setPortRedirect(int value) {
      
      portRedirect_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The port value of the URL will be swapped with this value.
     * </pre>
     *
     * <code>uint32 port_redirect = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearPortRedirect() {
      
      portRedirect_ = 0;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * The path portion of the URL will be swapped with this value.
     * Please note that query string in path_redirect will override the
     * request's query string and will not be stripped.
     * For example, let's say we have the following routes:
     * - match: { path: "/old-path-1" }
     *   redirect: { path_redirect: "/new-path-1" }
     * - match: { path: "/old-path-2" }
     *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
     * - match: { path: "/old-path-3" }
     *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
     * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
     * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
     * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
     * </pre>
     *
     * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the pathRedirect field is set.
     */
    @java.lang.Override
    public boolean hasPathRedirect() {
      return pathRewriteSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * The path portion of the URL will be swapped with this value.
     * Please note that query string in path_redirect will override the
     * request's query string and will not be stripped.
     * For example, let's say we have the following routes:
     * - match: { path: "/old-path-1" }
     *   redirect: { path_redirect: "/new-path-1" }
     * - match: { path: "/old-path-2" }
     *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
     * - match: { path: "/old-path-3" }
     *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
     * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
     * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
     * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
     * </pre>
     *
     * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
     * @return The pathRedirect.
     */
    @java.lang.Override
    public java.lang.String getPathRedirect() {
      java.lang.Object ref = "";
      if (pathRewriteSpecifierCase_ == 2) {
        ref = pathRewriteSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (pathRewriteSpecifierCase_ == 2) {
          pathRewriteSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The path portion of the URL will be swapped with this value.
     * Please note that query string in path_redirect will override the
     * request's query string and will not be stripped.
     * For example, let's say we have the following routes:
     * - match: { path: "/old-path-1" }
     *   redirect: { path_redirect: "/new-path-1" }
     * - match: { path: "/old-path-2" }
     *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
     * - match: { path: "/old-path-3" }
     *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
     * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
     * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
     * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
     * </pre>
     *
     * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
     * @return The bytes for pathRedirect.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathRedirectBytes() {
      java.lang.Object ref = "";
      if (pathRewriteSpecifierCase_ == 2) {
        ref = pathRewriteSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (pathRewriteSpecifierCase_ == 2) {
          pathRewriteSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The path portion of the URL will be swapped with this value.
     * Please note that query string in path_redirect will override the
     * request's query string and will not be stripped.
     * For example, let's say we have the following routes:
     * - match: { path: "/old-path-1" }
     *   redirect: { path_redirect: "/new-path-1" }
     * - match: { path: "/old-path-2" }
     *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
     * - match: { path: "/old-path-3" }
     *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
     * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
     * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
     * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
     * </pre>
     *
     * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
     * @param value The pathRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setPathRedirect(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  pathRewriteSpecifierCase_ = 2;
      pathRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The path portion of the URL will be swapped with this value.
     * Please note that query string in path_redirect will override the
     * request's query string and will not be stripped.
     * For example, let's say we have the following routes:
     * - match: { path: "/old-path-1" }
     *   redirect: { path_redirect: "/new-path-1" }
     * - match: { path: "/old-path-2" }
     *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
     * - match: { path: "/old-path-3" }
     *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
     * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
     * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
     * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
     * </pre>
     *
     * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPathRedirect() {
      if (pathRewriteSpecifierCase_ == 2) {
        pathRewriteSpecifierCase_ = 0;
        pathRewriteSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The path portion of the URL will be swapped with this value.
     * Please note that query string in path_redirect will override the
     * request's query string and will not be stripped.
     * For example, let's say we have the following routes:
     * - match: { path: "/old-path-1" }
     *   redirect: { path_redirect: "/new-path-1" }
     * - match: { path: "/old-path-2" }
     *   redirect: { path_redirect: "/new-path-2", strip-query: "true" }
     * - match: { path: "/old-path-3" }
     *   redirect: { path_redirect: "/new-path-3?foo=1", strip_query: "true" }
     * 1. if request uri is "/old-path-1?bar=1", users will be redirected to "/new-path-1?bar=1"
     * 2. if request uri is "/old-path-2?bar=1", users will be redirected to "/new-path-2"
     * 3. if request uri is "/old-path-3?bar=1", users will be redirected to "/new-path-3?foo=1"
     * </pre>
     *
     * <code>string path_redirect = 2 [(.validate.rules) = { ... }</code>
     * @param value The bytes for pathRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setPathRedirectBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      pathRewriteSpecifierCase_ = 2;
      pathRewriteSpecifier_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Indicates that during redirection, the matched prefix (or path)
     * should be swapped with this value. This option allows redirect URLs be dynamically created
     * based on the request.
     * .. attention::
     *   Pay attention to the use of trailing slashes as mentioned in
     *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
     * </pre>
     *
     * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the prefixRewrite field is set.
     */
    @java.lang.Override
    public boolean hasPrefixRewrite() {
      return pathRewriteSpecifierCase_ == 5;
    }
    /**
     * <pre>
     * Indicates that during redirection, the matched prefix (or path)
     * should be swapped with this value. This option allows redirect URLs be dynamically created
     * based on the request.
     * .. attention::
     *   Pay attention to the use of trailing slashes as mentioned in
     *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
     * </pre>
     *
     * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
     * @return The prefixRewrite.
     */
    @java.lang.Override
    public java.lang.String getPrefixRewrite() {
      java.lang.Object ref = "";
      if (pathRewriteSpecifierCase_ == 5) {
        ref = pathRewriteSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (pathRewriteSpecifierCase_ == 5) {
          pathRewriteSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Indicates that during redirection, the matched prefix (or path)
     * should be swapped with this value. This option allows redirect URLs be dynamically created
     * based on the request.
     * .. attention::
     *   Pay attention to the use of trailing slashes as mentioned in
     *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
     * </pre>
     *
     * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
     * @return The bytes for prefixRewrite.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPrefixRewriteBytes() {
      java.lang.Object ref = "";
      if (pathRewriteSpecifierCase_ == 5) {
        ref = pathRewriteSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (pathRewriteSpecifierCase_ == 5) {
          pathRewriteSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Indicates that during redirection, the matched prefix (or path)
     * should be swapped with this value. This option allows redirect URLs be dynamically created
     * based on the request.
     * .. attention::
     *   Pay attention to the use of trailing slashes as mentioned in
     *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
     * </pre>
     *
     * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
     * @param value The prefixRewrite to set.
     * @return This builder for chaining.
     */
    public Builder setPrefixRewrite(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  pathRewriteSpecifierCase_ = 5;
      pathRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirection, the matched prefix (or path)
     * should be swapped with this value. This option allows redirect URLs be dynamically created
     * based on the request.
     * .. attention::
     *   Pay attention to the use of trailing slashes as mentioned in
     *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
     * </pre>
     *
     * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPrefixRewrite() {
      if (pathRewriteSpecifierCase_ == 5) {
        pathRewriteSpecifierCase_ = 0;
        pathRewriteSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirection, the matched prefix (or path)
     * should be swapped with this value. This option allows redirect URLs be dynamically created
     * based on the request.
     * .. attention::
     *   Pay attention to the use of trailing slashes as mentioned in
     *   :ref:`RouteAction's prefix_rewrite &lt;envoy_api_field_config.route.v3.RouteAction.prefix_rewrite&gt;`.
     * </pre>
     *
     * <code>string prefix_rewrite = 5 [(.validate.rules) = { ... }</code>
     * @param value The bytes for prefixRewrite to set.
     * @return This builder for chaining.
     */
    public Builder setPrefixRewriteBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      pathRewriteSpecifierCase_ = 5;
      pathRewriteSpecifier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstituteOrBuilder> regexRewriteBuilder_;
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     * @return Whether the regexRewrite field is set.
     */
    @java.lang.Override
    public boolean hasRegexRewrite() {
      return pathRewriteSpecifierCase_ == 9;
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     * @return The regexRewrite.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute getRegexRewrite() {
      if (regexRewriteBuilder_ == null) {
        if (pathRewriteSpecifierCase_ == 9) {
          return (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_;
        }
        return io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
      } else {
        if (pathRewriteSpecifierCase_ == 9) {
          return regexRewriteBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    public Builder setRegexRewrite(io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute value) {
      if (regexRewriteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pathRewriteSpecifier_ = value;
        onChanged();
      } else {
        regexRewriteBuilder_.setMessage(value);
      }
      pathRewriteSpecifierCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    public Builder setRegexRewrite(
        io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder builderForValue) {
      if (regexRewriteBuilder_ == null) {
        pathRewriteSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        regexRewriteBuilder_.setMessage(builderForValue.build());
      }
      pathRewriteSpecifierCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    public Builder mergeRegexRewrite(io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute value) {
      if (regexRewriteBuilder_ == null) {
        if (pathRewriteSpecifierCase_ == 9 &&
            pathRewriteSpecifier_ != io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance()) {
          pathRewriteSpecifier_ = io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.newBuilder((io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          pathRewriteSpecifier_ = value;
        }
        onChanged();
      } else {
        if (pathRewriteSpecifierCase_ == 9) {
          regexRewriteBuilder_.mergeFrom(value);
        }
        regexRewriteBuilder_.setMessage(value);
      }
      pathRewriteSpecifierCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    public Builder clearRegexRewrite() {
      if (regexRewriteBuilder_ == null) {
        if (pathRewriteSpecifierCase_ == 9) {
          pathRewriteSpecifierCase_ = 0;
          pathRewriteSpecifier_ = null;
          onChanged();
        }
      } else {
        if (pathRewriteSpecifierCase_ == 9) {
          pathRewriteSpecifierCase_ = 0;
          pathRewriteSpecifier_ = null;
        }
        regexRewriteBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder getRegexRewriteBuilder() {
      return getRegexRewriteFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstituteOrBuilder getRegexRewriteOrBuilder() {
      if ((pathRewriteSpecifierCase_ == 9) && (regexRewriteBuilder_ != null)) {
        return regexRewriteBuilder_.getMessageOrBuilder();
      } else {
        if (pathRewriteSpecifierCase_ == 9) {
          return (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_;
        }
        return io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Indicates that during redirect, portions of the path that match the
     * pattern should be rewritten, even allowing the substitution of capture
     * groups from the pattern into the new path as specified by the rewrite
     * substitution string. This is useful to allow application paths to be
     * rewritten in a way that is aware of segments with variable content like
     * identifiers.
     * Examples using Google's `RE2 &lt;https://github.com/google/re2&gt;`_ engine:
     * * The path pattern ``^/service/([^/]+)(/.*)$`` paired with a substitution
     *   string of ``&#92;2/instance/&#92;1`` would transform ``/service/foo/v1/api``
     *   into ``/v1/api/instance/foo``.
     * * The pattern ``one`` paired with a substitution string of ``two`` would
     *   transform ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/two/zzz``.
     * * The pattern ``^(.*?)one(.*)$`` paired with a substitution string of
     *   ``&#92;1two&#92;2`` would replace only the first occurrence of ``one``,
     *   transforming path ``/xxx/one/yyy/one/zzz`` into ``/xxx/two/yyy/one/zzz``.
     * * The pattern ``(?i)/xxx/`` paired with a substitution string of ``/yyy/``
     *   would do a case-insensitive match and transform path ``/aaa/XxX/bbb`` to
     *   ``/aaa/yyy/bbb``.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatchAndSubstitute regex_rewrite = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstituteOrBuilder> 
        getRegexRewriteFieldBuilder() {
      if (regexRewriteBuilder_ == null) {
        if (!(pathRewriteSpecifierCase_ == 9)) {
          pathRewriteSpecifier_ = io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
        }
        regexRewriteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstituteOrBuilder>(
                (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) pathRewriteSpecifier_,
                getParentForChildren(),
                isClean());
        pathRewriteSpecifier_ = null;
      }
      pathRewriteSpecifierCase_ = 9;
      onChanged();;
      return regexRewriteBuilder_;
    }

    private int responseCode_ = 0;
    /**
     * <pre>
     * The HTTP status code to use in the redirect response. The default response
     * code is MOVED_PERMANENTLY (301).
     * </pre>
     *
     * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for responseCode.
     */
    @java.lang.Override public int getResponseCodeValue() {
      return responseCode_;
    }
    /**
     * <pre>
     * The HTTP status code to use in the redirect response. The default response
     * code is MOVED_PERMANENTLY (301).
     * </pre>
     *
     * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for responseCode to set.
     * @return This builder for chaining.
     */
    public Builder setResponseCodeValue(int value) {
      
      responseCode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The HTTP status code to use in the redirect response. The default response
     * code is MOVED_PERMANENTLY (301).
     * </pre>
     *
     * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
     * @return The responseCode.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode getResponseCode() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode result = io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode.valueOf(responseCode_);
      return result == null ? io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The HTTP status code to use in the redirect response. The default response
     * code is MOVED_PERMANENTLY (301).
     * </pre>
     *
     * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
     * @param value The responseCode to set.
     * @return This builder for chaining.
     */
    public Builder setResponseCode(io.envoyproxy.envoy.config.route.v3.RedirectAction.RedirectResponseCode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      responseCode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The HTTP status code to use in the redirect response. The default response
     * code is MOVED_PERMANENTLY (301).
     * </pre>
     *
     * <code>.envoy.config.route.v3.RedirectAction.RedirectResponseCode response_code = 3 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearResponseCode() {
      
      responseCode_ = 0;
      onChanged();
      return this;
    }

    private boolean stripQuery_ ;
    /**
     * <pre>
     * Indicates that during redirection, the query portion of the URL will
     * be removed. Default value is false.
     * </pre>
     *
     * <code>bool strip_query = 6;</code>
     * @return The stripQuery.
     */
    @java.lang.Override
    public boolean getStripQuery() {
      return stripQuery_;
    }
    /**
     * <pre>
     * Indicates that during redirection, the query portion of the URL will
     * be removed. Default value is false.
     * </pre>
     *
     * <code>bool strip_query = 6;</code>
     * @param value The stripQuery to set.
     * @return This builder for chaining.
     */
    public Builder setStripQuery(boolean value) {
      
      stripQuery_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates that during redirection, the query portion of the URL will
     * be removed. Default value is false.
     * </pre>
     *
     * <code>bool strip_query = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearStripQuery() {
      
      stripQuery_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.route.v3.RedirectAction)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.route.v3.RedirectAction)
  private static final io.envoyproxy.envoy.config.route.v3.RedirectAction DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.route.v3.RedirectAction();
  }

  public static io.envoyproxy.envoy.config.route.v3.RedirectAction getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RedirectAction>
      PARSER = new com.google.protobuf.AbstractParser<RedirectAction>() {
    @java.lang.Override
    public RedirectAction parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RedirectAction(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RedirectAction> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RedirectAction> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RedirectAction getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

