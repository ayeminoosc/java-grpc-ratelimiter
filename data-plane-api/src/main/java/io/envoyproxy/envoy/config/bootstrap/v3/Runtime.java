// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/bootstrap/v3/bootstrap.proto

package io.envoyproxy.envoy.config.bootstrap.v3;

/**
 * <pre>
 * Runtime :ref:`configuration overview &lt;config_runtime&gt;` (deprecated).
 * </pre>
 *
 * Protobuf type {@code envoy.config.bootstrap.v3.Runtime}
 */
public final class Runtime extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.bootstrap.v3.Runtime)
    RuntimeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Runtime.newBuilder() to construct.
  private Runtime(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Runtime() {
    symlinkRoot_ = "";
    subdirectory_ = "";
    overrideSubdirectory_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Runtime();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Runtime(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            symlinkRoot_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            subdirectory_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            overrideSubdirectory_ = s;
            break;
          }
          case 34: {
            com.google.protobuf.Struct.Builder subBuilder = null;
            if (base_ != null) {
              subBuilder = base_.toBuilder();
            }
            base_ = input.readMessage(com.google.protobuf.Struct.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(base_);
              base_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.bootstrap.v3.BootstrapProto.internal_static_envoy_config_bootstrap_v3_Runtime_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.bootstrap.v3.BootstrapProto.internal_static_envoy_config_bootstrap_v3_Runtime_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.bootstrap.v3.Runtime.class, io.envoyproxy.envoy.config.bootstrap.v3.Runtime.Builder.class);
  }

  public static final int SYMLINK_ROOT_FIELD_NUMBER = 1;
  private volatile java.lang.Object symlinkRoot_;
  /**
   * <pre>
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link. Envoy
   * will watch the location for changes and reload the file system tree when
   * they happen. If this parameter is not set, there will be no disk based
   * runtime.
   * </pre>
   *
   * <code>string symlink_root = 1;</code>
   * @return The symlinkRoot.
   */
  @java.lang.Override
  public java.lang.String getSymlinkRoot() {
    java.lang.Object ref = symlinkRoot_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      symlinkRoot_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link. Envoy
   * will watch the location for changes and reload the file system tree when
   * they happen. If this parameter is not set, there will be no disk based
   * runtime.
   * </pre>
   *
   * <code>string symlink_root = 1;</code>
   * @return The bytes for symlinkRoot.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSymlinkRootBytes() {
    java.lang.Object ref = symlinkRoot_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      symlinkRoot_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SUBDIRECTORY_FIELD_NUMBER = 2;
  private volatile java.lang.Object subdirectory_;
  /**
   * <pre>
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   * </pre>
   *
   * <code>string subdirectory = 2;</code>
   * @return The subdirectory.
   */
  @java.lang.Override
  public java.lang.String getSubdirectory() {
    java.lang.Object ref = subdirectory_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      subdirectory_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   * </pre>
   *
   * <code>string subdirectory = 2;</code>
   * @return The bytes for subdirectory.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSubdirectoryBytes() {
    java.lang.Object ref = subdirectory_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      subdirectory_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OVERRIDE_SUBDIRECTORY_FIELD_NUMBER = 3;
  private volatile java.lang.Object overrideSubdirectory_;
  /**
   * <pre>
   * Specifies an optional subdirectory to load within the root directory. If
   * specified and the directory exists, configuration values within this
   * directory will override those found in the primary subdirectory. This is
   * useful when Envoy is deployed across many different types of servers.
   * Sometimes it is useful to have a per service cluster directory for runtime
   * configuration. See below for exactly how the override directory is used.
   * </pre>
   *
   * <code>string override_subdirectory = 3;</code>
   * @return The overrideSubdirectory.
   */
  @java.lang.Override
  public java.lang.String getOverrideSubdirectory() {
    java.lang.Object ref = overrideSubdirectory_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      overrideSubdirectory_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies an optional subdirectory to load within the root directory. If
   * specified and the directory exists, configuration values within this
   * directory will override those found in the primary subdirectory. This is
   * useful when Envoy is deployed across many different types of servers.
   * Sometimes it is useful to have a per service cluster directory for runtime
   * configuration. See below for exactly how the override directory is used.
   * </pre>
   *
   * <code>string override_subdirectory = 3;</code>
   * @return The bytes for overrideSubdirectory.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOverrideSubdirectoryBytes() {
    java.lang.Object ref = overrideSubdirectory_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      overrideSubdirectory_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BASE_FIELD_NUMBER = 4;
  private com.google.protobuf.Struct base_;
  /**
   * <pre>
   * Static base runtime. This will be :ref:`overridden
   * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding &lt;config_runtime_proto_json&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Struct base = 4;</code>
   * @return Whether the base field is set.
   */
  @java.lang.Override
  public boolean hasBase() {
    return base_ != null;
  }
  /**
   * <pre>
   * Static base runtime. This will be :ref:`overridden
   * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding &lt;config_runtime_proto_json&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Struct base = 4;</code>
   * @return The base.
   */
  @java.lang.Override
  public com.google.protobuf.Struct getBase() {
    return base_ == null ? com.google.protobuf.Struct.getDefaultInstance() : base_;
  }
  /**
   * <pre>
   * Static base runtime. This will be :ref:`overridden
   * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding &lt;config_runtime_proto_json&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Struct base = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.StructOrBuilder getBaseOrBuilder() {
    return getBase();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getSymlinkRootBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, symlinkRoot_);
    }
    if (!getSubdirectoryBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, subdirectory_);
    }
    if (!getOverrideSubdirectoryBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, overrideSubdirectory_);
    }
    if (base_ != null) {
      output.writeMessage(4, getBase());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getSymlinkRootBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, symlinkRoot_);
    }
    if (!getSubdirectoryBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, subdirectory_);
    }
    if (!getOverrideSubdirectoryBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, overrideSubdirectory_);
    }
    if (base_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getBase());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.bootstrap.v3.Runtime)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.bootstrap.v3.Runtime other = (io.envoyproxy.envoy.config.bootstrap.v3.Runtime) obj;

    if (!getSymlinkRoot()
        .equals(other.getSymlinkRoot())) return false;
    if (!getSubdirectory()
        .equals(other.getSubdirectory())) return false;
    if (!getOverrideSubdirectory()
        .equals(other.getOverrideSubdirectory())) return false;
    if (hasBase() != other.hasBase()) return false;
    if (hasBase()) {
      if (!getBase()
          .equals(other.getBase())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SYMLINK_ROOT_FIELD_NUMBER;
    hash = (53 * hash) + getSymlinkRoot().hashCode();
    hash = (37 * hash) + SUBDIRECTORY_FIELD_NUMBER;
    hash = (53 * hash) + getSubdirectory().hashCode();
    hash = (37 * hash) + OVERRIDE_SUBDIRECTORY_FIELD_NUMBER;
    hash = (53 * hash) + getOverrideSubdirectory().hashCode();
    if (hasBase()) {
      hash = (37 * hash) + BASE_FIELD_NUMBER;
      hash = (53 * hash) + getBase().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.bootstrap.v3.Runtime prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Runtime :ref:`configuration overview &lt;config_runtime&gt;` (deprecated).
   * </pre>
   *
   * Protobuf type {@code envoy.config.bootstrap.v3.Runtime}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.bootstrap.v3.Runtime)
      io.envoyproxy.envoy.config.bootstrap.v3.RuntimeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.bootstrap.v3.BootstrapProto.internal_static_envoy_config_bootstrap_v3_Runtime_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.bootstrap.v3.BootstrapProto.internal_static_envoy_config_bootstrap_v3_Runtime_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.bootstrap.v3.Runtime.class, io.envoyproxy.envoy.config.bootstrap.v3.Runtime.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.bootstrap.v3.Runtime.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      symlinkRoot_ = "";

      subdirectory_ = "";

      overrideSubdirectory_ = "";

      if (baseBuilder_ == null) {
        base_ = null;
      } else {
        base_ = null;
        baseBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.bootstrap.v3.BootstrapProto.internal_static_envoy_config_bootstrap_v3_Runtime_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.bootstrap.v3.Runtime getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.bootstrap.v3.Runtime.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.bootstrap.v3.Runtime build() {
      io.envoyproxy.envoy.config.bootstrap.v3.Runtime result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.bootstrap.v3.Runtime buildPartial() {
      io.envoyproxy.envoy.config.bootstrap.v3.Runtime result = new io.envoyproxy.envoy.config.bootstrap.v3.Runtime(this);
      result.symlinkRoot_ = symlinkRoot_;
      result.subdirectory_ = subdirectory_;
      result.overrideSubdirectory_ = overrideSubdirectory_;
      if (baseBuilder_ == null) {
        result.base_ = base_;
      } else {
        result.base_ = baseBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.bootstrap.v3.Runtime) {
        return mergeFrom((io.envoyproxy.envoy.config.bootstrap.v3.Runtime)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.bootstrap.v3.Runtime other) {
      if (other == io.envoyproxy.envoy.config.bootstrap.v3.Runtime.getDefaultInstance()) return this;
      if (!other.getSymlinkRoot().isEmpty()) {
        symlinkRoot_ = other.symlinkRoot_;
        onChanged();
      }
      if (!other.getSubdirectory().isEmpty()) {
        subdirectory_ = other.subdirectory_;
        onChanged();
      }
      if (!other.getOverrideSubdirectory().isEmpty()) {
        overrideSubdirectory_ = other.overrideSubdirectory_;
        onChanged();
      }
      if (other.hasBase()) {
        mergeBase(other.getBase());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.bootstrap.v3.Runtime parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.bootstrap.v3.Runtime) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object symlinkRoot_ = "";
    /**
     * <pre>
     * The implementation assumes that the file system tree is accessed via a
     * symbolic link. An atomic link swap is used when a new tree should be
     * switched to. This parameter specifies the path to the symbolic link. Envoy
     * will watch the location for changes and reload the file system tree when
     * they happen. If this parameter is not set, there will be no disk based
     * runtime.
     * </pre>
     *
     * <code>string symlink_root = 1;</code>
     * @return The symlinkRoot.
     */
    public java.lang.String getSymlinkRoot() {
      java.lang.Object ref = symlinkRoot_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        symlinkRoot_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The implementation assumes that the file system tree is accessed via a
     * symbolic link. An atomic link swap is used when a new tree should be
     * switched to. This parameter specifies the path to the symbolic link. Envoy
     * will watch the location for changes and reload the file system tree when
     * they happen. If this parameter is not set, there will be no disk based
     * runtime.
     * </pre>
     *
     * <code>string symlink_root = 1;</code>
     * @return The bytes for symlinkRoot.
     */
    public com.google.protobuf.ByteString
        getSymlinkRootBytes() {
      java.lang.Object ref = symlinkRoot_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        symlinkRoot_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The implementation assumes that the file system tree is accessed via a
     * symbolic link. An atomic link swap is used when a new tree should be
     * switched to. This parameter specifies the path to the symbolic link. Envoy
     * will watch the location for changes and reload the file system tree when
     * they happen. If this parameter is not set, there will be no disk based
     * runtime.
     * </pre>
     *
     * <code>string symlink_root = 1;</code>
     * @param value The symlinkRoot to set.
     * @return This builder for chaining.
     */
    public Builder setSymlinkRoot(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      symlinkRoot_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The implementation assumes that the file system tree is accessed via a
     * symbolic link. An atomic link swap is used when a new tree should be
     * switched to. This parameter specifies the path to the symbolic link. Envoy
     * will watch the location for changes and reload the file system tree when
     * they happen. If this parameter is not set, there will be no disk based
     * runtime.
     * </pre>
     *
     * <code>string symlink_root = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSymlinkRoot() {
      
      symlinkRoot_ = getDefaultInstance().getSymlinkRoot();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The implementation assumes that the file system tree is accessed via a
     * symbolic link. An atomic link swap is used when a new tree should be
     * switched to. This parameter specifies the path to the symbolic link. Envoy
     * will watch the location for changes and reload the file system tree when
     * they happen. If this parameter is not set, there will be no disk based
     * runtime.
     * </pre>
     *
     * <code>string symlink_root = 1;</code>
     * @param value The bytes for symlinkRoot to set.
     * @return This builder for chaining.
     */
    public Builder setSymlinkRootBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      symlinkRoot_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object subdirectory_ = "";
    /**
     * <pre>
     * Specifies the subdirectory to load within the root directory. This is
     * useful if multiple systems share the same delivery mechanism. Envoy
     * configuration elements can be contained in a dedicated subdirectory.
     * </pre>
     *
     * <code>string subdirectory = 2;</code>
     * @return The subdirectory.
     */
    public java.lang.String getSubdirectory() {
      java.lang.Object ref = subdirectory_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        subdirectory_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies the subdirectory to load within the root directory. This is
     * useful if multiple systems share the same delivery mechanism. Envoy
     * configuration elements can be contained in a dedicated subdirectory.
     * </pre>
     *
     * <code>string subdirectory = 2;</code>
     * @return The bytes for subdirectory.
     */
    public com.google.protobuf.ByteString
        getSubdirectoryBytes() {
      java.lang.Object ref = subdirectory_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        subdirectory_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies the subdirectory to load within the root directory. This is
     * useful if multiple systems share the same delivery mechanism. Envoy
     * configuration elements can be contained in a dedicated subdirectory.
     * </pre>
     *
     * <code>string subdirectory = 2;</code>
     * @param value The subdirectory to set.
     * @return This builder for chaining.
     */
    public Builder setSubdirectory(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      subdirectory_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the subdirectory to load within the root directory. This is
     * useful if multiple systems share the same delivery mechanism. Envoy
     * configuration elements can be contained in a dedicated subdirectory.
     * </pre>
     *
     * <code>string subdirectory = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSubdirectory() {
      
      subdirectory_ = getDefaultInstance().getSubdirectory();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the subdirectory to load within the root directory. This is
     * useful if multiple systems share the same delivery mechanism. Envoy
     * configuration elements can be contained in a dedicated subdirectory.
     * </pre>
     *
     * <code>string subdirectory = 2;</code>
     * @param value The bytes for subdirectory to set.
     * @return This builder for chaining.
     */
    public Builder setSubdirectoryBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      subdirectory_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object overrideSubdirectory_ = "";
    /**
     * <pre>
     * Specifies an optional subdirectory to load within the root directory. If
     * specified and the directory exists, configuration values within this
     * directory will override those found in the primary subdirectory. This is
     * useful when Envoy is deployed across many different types of servers.
     * Sometimes it is useful to have a per service cluster directory for runtime
     * configuration. See below for exactly how the override directory is used.
     * </pre>
     *
     * <code>string override_subdirectory = 3;</code>
     * @return The overrideSubdirectory.
     */
    public java.lang.String getOverrideSubdirectory() {
      java.lang.Object ref = overrideSubdirectory_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        overrideSubdirectory_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies an optional subdirectory to load within the root directory. If
     * specified and the directory exists, configuration values within this
     * directory will override those found in the primary subdirectory. This is
     * useful when Envoy is deployed across many different types of servers.
     * Sometimes it is useful to have a per service cluster directory for runtime
     * configuration. See below for exactly how the override directory is used.
     * </pre>
     *
     * <code>string override_subdirectory = 3;</code>
     * @return The bytes for overrideSubdirectory.
     */
    public com.google.protobuf.ByteString
        getOverrideSubdirectoryBytes() {
      java.lang.Object ref = overrideSubdirectory_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        overrideSubdirectory_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies an optional subdirectory to load within the root directory. If
     * specified and the directory exists, configuration values within this
     * directory will override those found in the primary subdirectory. This is
     * useful when Envoy is deployed across many different types of servers.
     * Sometimes it is useful to have a per service cluster directory for runtime
     * configuration. See below for exactly how the override directory is used.
     * </pre>
     *
     * <code>string override_subdirectory = 3;</code>
     * @param value The overrideSubdirectory to set.
     * @return This builder for chaining.
     */
    public Builder setOverrideSubdirectory(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      overrideSubdirectory_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies an optional subdirectory to load within the root directory. If
     * specified and the directory exists, configuration values within this
     * directory will override those found in the primary subdirectory. This is
     * useful when Envoy is deployed across many different types of servers.
     * Sometimes it is useful to have a per service cluster directory for runtime
     * configuration. See below for exactly how the override directory is used.
     * </pre>
     *
     * <code>string override_subdirectory = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOverrideSubdirectory() {
      
      overrideSubdirectory_ = getDefaultInstance().getOverrideSubdirectory();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies an optional subdirectory to load within the root directory. If
     * specified and the directory exists, configuration values within this
     * directory will override those found in the primary subdirectory. This is
     * useful when Envoy is deployed across many different types of servers.
     * Sometimes it is useful to have a per service cluster directory for runtime
     * configuration. See below for exactly how the override directory is used.
     * </pre>
     *
     * <code>string override_subdirectory = 3;</code>
     * @param value The bytes for overrideSubdirectory to set.
     * @return This builder for chaining.
     */
    public Builder setOverrideSubdirectoryBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      overrideSubdirectory_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.Struct base_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> baseBuilder_;
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     * @return Whether the base field is set.
     */
    public boolean hasBase() {
      return baseBuilder_ != null || base_ != null;
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     * @return The base.
     */
    public com.google.protobuf.Struct getBase() {
      if (baseBuilder_ == null) {
        return base_ == null ? com.google.protobuf.Struct.getDefaultInstance() : base_;
      } else {
        return baseBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    public Builder setBase(com.google.protobuf.Struct value) {
      if (baseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        base_ = value;
        onChanged();
      } else {
        baseBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    public Builder setBase(
        com.google.protobuf.Struct.Builder builderForValue) {
      if (baseBuilder_ == null) {
        base_ = builderForValue.build();
        onChanged();
      } else {
        baseBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    public Builder mergeBase(com.google.protobuf.Struct value) {
      if (baseBuilder_ == null) {
        if (base_ != null) {
          base_ =
            com.google.protobuf.Struct.newBuilder(base_).mergeFrom(value).buildPartial();
        } else {
          base_ = value;
        }
        onChanged();
      } else {
        baseBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    public Builder clearBase() {
      if (baseBuilder_ == null) {
        base_ = null;
        onChanged();
      } else {
        base_ = null;
        baseBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    public com.google.protobuf.Struct.Builder getBaseBuilder() {
      
      onChanged();
      return getBaseFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    public com.google.protobuf.StructOrBuilder getBaseOrBuilder() {
      if (baseBuilder_ != null) {
        return baseBuilder_.getMessageOrBuilder();
      } else {
        return base_ == null ?
            com.google.protobuf.Struct.getDefaultInstance() : base_;
      }
    }
    /**
     * <pre>
     * Static base runtime. This will be :ref:`overridden
     * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
     * disk or admin. This follows the :ref:`runtime protobuf JSON representation
     * encoding &lt;config_runtime_proto_json&gt;`.
     * </pre>
     *
     * <code>.google.protobuf.Struct base = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
        getBaseFieldBuilder() {
      if (baseBuilder_ == null) {
        baseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                getBase(),
                getParentForChildren(),
                isClean());
        base_ = null;
      }
      return baseBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.bootstrap.v3.Runtime)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.bootstrap.v3.Runtime)
  private static final io.envoyproxy.envoy.config.bootstrap.v3.Runtime DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.bootstrap.v3.Runtime();
  }

  public static io.envoyproxy.envoy.config.bootstrap.v3.Runtime getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Runtime>
      PARSER = new com.google.protobuf.AbstractParser<Runtime>() {
    @java.lang.Override
    public Runtime parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Runtime(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Runtime> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Runtime> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.bootstrap.v3.Runtime getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

