// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/metrics/v3/stats.proto

package io.envoyproxy.envoy.config.metrics.v3;

/**
 * <pre>
 * Designates a tag name and value pair. The value may be either a fixed value
 * or a regex providing the value via capture groups. The specified tag will be
 * unconditionally set if a fixed value, otherwise it will only be set if one
 * or more capture groups in the regex match.
 * </pre>
 *
 * Protobuf type {@code envoy.config.metrics.v3.TagSpecifier}
 */
public final class TagSpecifier extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.metrics.v3.TagSpecifier)
    TagSpecifierOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TagSpecifier.newBuilder() to construct.
  private TagSpecifier(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TagSpecifier() {
    tagName_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TagSpecifier();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TagSpecifier(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            tagName_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            tagValueCase_ = 2;
            tagValue_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            tagValueCase_ = 3;
            tagValue_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_TagSpecifier_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_TagSpecifier_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.class, io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.Builder.class);
  }

  private int tagValueCase_ = 0;
  private java.lang.Object tagValue_;
  public enum TagValueCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    REGEX(2),
    FIXED_VALUE(3),
    TAGVALUE_NOT_SET(0);
    private final int value;
    private TagValueCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TagValueCase valueOf(int value) {
      return forNumber(value);
    }

    public static TagValueCase forNumber(int value) {
      switch (value) {
        case 2: return REGEX;
        case 3: return FIXED_VALUE;
        case 0: return TAGVALUE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public TagValueCase
  getTagValueCase() {
    return TagValueCase.forNumber(
        tagValueCase_);
  }

  public static final int TAG_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object tagName_;
  /**
   * <pre>
   * Attaches an identifier to the tag values to identify the tag being in the
   * sink. Envoy has a set of default names and regexes to extract dynamic
   * portions of existing stats, which can be found in :repo:`well_known_names.h
   * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
   * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
   * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
   * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
   * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
   * .. note::
   *   It is invalid to specify the same tag name twice in a config.
   * </pre>
   *
   * <code>string tag_name = 1;</code>
   * @return The tagName.
   */
  @java.lang.Override
  public java.lang.String getTagName() {
    java.lang.Object ref = tagName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      tagName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Attaches an identifier to the tag values to identify the tag being in the
   * sink. Envoy has a set of default names and regexes to extract dynamic
   * portions of existing stats, which can be found in :repo:`well_known_names.h
   * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
   * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
   * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
   * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
   * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
   * .. note::
   *   It is invalid to specify the same tag name twice in a config.
   * </pre>
   *
   * <code>string tag_name = 1;</code>
   * @return The bytes for tagName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTagNameBytes() {
    java.lang.Object ref = tagName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tagName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REGEX_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Designates a tag to strip from the tag extracted name and provide as a named
   * tag value for all statistics. This will only occur if any part of the name
   * matches the regex provided with one or more capture groups.
   * The first capture group identifies the portion of the name to remove. The
   * second capture group (which will normally be nested inside the first) will
   * designate the value of the tag for the statistic. If no second capture
   * group is provided, the first will also be used to set the value of the tag.
   * All other capture groups will be ignored.
   * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
   * one tag specifier:
   * .. code-block:: json
   *   {
   *     "tag_name": "envoy.cluster_name",
   *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
   *   }
   * Note that the regex will remove ``foo_cluster.`` making the tag extracted
   * name ``cluster.upstream_rq_timeout`` and the tag value for
   * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
   * ``.`` character because of the second capture group).
   * Example 2. a stat name
   * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
   * tag specifiers:
   * .. code-block:: json
   *   [
   *     {
   *       "tag_name": "envoy.http_user_agent",
   *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
   *     },
   *     {
   *       "tag_name": "envoy.http_conn_manager_prefix",
   *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
   *     }
   *   ]
   * The two regexes of the specifiers will be processed in the definition order.
   * The first regex will remove ``ios.``, leaving the tag extracted name
   * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
   * ``envoy.http_user_agent`` will be added with tag value ``ios``.
   * The second regex will remove ``connection_manager_1.`` from the tag
   * extracted name produced by the first regex
   * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
   * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
   * ``envoy.http_conn_manager_prefix`` will be added with the tag value
   * ``connection_manager_1``.
   * </pre>
   *
   * <code>string regex = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the regex field is set.
   */
  public boolean hasRegex() {
    return tagValueCase_ == 2;
  }
  /**
   * <pre>
   * Designates a tag to strip from the tag extracted name and provide as a named
   * tag value for all statistics. This will only occur if any part of the name
   * matches the regex provided with one or more capture groups.
   * The first capture group identifies the portion of the name to remove. The
   * second capture group (which will normally be nested inside the first) will
   * designate the value of the tag for the statistic. If no second capture
   * group is provided, the first will also be used to set the value of the tag.
   * All other capture groups will be ignored.
   * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
   * one tag specifier:
   * .. code-block:: json
   *   {
   *     "tag_name": "envoy.cluster_name",
   *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
   *   }
   * Note that the regex will remove ``foo_cluster.`` making the tag extracted
   * name ``cluster.upstream_rq_timeout`` and the tag value for
   * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
   * ``.`` character because of the second capture group).
   * Example 2. a stat name
   * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
   * tag specifiers:
   * .. code-block:: json
   *   [
   *     {
   *       "tag_name": "envoy.http_user_agent",
   *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
   *     },
   *     {
   *       "tag_name": "envoy.http_conn_manager_prefix",
   *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
   *     }
   *   ]
   * The two regexes of the specifiers will be processed in the definition order.
   * The first regex will remove ``ios.``, leaving the tag extracted name
   * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
   * ``envoy.http_user_agent`` will be added with tag value ``ios``.
   * The second regex will remove ``connection_manager_1.`` from the tag
   * extracted name produced by the first regex
   * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
   * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
   * ``envoy.http_conn_manager_prefix`` will be added with the tag value
   * ``connection_manager_1``.
   * </pre>
   *
   * <code>string regex = 2 [(.validate.rules) = { ... }</code>
   * @return The regex.
   */
  public java.lang.String getRegex() {
    java.lang.Object ref = "";
    if (tagValueCase_ == 2) {
      ref = tagValue_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (tagValueCase_ == 2) {
        tagValue_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Designates a tag to strip from the tag extracted name and provide as a named
   * tag value for all statistics. This will only occur if any part of the name
   * matches the regex provided with one or more capture groups.
   * The first capture group identifies the portion of the name to remove. The
   * second capture group (which will normally be nested inside the first) will
   * designate the value of the tag for the statistic. If no second capture
   * group is provided, the first will also be used to set the value of the tag.
   * All other capture groups will be ignored.
   * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
   * one tag specifier:
   * .. code-block:: json
   *   {
   *     "tag_name": "envoy.cluster_name",
   *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
   *   }
   * Note that the regex will remove ``foo_cluster.`` making the tag extracted
   * name ``cluster.upstream_rq_timeout`` and the tag value for
   * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
   * ``.`` character because of the second capture group).
   * Example 2. a stat name
   * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
   * tag specifiers:
   * .. code-block:: json
   *   [
   *     {
   *       "tag_name": "envoy.http_user_agent",
   *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
   *     },
   *     {
   *       "tag_name": "envoy.http_conn_manager_prefix",
   *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
   *     }
   *   ]
   * The two regexes of the specifiers will be processed in the definition order.
   * The first regex will remove ``ios.``, leaving the tag extracted name
   * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
   * ``envoy.http_user_agent`` will be added with tag value ``ios``.
   * The second regex will remove ``connection_manager_1.`` from the tag
   * extracted name produced by the first regex
   * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
   * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
   * ``envoy.http_conn_manager_prefix`` will be added with the tag value
   * ``connection_manager_1``.
   * </pre>
   *
   * <code>string regex = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for regex.
   */
  public com.google.protobuf.ByteString
      getRegexBytes() {
    java.lang.Object ref = "";
    if (tagValueCase_ == 2) {
      ref = tagValue_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (tagValueCase_ == 2) {
        tagValue_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FIXED_VALUE_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Specifies a fixed tag value for the ``tag_name``.
   * </pre>
   *
   * <code>string fixed_value = 3;</code>
   * @return Whether the fixedValue field is set.
   */
  public boolean hasFixedValue() {
    return tagValueCase_ == 3;
  }
  /**
   * <pre>
   * Specifies a fixed tag value for the ``tag_name``.
   * </pre>
   *
   * <code>string fixed_value = 3;</code>
   * @return The fixedValue.
   */
  public java.lang.String getFixedValue() {
    java.lang.Object ref = "";
    if (tagValueCase_ == 3) {
      ref = tagValue_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (tagValueCase_ == 3) {
        tagValue_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Specifies a fixed tag value for the ``tag_name``.
   * </pre>
   *
   * <code>string fixed_value = 3;</code>
   * @return The bytes for fixedValue.
   */
  public com.google.protobuf.ByteString
      getFixedValueBytes() {
    java.lang.Object ref = "";
    if (tagValueCase_ == 3) {
      ref = tagValue_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (tagValueCase_ == 3) {
        tagValue_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getTagNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tagName_);
    }
    if (tagValueCase_ == 2) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, tagValue_);
    }
    if (tagValueCase_ == 3) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, tagValue_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getTagNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tagName_);
    }
    if (tagValueCase_ == 2) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, tagValue_);
    }
    if (tagValueCase_ == 3) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, tagValue_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.metrics.v3.TagSpecifier)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.metrics.v3.TagSpecifier other = (io.envoyproxy.envoy.config.metrics.v3.TagSpecifier) obj;

    if (!getTagName()
        .equals(other.getTagName())) return false;
    if (!getTagValueCase().equals(other.getTagValueCase())) return false;
    switch (tagValueCase_) {
      case 2:
        if (!getRegex()
            .equals(other.getRegex())) return false;
        break;
      case 3:
        if (!getFixedValue()
            .equals(other.getFixedValue())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TAG_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getTagName().hashCode();
    switch (tagValueCase_) {
      case 2:
        hash = (37 * hash) + REGEX_FIELD_NUMBER;
        hash = (53 * hash) + getRegex().hashCode();
        break;
      case 3:
        hash = (37 * hash) + FIXED_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getFixedValue().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.metrics.v3.TagSpecifier prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Designates a tag name and value pair. The value may be either a fixed value
   * or a regex providing the value via capture groups. The specified tag will be
   * unconditionally set if a fixed value, otherwise it will only be set if one
   * or more capture groups in the regex match.
   * </pre>
   *
   * Protobuf type {@code envoy.config.metrics.v3.TagSpecifier}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.metrics.v3.TagSpecifier)
      io.envoyproxy.envoy.config.metrics.v3.TagSpecifierOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_TagSpecifier_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_TagSpecifier_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.class, io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      tagName_ = "";

      tagValueCase_ = 0;
      tagValue_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_TagSpecifier_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.metrics.v3.TagSpecifier getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.metrics.v3.TagSpecifier build() {
      io.envoyproxy.envoy.config.metrics.v3.TagSpecifier result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.metrics.v3.TagSpecifier buildPartial() {
      io.envoyproxy.envoy.config.metrics.v3.TagSpecifier result = new io.envoyproxy.envoy.config.metrics.v3.TagSpecifier(this);
      result.tagName_ = tagName_;
      if (tagValueCase_ == 2) {
        result.tagValue_ = tagValue_;
      }
      if (tagValueCase_ == 3) {
        result.tagValue_ = tagValue_;
      }
      result.tagValueCase_ = tagValueCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.metrics.v3.TagSpecifier) {
        return mergeFrom((io.envoyproxy.envoy.config.metrics.v3.TagSpecifier)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.metrics.v3.TagSpecifier other) {
      if (other == io.envoyproxy.envoy.config.metrics.v3.TagSpecifier.getDefaultInstance()) return this;
      if (!other.getTagName().isEmpty()) {
        tagName_ = other.tagName_;
        onChanged();
      }
      switch (other.getTagValueCase()) {
        case REGEX: {
          tagValueCase_ = 2;
          tagValue_ = other.tagValue_;
          onChanged();
          break;
        }
        case FIXED_VALUE: {
          tagValueCase_ = 3;
          tagValue_ = other.tagValue_;
          onChanged();
          break;
        }
        case TAGVALUE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.metrics.v3.TagSpecifier parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.metrics.v3.TagSpecifier) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int tagValueCase_ = 0;
    private java.lang.Object tagValue_;
    public TagValueCase
        getTagValueCase() {
      return TagValueCase.forNumber(
          tagValueCase_);
    }

    public Builder clearTagValue() {
      tagValueCase_ = 0;
      tagValue_ = null;
      onChanged();
      return this;
    }


    private java.lang.Object tagName_ = "";
    /**
     * <pre>
     * Attaches an identifier to the tag values to identify the tag being in the
     * sink. Envoy has a set of default names and regexes to extract dynamic
     * portions of existing stats, which can be found in :repo:`well_known_names.h
     * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
     * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
     * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
     * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
     * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
     * .. note::
     *   It is invalid to specify the same tag name twice in a config.
     * </pre>
     *
     * <code>string tag_name = 1;</code>
     * @return The tagName.
     */
    public java.lang.String getTagName() {
      java.lang.Object ref = tagName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tagName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Attaches an identifier to the tag values to identify the tag being in the
     * sink. Envoy has a set of default names and regexes to extract dynamic
     * portions of existing stats, which can be found in :repo:`well_known_names.h
     * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
     * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
     * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
     * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
     * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
     * .. note::
     *   It is invalid to specify the same tag name twice in a config.
     * </pre>
     *
     * <code>string tag_name = 1;</code>
     * @return The bytes for tagName.
     */
    public com.google.protobuf.ByteString
        getTagNameBytes() {
      java.lang.Object ref = tagName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tagName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Attaches an identifier to the tag values to identify the tag being in the
     * sink. Envoy has a set of default names and regexes to extract dynamic
     * portions of existing stats, which can be found in :repo:`well_known_names.h
     * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
     * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
     * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
     * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
     * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
     * .. note::
     *   It is invalid to specify the same tag name twice in a config.
     * </pre>
     *
     * <code>string tag_name = 1;</code>
     * @param value The tagName to set.
     * @return This builder for chaining.
     */
    public Builder setTagName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      tagName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Attaches an identifier to the tag values to identify the tag being in the
     * sink. Envoy has a set of default names and regexes to extract dynamic
     * portions of existing stats, which can be found in :repo:`well_known_names.h
     * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
     * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
     * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
     * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
     * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
     * .. note::
     *   It is invalid to specify the same tag name twice in a config.
     * </pre>
     *
     * <code>string tag_name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTagName() {
      
      tagName_ = getDefaultInstance().getTagName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Attaches an identifier to the tag values to identify the tag being in the
     * sink. Envoy has a set of default names and regexes to extract dynamic
     * portions of existing stats, which can be found in :repo:`well_known_names.h
     * &lt;source/common/config/well_known_names.h&gt;` in the Envoy repository. If a :ref:`tag_name
     * &lt;envoy_api_field_config.metrics.v3.TagSpecifier.tag_name&gt;` is provided in the config and
     * neither :ref:`regex &lt;envoy_api_field_config.metrics.v3.TagSpecifier.regex&gt;` or
     * :ref:`fixed_value &lt;envoy_api_field_config.metrics.v3.TagSpecifier.fixed_value&gt;` were specified,
     * Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
     * .. note::
     *   It is invalid to specify the same tag name twice in a config.
     * </pre>
     *
     * <code>string tag_name = 1;</code>
     * @param value The bytes for tagName to set.
     * @return This builder for chaining.
     */
    public Builder setTagNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      tagName_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Designates a tag to strip from the tag extracted name and provide as a named
     * tag value for all statistics. This will only occur if any part of the name
     * matches the regex provided with one or more capture groups.
     * The first capture group identifies the portion of the name to remove. The
     * second capture group (which will normally be nested inside the first) will
     * designate the value of the tag for the statistic. If no second capture
     * group is provided, the first will also be used to set the value of the tag.
     * All other capture groups will be ignored.
     * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
     * one tag specifier:
     * .. code-block:: json
     *   {
     *     "tag_name": "envoy.cluster_name",
     *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
     *   }
     * Note that the regex will remove ``foo_cluster.`` making the tag extracted
     * name ``cluster.upstream_rq_timeout`` and the tag value for
     * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
     * ``.`` character because of the second capture group).
     * Example 2. a stat name
     * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
     * tag specifiers:
     * .. code-block:: json
     *   [
     *     {
     *       "tag_name": "envoy.http_user_agent",
     *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
     *     },
     *     {
     *       "tag_name": "envoy.http_conn_manager_prefix",
     *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
     *     }
     *   ]
     * The two regexes of the specifiers will be processed in the definition order.
     * The first regex will remove ``ios.``, leaving the tag extracted name
     * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
     * ``envoy.http_user_agent`` will be added with tag value ``ios``.
     * The second regex will remove ``connection_manager_1.`` from the tag
     * extracted name produced by the first regex
     * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
     * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
     * ``envoy.http_conn_manager_prefix`` will be added with the tag value
     * ``connection_manager_1``.
     * </pre>
     *
     * <code>string regex = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the regex field is set.
     */
    @java.lang.Override
    public boolean hasRegex() {
      return tagValueCase_ == 2;
    }
    /**
     * <pre>
     * Designates a tag to strip from the tag extracted name and provide as a named
     * tag value for all statistics. This will only occur if any part of the name
     * matches the regex provided with one or more capture groups.
     * The first capture group identifies the portion of the name to remove. The
     * second capture group (which will normally be nested inside the first) will
     * designate the value of the tag for the statistic. If no second capture
     * group is provided, the first will also be used to set the value of the tag.
     * All other capture groups will be ignored.
     * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
     * one tag specifier:
     * .. code-block:: json
     *   {
     *     "tag_name": "envoy.cluster_name",
     *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
     *   }
     * Note that the regex will remove ``foo_cluster.`` making the tag extracted
     * name ``cluster.upstream_rq_timeout`` and the tag value for
     * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
     * ``.`` character because of the second capture group).
     * Example 2. a stat name
     * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
     * tag specifiers:
     * .. code-block:: json
     *   [
     *     {
     *       "tag_name": "envoy.http_user_agent",
     *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
     *     },
     *     {
     *       "tag_name": "envoy.http_conn_manager_prefix",
     *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
     *     }
     *   ]
     * The two regexes of the specifiers will be processed in the definition order.
     * The first regex will remove ``ios.``, leaving the tag extracted name
     * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
     * ``envoy.http_user_agent`` will be added with tag value ``ios``.
     * The second regex will remove ``connection_manager_1.`` from the tag
     * extracted name produced by the first regex
     * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
     * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
     * ``envoy.http_conn_manager_prefix`` will be added with the tag value
     * ``connection_manager_1``.
     * </pre>
     *
     * <code>string regex = 2 [(.validate.rules) = { ... }</code>
     * @return The regex.
     */
    @java.lang.Override
    public java.lang.String getRegex() {
      java.lang.Object ref = "";
      if (tagValueCase_ == 2) {
        ref = tagValue_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (tagValueCase_ == 2) {
          tagValue_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Designates a tag to strip from the tag extracted name and provide as a named
     * tag value for all statistics. This will only occur if any part of the name
     * matches the regex provided with one or more capture groups.
     * The first capture group identifies the portion of the name to remove. The
     * second capture group (which will normally be nested inside the first) will
     * designate the value of the tag for the statistic. If no second capture
     * group is provided, the first will also be used to set the value of the tag.
     * All other capture groups will be ignored.
     * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
     * one tag specifier:
     * .. code-block:: json
     *   {
     *     "tag_name": "envoy.cluster_name",
     *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
     *   }
     * Note that the regex will remove ``foo_cluster.`` making the tag extracted
     * name ``cluster.upstream_rq_timeout`` and the tag value for
     * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
     * ``.`` character because of the second capture group).
     * Example 2. a stat name
     * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
     * tag specifiers:
     * .. code-block:: json
     *   [
     *     {
     *       "tag_name": "envoy.http_user_agent",
     *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
     *     },
     *     {
     *       "tag_name": "envoy.http_conn_manager_prefix",
     *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
     *     }
     *   ]
     * The two regexes of the specifiers will be processed in the definition order.
     * The first regex will remove ``ios.``, leaving the tag extracted name
     * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
     * ``envoy.http_user_agent`` will be added with tag value ``ios``.
     * The second regex will remove ``connection_manager_1.`` from the tag
     * extracted name produced by the first regex
     * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
     * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
     * ``envoy.http_conn_manager_prefix`` will be added with the tag value
     * ``connection_manager_1``.
     * </pre>
     *
     * <code>string regex = 2 [(.validate.rules) = { ... }</code>
     * @return The bytes for regex.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRegexBytes() {
      java.lang.Object ref = "";
      if (tagValueCase_ == 2) {
        ref = tagValue_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (tagValueCase_ == 2) {
          tagValue_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Designates a tag to strip from the tag extracted name and provide as a named
     * tag value for all statistics. This will only occur if any part of the name
     * matches the regex provided with one or more capture groups.
     * The first capture group identifies the portion of the name to remove. The
     * second capture group (which will normally be nested inside the first) will
     * designate the value of the tag for the statistic. If no second capture
     * group is provided, the first will also be used to set the value of the tag.
     * All other capture groups will be ignored.
     * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
     * one tag specifier:
     * .. code-block:: json
     *   {
     *     "tag_name": "envoy.cluster_name",
     *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
     *   }
     * Note that the regex will remove ``foo_cluster.`` making the tag extracted
     * name ``cluster.upstream_rq_timeout`` and the tag value for
     * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
     * ``.`` character because of the second capture group).
     * Example 2. a stat name
     * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
     * tag specifiers:
     * .. code-block:: json
     *   [
     *     {
     *       "tag_name": "envoy.http_user_agent",
     *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
     *     },
     *     {
     *       "tag_name": "envoy.http_conn_manager_prefix",
     *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
     *     }
     *   ]
     * The two regexes of the specifiers will be processed in the definition order.
     * The first regex will remove ``ios.``, leaving the tag extracted name
     * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
     * ``envoy.http_user_agent`` will be added with tag value ``ios``.
     * The second regex will remove ``connection_manager_1.`` from the tag
     * extracted name produced by the first regex
     * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
     * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
     * ``envoy.http_conn_manager_prefix`` will be added with the tag value
     * ``connection_manager_1``.
     * </pre>
     *
     * <code>string regex = 2 [(.validate.rules) = { ... }</code>
     * @param value The regex to set.
     * @return This builder for chaining.
     */
    public Builder setRegex(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  tagValueCase_ = 2;
      tagValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Designates a tag to strip from the tag extracted name and provide as a named
     * tag value for all statistics. This will only occur if any part of the name
     * matches the regex provided with one or more capture groups.
     * The first capture group identifies the portion of the name to remove. The
     * second capture group (which will normally be nested inside the first) will
     * designate the value of the tag for the statistic. If no second capture
     * group is provided, the first will also be used to set the value of the tag.
     * All other capture groups will be ignored.
     * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
     * one tag specifier:
     * .. code-block:: json
     *   {
     *     "tag_name": "envoy.cluster_name",
     *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
     *   }
     * Note that the regex will remove ``foo_cluster.`` making the tag extracted
     * name ``cluster.upstream_rq_timeout`` and the tag value for
     * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
     * ``.`` character because of the second capture group).
     * Example 2. a stat name
     * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
     * tag specifiers:
     * .. code-block:: json
     *   [
     *     {
     *       "tag_name": "envoy.http_user_agent",
     *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
     *     },
     *     {
     *       "tag_name": "envoy.http_conn_manager_prefix",
     *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
     *     }
     *   ]
     * The two regexes of the specifiers will be processed in the definition order.
     * The first regex will remove ``ios.``, leaving the tag extracted name
     * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
     * ``envoy.http_user_agent`` will be added with tag value ``ios``.
     * The second regex will remove ``connection_manager_1.`` from the tag
     * extracted name produced by the first regex
     * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
     * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
     * ``envoy.http_conn_manager_prefix`` will be added with the tag value
     * ``connection_manager_1``.
     * </pre>
     *
     * <code>string regex = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearRegex() {
      if (tagValueCase_ == 2) {
        tagValueCase_ = 0;
        tagValue_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Designates a tag to strip from the tag extracted name and provide as a named
     * tag value for all statistics. This will only occur if any part of the name
     * matches the regex provided with one or more capture groups.
     * The first capture group identifies the portion of the name to remove. The
     * second capture group (which will normally be nested inside the first) will
     * designate the value of the tag for the statistic. If no second capture
     * group is provided, the first will also be used to set the value of the tag.
     * All other capture groups will be ignored.
     * Example 1. a stat name ``cluster.foo_cluster.upstream_rq_timeout`` and
     * one tag specifier:
     * .. code-block:: json
     *   {
     *     "tag_name": "envoy.cluster_name",
     *     "regex": "^cluster&#92;&#92;.((.+?)&#92;&#92;.)"
     *   }
     * Note that the regex will remove ``foo_cluster.`` making the tag extracted
     * name ``cluster.upstream_rq_timeout`` and the tag value for
     * ``envoy.cluster_name`` will be ``foo_cluster`` (note: there will be no
     * ``.`` character because of the second capture group).
     * Example 2. a stat name
     * ``http.connection_manager_1.user_agent.ios.downstream_cx_total`` and two
     * tag specifiers:
     * .. code-block:: json
     *   [
     *     {
     *       "tag_name": "envoy.http_user_agent",
     *       "regex": "^http(?=&#92;&#92;.).*?&#92;&#92;.user_agent&#92;&#92;.((.+?)&#92;&#92;.)&#92;&#92;w+?$"
     *     },
     *     {
     *       "tag_name": "envoy.http_conn_manager_prefix",
     *       "regex": "^http&#92;&#92;.((.*?)&#92;&#92;.)"
     *     }
     *   ]
     * The two regexes of the specifiers will be processed in the definition order.
     * The first regex will remove ``ios.``, leaving the tag extracted name
     * ``http.connection_manager_1.user_agent.downstream_cx_total``. The tag
     * ``envoy.http_user_agent`` will be added with tag value ``ios``.
     * The second regex will remove ``connection_manager_1.`` from the tag
     * extracted name produced by the first regex
     * ``http.connection_manager_1.user_agent.downstream_cx_total``, leaving
     * ``http.user_agent.downstream_cx_total`` as the tag extracted name. The tag
     * ``envoy.http_conn_manager_prefix`` will be added with the tag value
     * ``connection_manager_1``.
     * </pre>
     *
     * <code>string regex = 2 [(.validate.rules) = { ... }</code>
     * @param value The bytes for regex to set.
     * @return This builder for chaining.
     */
    public Builder setRegexBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      tagValueCase_ = 2;
      tagValue_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Specifies a fixed tag value for the ``tag_name``.
     * </pre>
     *
     * <code>string fixed_value = 3;</code>
     * @return Whether the fixedValue field is set.
     */
    @java.lang.Override
    public boolean hasFixedValue() {
      return tagValueCase_ == 3;
    }
    /**
     * <pre>
     * Specifies a fixed tag value for the ``tag_name``.
     * </pre>
     *
     * <code>string fixed_value = 3;</code>
     * @return The fixedValue.
     */
    @java.lang.Override
    public java.lang.String getFixedValue() {
      java.lang.Object ref = "";
      if (tagValueCase_ == 3) {
        ref = tagValue_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (tagValueCase_ == 3) {
          tagValue_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies a fixed tag value for the ``tag_name``.
     * </pre>
     *
     * <code>string fixed_value = 3;</code>
     * @return The bytes for fixedValue.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFixedValueBytes() {
      java.lang.Object ref = "";
      if (tagValueCase_ == 3) {
        ref = tagValue_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (tagValueCase_ == 3) {
          tagValue_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies a fixed tag value for the ``tag_name``.
     * </pre>
     *
     * <code>string fixed_value = 3;</code>
     * @param value The fixedValue to set.
     * @return This builder for chaining.
     */
    public Builder setFixedValue(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  tagValueCase_ = 3;
      tagValue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies a fixed tag value for the ``tag_name``.
     * </pre>
     *
     * <code>string fixed_value = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearFixedValue() {
      if (tagValueCase_ == 3) {
        tagValueCase_ = 0;
        tagValue_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a fixed tag value for the ``tag_name``.
     * </pre>
     *
     * <code>string fixed_value = 3;</code>
     * @param value The bytes for fixedValue to set.
     * @return This builder for chaining.
     */
    public Builder setFixedValueBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      tagValueCase_ = 3;
      tagValue_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.metrics.v3.TagSpecifier)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.metrics.v3.TagSpecifier)
  private static final io.envoyproxy.envoy.config.metrics.v3.TagSpecifier DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.metrics.v3.TagSpecifier();
  }

  public static io.envoyproxy.envoy.config.metrics.v3.TagSpecifier getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TagSpecifier>
      PARSER = new com.google.protobuf.AbstractParser<TagSpecifier>() {
    @java.lang.Override
    public TagSpecifier parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TagSpecifier(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TagSpecifier> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TagSpecifier> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.metrics.v3.TagSpecifier getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

