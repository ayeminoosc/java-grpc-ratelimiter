// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface Http1ProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.Http1ProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Handle HTTP requests with absolute URLs in the requests. These requests
   * are generally sent by clients to forward/explicit proxies. This allows clients to configure
   * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
   * *http_proxy* environment variable.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
   * @return Whether the allowAbsoluteUrl field is set.
   */
  boolean hasAllowAbsoluteUrl();
  /**
   * <pre>
   * Handle HTTP requests with absolute URLs in the requests. These requests
   * are generally sent by clients to forward/explicit proxies. This allows clients to configure
   * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
   * *http_proxy* environment variable.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
   * @return The allowAbsoluteUrl.
   */
  com.google.protobuf.BoolValue getAllowAbsoluteUrl();
  /**
   * <pre>
   * Handle HTTP requests with absolute URLs in the requests. These requests
   * are generally sent by clients to forward/explicit proxies. This allows clients to configure
   * envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
   * *http_proxy* environment variable.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_absolute_url = 1;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getAllowAbsoluteUrlOrBuilder();

  /**
   * <pre>
   * Handle incoming HTTP/1.0 and HTTP 0.9 requests.
   * This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
   * style connect logic, dechunking, and handling lack of client host iff
   * *default_host_for_http_10* is configured.
   * </pre>
   *
   * <code>bool accept_http_10 = 2;</code>
   * @return The acceptHttp10.
   */
  boolean getAcceptHttp10();

  /**
   * <pre>
   * A default host for HTTP/1.0 requests. This is highly suggested if *accept_http_10* is true as
   * Envoy does not otherwise support HTTP/1.0 without a Host header.
   * This is a no-op if *accept_http_10* is not true.
   * </pre>
   *
   * <code>string default_host_for_http_10 = 3;</code>
   * @return The defaultHostForHttp10.
   */
  java.lang.String getDefaultHostForHttp10();
  /**
   * <pre>
   * A default host for HTTP/1.0 requests. This is highly suggested if *accept_http_10* is true as
   * Envoy does not otherwise support HTTP/1.0 without a Host header.
   * This is a no-op if *accept_http_10* is not true.
   * </pre>
   *
   * <code>string default_host_for_http_10 = 3;</code>
   * @return The bytes for defaultHostForHttp10.
   */
  com.google.protobuf.ByteString
      getDefaultHostForHttp10Bytes();

  /**
   * <pre>
   * Describes how the keys for response headers should be formatted. By default, all header keys
   * are lower cased.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
   * @return Whether the headerKeyFormat field is set.
   */
  boolean hasHeaderKeyFormat();
  /**
   * <pre>
   * Describes how the keys for response headers should be formatted. By default, all header keys
   * are lower cased.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
   * @return The headerKeyFormat.
   */
  io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat getHeaderKeyFormat();
  /**
   * <pre>
   * Describes how the keys for response headers should be formatted. By default, all header keys
   * are lower cased.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormatOrBuilder getHeaderKeyFormatOrBuilder();

  /**
   * <pre>
   * Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers.
   * .. attention::
   *   Note that this only happens when Envoy is chunk encoding which occurs when:
   *   - The request is HTTP/1.1.
   *   - Is neither a HEAD only request nor a HTTP Upgrade.
   *   - Not a response to a HEAD request.
   *   - The content length header is not present.
   * </pre>
   *
   * <code>bool enable_trailers = 5;</code>
   * @return The enableTrailers.
   */
  boolean getEnableTrailers();

  /**
   * <pre>
   * Allows Envoy to process requests/responses with both `Content-Length` and `Transfer-Encoding`
   * headers set. By default such messages are rejected, but if option is enabled - Envoy will
   * remove Content-Length header and process message.
   * See `RFC7230, sec. 3.3.3 &lt;https://tools.ietf.org/html/rfc7230#section-3.3.3&gt;` for details.
   * .. attention::
   *   Enabling this option might lead to request smuggling vulnerability, especially if traffic
   *   is proxied via multiple layers of proxies.
   * </pre>
   *
   * <code>bool allow_chunked_length = 6;</code>
   * @return The allowChunkedLength.
   */
  boolean getAllowChunkedLength();

  /**
   * <pre>
   * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
   * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
   * when this option is true, then Envoy will leave the HTTP/1.1 connection
   * open where possible.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
   * @return Whether the overrideStreamErrorOnInvalidHttpMessage field is set.
   */
  boolean hasOverrideStreamErrorOnInvalidHttpMessage();
  /**
   * <pre>
   * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
   * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
   * when this option is true, then Envoy will leave the HTTP/1.1 connection
   * open where possible.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
   * @return The overrideStreamErrorOnInvalidHttpMessage.
   */
  com.google.protobuf.BoolValue getOverrideStreamErrorOnInvalidHttpMessage();
  /**
   * <pre>
   * Allows invalid HTTP messaging. When this option is false, then Envoy will terminate
   * HTTP/1.1 connections upon receiving an invalid HTTP message. However,
   * when this option is true, then Envoy will leave the HTTP/1.1 connection
   * open where possible.
   * If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging
   * &lt;envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getOverrideStreamErrorOnInvalidHttpMessageOrBuilder();
}
