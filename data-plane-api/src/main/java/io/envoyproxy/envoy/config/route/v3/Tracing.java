// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

/**
 * Protobuf type {@code envoy.config.route.v3.Tracing}
 */
public final class Tracing extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.route.v3.Tracing)
    TracingOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Tracing.newBuilder() to construct.
  private Tracing(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Tracing() {
    customTags_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Tracing();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Tracing(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.type.v3.FractionalPercent.Builder subBuilder = null;
            if (clientSampling_ != null) {
              subBuilder = clientSampling_.toBuilder();
            }
            clientSampling_ = input.readMessage(io.envoyproxy.envoy.type.v3.FractionalPercent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(clientSampling_);
              clientSampling_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            io.envoyproxy.envoy.type.v3.FractionalPercent.Builder subBuilder = null;
            if (randomSampling_ != null) {
              subBuilder = randomSampling_.toBuilder();
            }
            randomSampling_ = input.readMessage(io.envoyproxy.envoy.type.v3.FractionalPercent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(randomSampling_);
              randomSampling_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            io.envoyproxy.envoy.type.v3.FractionalPercent.Builder subBuilder = null;
            if (overallSampling_ != null) {
              subBuilder = overallSampling_.toBuilder();
            }
            overallSampling_ = input.readMessage(io.envoyproxy.envoy.type.v3.FractionalPercent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(overallSampling_);
              overallSampling_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              customTags_ = new java.util.ArrayList<io.envoyproxy.envoy.type.tracing.v3.CustomTag>();
              mutable_bitField0_ |= 0x00000001;
            }
            customTags_.add(
                input.readMessage(io.envoyproxy.envoy.type.tracing.v3.CustomTag.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        customTags_ = java.util.Collections.unmodifiableList(customTags_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_Tracing_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_Tracing_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.route.v3.Tracing.class, io.envoyproxy.envoy.config.route.v3.Tracing.Builder.class);
  }

  public static final int CLIENT_SAMPLING_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.type.v3.FractionalPercent clientSampling_;
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
   * &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
   * @return Whether the clientSampling field is set.
   */
  @java.lang.Override
  public boolean hasClientSampling() {
    return clientSampling_ != null;
  }
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
   * &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
   * @return The clientSampling.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.FractionalPercent getClientSampling() {
    return clientSampling_ == null ? io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : clientSampling_;
  }
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
   * &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getClientSamplingOrBuilder() {
    return getClientSampling();
  }

  public static final int RANDOM_SAMPLING_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.type.v3.FractionalPercent randomSampling_;
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
   * @return Whether the randomSampling field is set.
   */
  @java.lang.Override
  public boolean hasRandomSampling() {
    return randomSampling_ != null;
  }
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
   * @return The randomSampling.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.FractionalPercent getRandomSampling() {
    return randomSampling_ == null ? io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : randomSampling_;
  }
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getRandomSamplingOrBuilder() {
    return getRandomSampling();
  }

  public static final int OVERALL_SAMPLING_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.type.v3.FractionalPercent overallSampling_;
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
   * @return Whether the overallSampling field is set.
   */
  @java.lang.Override
  public boolean hasOverallSampling() {
    return overallSampling_ != null;
  }
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
   * @return The overallSampling.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.FractionalPercent getOverallSampling() {
    return overallSampling_ == null ? io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : overallSampling_;
  }
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getOverallSamplingOrBuilder() {
    return getOverallSampling();
  }

  public static final int CUSTOM_TAGS_FIELD_NUMBER = 4;
  private java.util.List<io.envoyproxy.envoy.type.tracing.v3.CustomTag> customTags_;
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.type.tracing.v3.CustomTag> getCustomTagsList() {
    return customTags_;
  }
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder> 
      getCustomTagsOrBuilderList() {
    return customTags_;
  }
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  @java.lang.Override
  public int getCustomTagsCount() {
    return customTags_.size();
  }
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.tracing.v3.CustomTag getCustomTags(int index) {
    return customTags_.get(index);
  }
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder getCustomTagsOrBuilder(
      int index) {
    return customTags_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (clientSampling_ != null) {
      output.writeMessage(1, getClientSampling());
    }
    if (randomSampling_ != null) {
      output.writeMessage(2, getRandomSampling());
    }
    if (overallSampling_ != null) {
      output.writeMessage(3, getOverallSampling());
    }
    for (int i = 0; i < customTags_.size(); i++) {
      output.writeMessage(4, customTags_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (clientSampling_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getClientSampling());
    }
    if (randomSampling_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRandomSampling());
    }
    if (overallSampling_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getOverallSampling());
    }
    for (int i = 0; i < customTags_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, customTags_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.route.v3.Tracing)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.route.v3.Tracing other = (io.envoyproxy.envoy.config.route.v3.Tracing) obj;

    if (hasClientSampling() != other.hasClientSampling()) return false;
    if (hasClientSampling()) {
      if (!getClientSampling()
          .equals(other.getClientSampling())) return false;
    }
    if (hasRandomSampling() != other.hasRandomSampling()) return false;
    if (hasRandomSampling()) {
      if (!getRandomSampling()
          .equals(other.getRandomSampling())) return false;
    }
    if (hasOverallSampling() != other.hasOverallSampling()) return false;
    if (hasOverallSampling()) {
      if (!getOverallSampling()
          .equals(other.getOverallSampling())) return false;
    }
    if (!getCustomTagsList()
        .equals(other.getCustomTagsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasClientSampling()) {
      hash = (37 * hash) + CLIENT_SAMPLING_FIELD_NUMBER;
      hash = (53 * hash) + getClientSampling().hashCode();
    }
    if (hasRandomSampling()) {
      hash = (37 * hash) + RANDOM_SAMPLING_FIELD_NUMBER;
      hash = (53 * hash) + getRandomSampling().hashCode();
    }
    if (hasOverallSampling()) {
      hash = (37 * hash) + OVERALL_SAMPLING_FIELD_NUMBER;
      hash = (53 * hash) + getOverallSampling().hashCode();
    }
    if (getCustomTagsCount() > 0) {
      hash = (37 * hash) + CUSTOM_TAGS_FIELD_NUMBER;
      hash = (53 * hash) + getCustomTagsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.Tracing parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.route.v3.Tracing prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.config.route.v3.Tracing}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.route.v3.Tracing)
      io.envoyproxy.envoy.config.route.v3.TracingOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_Tracing_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_Tracing_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.route.v3.Tracing.class, io.envoyproxy.envoy.config.route.v3.Tracing.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.route.v3.Tracing.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getCustomTagsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (clientSamplingBuilder_ == null) {
        clientSampling_ = null;
      } else {
        clientSampling_ = null;
        clientSamplingBuilder_ = null;
      }
      if (randomSamplingBuilder_ == null) {
        randomSampling_ = null;
      } else {
        randomSampling_ = null;
        randomSamplingBuilder_ = null;
      }
      if (overallSamplingBuilder_ == null) {
        overallSampling_ = null;
      } else {
        overallSampling_ = null;
        overallSamplingBuilder_ = null;
      }
      if (customTagsBuilder_ == null) {
        customTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        customTagsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_Tracing_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.Tracing getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.route.v3.Tracing.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.Tracing build() {
      io.envoyproxy.envoy.config.route.v3.Tracing result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.Tracing buildPartial() {
      io.envoyproxy.envoy.config.route.v3.Tracing result = new io.envoyproxy.envoy.config.route.v3.Tracing(this);
      int from_bitField0_ = bitField0_;
      if (clientSamplingBuilder_ == null) {
        result.clientSampling_ = clientSampling_;
      } else {
        result.clientSampling_ = clientSamplingBuilder_.build();
      }
      if (randomSamplingBuilder_ == null) {
        result.randomSampling_ = randomSampling_;
      } else {
        result.randomSampling_ = randomSamplingBuilder_.build();
      }
      if (overallSamplingBuilder_ == null) {
        result.overallSampling_ = overallSampling_;
      } else {
        result.overallSampling_ = overallSamplingBuilder_.build();
      }
      if (customTagsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          customTags_ = java.util.Collections.unmodifiableList(customTags_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.customTags_ = customTags_;
      } else {
        result.customTags_ = customTagsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.route.v3.Tracing) {
        return mergeFrom((io.envoyproxy.envoy.config.route.v3.Tracing)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.route.v3.Tracing other) {
      if (other == io.envoyproxy.envoy.config.route.v3.Tracing.getDefaultInstance()) return this;
      if (other.hasClientSampling()) {
        mergeClientSampling(other.getClientSampling());
      }
      if (other.hasRandomSampling()) {
        mergeRandomSampling(other.getRandomSampling());
      }
      if (other.hasOverallSampling()) {
        mergeOverallSampling(other.getOverallSampling());
      }
      if (customTagsBuilder_ == null) {
        if (!other.customTags_.isEmpty()) {
          if (customTags_.isEmpty()) {
            customTags_ = other.customTags_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCustomTagsIsMutable();
            customTags_.addAll(other.customTags_);
          }
          onChanged();
        }
      } else {
        if (!other.customTags_.isEmpty()) {
          if (customTagsBuilder_.isEmpty()) {
            customTagsBuilder_.dispose();
            customTagsBuilder_ = null;
            customTags_ = other.customTags_;
            bitField0_ = (bitField0_ & ~0x00000001);
            customTagsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCustomTagsFieldBuilder() : null;
          } else {
            customTagsBuilder_.addAllMessages(other.customTags_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.route.v3.Tracing parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.route.v3.Tracing) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.type.v3.FractionalPercent clientSampling_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder> clientSamplingBuilder_;
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     * @return Whether the clientSampling field is set.
     */
    public boolean hasClientSampling() {
      return clientSamplingBuilder_ != null || clientSampling_ != null;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     * @return The clientSampling.
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercent getClientSampling() {
      if (clientSamplingBuilder_ == null) {
        return clientSampling_ == null ? io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : clientSampling_;
      } else {
        return clientSamplingBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    public Builder setClientSampling(io.envoyproxy.envoy.type.v3.FractionalPercent value) {
      if (clientSamplingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        clientSampling_ = value;
        onChanged();
      } else {
        clientSamplingBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    public Builder setClientSampling(
        io.envoyproxy.envoy.type.v3.FractionalPercent.Builder builderForValue) {
      if (clientSamplingBuilder_ == null) {
        clientSampling_ = builderForValue.build();
        onChanged();
      } else {
        clientSamplingBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    public Builder mergeClientSampling(io.envoyproxy.envoy.type.v3.FractionalPercent value) {
      if (clientSamplingBuilder_ == null) {
        if (clientSampling_ != null) {
          clientSampling_ =
            io.envoyproxy.envoy.type.v3.FractionalPercent.newBuilder(clientSampling_).mergeFrom(value).buildPartial();
        } else {
          clientSampling_ = value;
        }
        onChanged();
      } else {
        clientSamplingBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    public Builder clearClientSampling() {
      if (clientSamplingBuilder_ == null) {
        clientSampling_ = null;
        onChanged();
      } else {
        clientSampling_ = null;
        clientSamplingBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercent.Builder getClientSamplingBuilder() {
      
      onChanged();
      return getClientSamplingFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getClientSamplingOrBuilder() {
      if (clientSamplingBuilder_ != null) {
        return clientSamplingBuilder_.getMessageOrBuilder();
      } else {
        return clientSampling_ == null ?
            io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : clientSampling_;
      }
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be force
     * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
     * header is set. This field is a direct analog for the runtime variable
     * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
     * &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder> 
        getClientSamplingFieldBuilder() {
      if (clientSamplingBuilder_ == null) {
        clientSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder>(
                getClientSampling(),
                getParentForChildren(),
                isClean());
        clientSampling_ = null;
      }
      return clientSamplingBuilder_;
    }

    private io.envoyproxy.envoy.type.v3.FractionalPercent randomSampling_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder> randomSamplingBuilder_;
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     * @return Whether the randomSampling field is set.
     */
    public boolean hasRandomSampling() {
      return randomSamplingBuilder_ != null || randomSampling_ != null;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     * @return The randomSampling.
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercent getRandomSampling() {
      if (randomSamplingBuilder_ == null) {
        return randomSampling_ == null ? io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : randomSampling_;
      } else {
        return randomSamplingBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    public Builder setRandomSampling(io.envoyproxy.envoy.type.v3.FractionalPercent value) {
      if (randomSamplingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        randomSampling_ = value;
        onChanged();
      } else {
        randomSamplingBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    public Builder setRandomSampling(
        io.envoyproxy.envoy.type.v3.FractionalPercent.Builder builderForValue) {
      if (randomSamplingBuilder_ == null) {
        randomSampling_ = builderForValue.build();
        onChanged();
      } else {
        randomSamplingBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    public Builder mergeRandomSampling(io.envoyproxy.envoy.type.v3.FractionalPercent value) {
      if (randomSamplingBuilder_ == null) {
        if (randomSampling_ != null) {
          randomSampling_ =
            io.envoyproxy.envoy.type.v3.FractionalPercent.newBuilder(randomSampling_).mergeFrom(value).buildPartial();
        } else {
          randomSampling_ = value;
        }
        onChanged();
      } else {
        randomSamplingBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    public Builder clearRandomSampling() {
      if (randomSamplingBuilder_ == null) {
        randomSampling_ = null;
        onChanged();
      } else {
        randomSampling_ = null;
        randomSamplingBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercent.Builder getRandomSamplingBuilder() {
      
      onChanged();
      return getRandomSamplingFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getRandomSamplingOrBuilder() {
      if (randomSamplingBuilder_ != null) {
        return randomSamplingBuilder_.getMessageOrBuilder();
      } else {
        return randomSampling_ == null ?
            io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : randomSampling_;
      }
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be randomly
     * selected for trace generation, if not requested by the client or not forced. This field is
     * a direct analog for the runtime variable 'tracing.random_sampling' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder> 
        getRandomSamplingFieldBuilder() {
      if (randomSamplingBuilder_ == null) {
        randomSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder>(
                getRandomSampling(),
                getParentForChildren(),
                isClean());
        randomSampling_ = null;
      }
      return randomSamplingBuilder_;
    }

    private io.envoyproxy.envoy.type.v3.FractionalPercent overallSampling_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder> overallSamplingBuilder_;
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     * @return Whether the overallSampling field is set.
     */
    public boolean hasOverallSampling() {
      return overallSamplingBuilder_ != null || overallSampling_ != null;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     * @return The overallSampling.
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercent getOverallSampling() {
      if (overallSamplingBuilder_ == null) {
        return overallSampling_ == null ? io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : overallSampling_;
      } else {
        return overallSamplingBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    public Builder setOverallSampling(io.envoyproxy.envoy.type.v3.FractionalPercent value) {
      if (overallSamplingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        overallSampling_ = value;
        onChanged();
      } else {
        overallSamplingBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    public Builder setOverallSampling(
        io.envoyproxy.envoy.type.v3.FractionalPercent.Builder builderForValue) {
      if (overallSamplingBuilder_ == null) {
        overallSampling_ = builderForValue.build();
        onChanged();
      } else {
        overallSamplingBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    public Builder mergeOverallSampling(io.envoyproxy.envoy.type.v3.FractionalPercent value) {
      if (overallSamplingBuilder_ == null) {
        if (overallSampling_ != null) {
          overallSampling_ =
            io.envoyproxy.envoy.type.v3.FractionalPercent.newBuilder(overallSampling_).mergeFrom(value).buildPartial();
        } else {
          overallSampling_ = value;
        }
        onChanged();
      } else {
        overallSamplingBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    public Builder clearOverallSampling() {
      if (overallSamplingBuilder_ == null) {
        overallSampling_ = null;
        onChanged();
      } else {
        overallSampling_ = null;
        overallSamplingBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercent.Builder getOverallSamplingBuilder() {
      
      onChanged();
      return getOverallSamplingFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getOverallSamplingOrBuilder() {
      if (overallSamplingBuilder_ != null) {
        return overallSamplingBuilder_.getMessageOrBuilder();
      } else {
        return overallSampling_ == null ?
            io.envoyproxy.envoy.type.v3.FractionalPercent.getDefaultInstance() : overallSampling_;
      }
    }
    /**
     * <pre>
     * Target percentage of requests managed by this HTTP connection manager that will be traced
     * after all other sampling checks have been applied (client-directed, force tracing, random
     * sampling). This field functions as an upper limit on the total configured sampling rate. For
     * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
     * of client requests with the appropriate headers to be force traced. This field is a direct
     * analog for the runtime variable 'tracing.global_enabled' in the
     * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
     * Default: 100%
     * </pre>
     *
     * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder> 
        getOverallSamplingFieldBuilder() {
      if (overallSamplingBuilder_ == null) {
        overallSamplingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.FractionalPercent, io.envoyproxy.envoy.type.v3.FractionalPercent.Builder, io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder>(
                getOverallSampling(),
                getParentForChildren(),
                isClean());
        overallSampling_ = null;
      }
      return overallSamplingBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.type.tracing.v3.CustomTag> customTags_ =
      java.util.Collections.emptyList();
    private void ensureCustomTagsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        customTags_ = new java.util.ArrayList<io.envoyproxy.envoy.type.tracing.v3.CustomTag>(customTags_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.type.tracing.v3.CustomTag, io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder, io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder> customTagsBuilder_;

    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public java.util.List<io.envoyproxy.envoy.type.tracing.v3.CustomTag> getCustomTagsList() {
      if (customTagsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(customTags_);
      } else {
        return customTagsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public int getCustomTagsCount() {
      if (customTagsBuilder_ == null) {
        return customTags_.size();
      } else {
        return customTagsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public io.envoyproxy.envoy.type.tracing.v3.CustomTag getCustomTags(int index) {
      if (customTagsBuilder_ == null) {
        return customTags_.get(index);
      } else {
        return customTagsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder setCustomTags(
        int index, io.envoyproxy.envoy.type.tracing.v3.CustomTag value) {
      if (customTagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCustomTagsIsMutable();
        customTags_.set(index, value);
        onChanged();
      } else {
        customTagsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder setCustomTags(
        int index, io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder builderForValue) {
      if (customTagsBuilder_ == null) {
        ensureCustomTagsIsMutable();
        customTags_.set(index, builderForValue.build());
        onChanged();
      } else {
        customTagsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder addCustomTags(io.envoyproxy.envoy.type.tracing.v3.CustomTag value) {
      if (customTagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCustomTagsIsMutable();
        customTags_.add(value);
        onChanged();
      } else {
        customTagsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder addCustomTags(
        int index, io.envoyproxy.envoy.type.tracing.v3.CustomTag value) {
      if (customTagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCustomTagsIsMutable();
        customTags_.add(index, value);
        onChanged();
      } else {
        customTagsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder addCustomTags(
        io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder builderForValue) {
      if (customTagsBuilder_ == null) {
        ensureCustomTagsIsMutable();
        customTags_.add(builderForValue.build());
        onChanged();
      } else {
        customTagsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder addCustomTags(
        int index, io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder builderForValue) {
      if (customTagsBuilder_ == null) {
        ensureCustomTagsIsMutable();
        customTags_.add(index, builderForValue.build());
        onChanged();
      } else {
        customTagsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder addAllCustomTags(
        java.lang.Iterable<? extends io.envoyproxy.envoy.type.tracing.v3.CustomTag> values) {
      if (customTagsBuilder_ == null) {
        ensureCustomTagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, customTags_);
        onChanged();
      } else {
        customTagsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder clearCustomTags() {
      if (customTagsBuilder_ == null) {
        customTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        customTagsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public Builder removeCustomTags(int index) {
      if (customTagsBuilder_ == null) {
        ensureCustomTagsIsMutable();
        customTags_.remove(index);
        onChanged();
      } else {
        customTagsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder getCustomTagsBuilder(
        int index) {
      return getCustomTagsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder getCustomTagsOrBuilder(
        int index) {
      if (customTagsBuilder_ == null) {
        return customTags_.get(index);  } else {
        return customTagsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder> 
         getCustomTagsOrBuilderList() {
      if (customTagsBuilder_ != null) {
        return customTagsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(customTags_);
      }
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder addCustomTagsBuilder() {
      return getCustomTagsFieldBuilder().addBuilder(
          io.envoyproxy.envoy.type.tracing.v3.CustomTag.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder addCustomTagsBuilder(
        int index) {
      return getCustomTagsFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.type.tracing.v3.CustomTag.getDefaultInstance());
    }
    /**
     * <pre>
     * A list of custom tags with unique tag name to create tags for the active span.
     * It will take effect after merging with the :ref:`corresponding configuration
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
     * configured in the HTTP connection manager. If two tags with the same name are configured
     * each in the HTTP connection manager and the route level, the one configured here takes
     * priority.
     * </pre>
     *
     * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
     */
    public java.util.List<io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder> 
         getCustomTagsBuilderList() {
      return getCustomTagsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.type.tracing.v3.CustomTag, io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder, io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder> 
        getCustomTagsFieldBuilder() {
      if (customTagsBuilder_ == null) {
        customTagsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.type.tracing.v3.CustomTag, io.envoyproxy.envoy.type.tracing.v3.CustomTag.Builder, io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder>(
                customTags_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        customTags_ = null;
      }
      return customTagsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.route.v3.Tracing)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.route.v3.Tracing)
  private static final io.envoyproxy.envoy.config.route.v3.Tracing DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.route.v3.Tracing();
  }

  public static io.envoyproxy.envoy.config.route.v3.Tracing getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Tracing>
      PARSER = new com.google.protobuf.AbstractParser<Tracing>() {
    @java.lang.Override
    public Tracing parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Tracing(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Tracing> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Tracing> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.Tracing getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

