// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

public interface RateLimitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.RateLimit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Refers to the stage set in the filter. The rate limit configuration only
   * applies to filters with the same stage number. The default stage number is
   * 0.
   * .. note::
   *   The filter supports a range of 0 - 10 inclusively for stage numbers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value stage = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the stage field is set.
   */
  boolean hasStage();
  /**
   * <pre>
   * Refers to the stage set in the filter. The rate limit configuration only
   * applies to filters with the same stage number. The default stage number is
   * 0.
   * .. note::
   *   The filter supports a range of 0 - 10 inclusively for stage numbers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value stage = 1 [(.validate.rules) = { ... }</code>
   * @return The stage.
   */
  com.google.protobuf.UInt32Value getStage();
  /**
   * <pre>
   * Refers to the stage set in the filter. The rate limit configuration only
   * applies to filters with the same stage number. The default stage number is
   * 0.
   * .. note::
   *   The filter supports a range of 0 - 10 inclusively for stage numbers.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value stage = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getStageOrBuilder();

  /**
   * <pre>
   * The key to be set in runtime to disable this rate limit configuration.
   * </pre>
   *
   * <code>string disable_key = 2;</code>
   * @return The disableKey.
   */
  java.lang.String getDisableKey();
  /**
   * <pre>
   * The key to be set in runtime to disable this rate limit configuration.
   * </pre>
   *
   * <code>string disable_key = 2;</code>
   * @return The bytes for disableKey.
   */
  com.google.protobuf.ByteString
      getDisableKeyBytes();

  /**
   * <pre>
   * A list of actions that are to be applied for this rate limit configuration.
   * Order matters as the actions are processed sequentially and the descriptor
   * is composed by appending descriptor entries in that sequence. If an action
   * cannot append a descriptor entry, no descriptor is generated for the
   * configuration. See :ref:`composing actions
   * &lt;config_http_filters_rate_limit_composing_actions&gt;` for additional documentation.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RateLimit.Action actions = 3 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.route.v3.RateLimit.Action> 
      getActionsList();
  /**
   * <pre>
   * A list of actions that are to be applied for this rate limit configuration.
   * Order matters as the actions are processed sequentially and the descriptor
   * is composed by appending descriptor entries in that sequence. If an action
   * cannot append a descriptor entry, no descriptor is generated for the
   * configuration. See :ref:`composing actions
   * &lt;config_http_filters_rate_limit_composing_actions&gt;` for additional documentation.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RateLimit.Action actions = 3 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.route.v3.RateLimit.Action getActions(int index);
  /**
   * <pre>
   * A list of actions that are to be applied for this rate limit configuration.
   * Order matters as the actions are processed sequentially and the descriptor
   * is composed by appending descriptor entries in that sequence. If an action
   * cannot append a descriptor entry, no descriptor is generated for the
   * configuration. See :ref:`composing actions
   * &lt;config_http_filters_rate_limit_composing_actions&gt;` for additional documentation.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RateLimit.Action actions = 3 [(.validate.rules) = { ... }</code>
   */
  int getActionsCount();
  /**
   * <pre>
   * A list of actions that are to be applied for this rate limit configuration.
   * Order matters as the actions are processed sequentially and the descriptor
   * is composed by appending descriptor entries in that sequence. If an action
   * cannot append a descriptor entry, no descriptor is generated for the
   * configuration. See :ref:`composing actions
   * &lt;config_http_filters_rate_limit_composing_actions&gt;` for additional documentation.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RateLimit.Action actions = 3 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.route.v3.RateLimit.ActionOrBuilder> 
      getActionsOrBuilderList();
  /**
   * <pre>
   * A list of actions that are to be applied for this rate limit configuration.
   * Order matters as the actions are processed sequentially and the descriptor
   * is composed by appending descriptor entries in that sequence. If an action
   * cannot append a descriptor entry, no descriptor is generated for the
   * configuration. See :ref:`composing actions
   * &lt;config_http_filters_rate_limit_composing_actions&gt;` for additional documentation.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.RateLimit.Action actions = 3 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.route.v3.RateLimit.ActionOrBuilder getActionsOrBuilder(
      int index);

  /**
   * <pre>
   * An optional limit override to be appended to the descriptor produced by this
   * rate limit configuration. If the override value is invalid or cannot be resolved
   * from metadata, no override is provided. See :ref:`rate limit override
   * &lt;config_http_filters_rate_limit_rate_limit_override&gt;` for more information.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RateLimit.Override limit = 4;</code>
   * @return Whether the limit field is set.
   */
  boolean hasLimit();
  /**
   * <pre>
   * An optional limit override to be appended to the descriptor produced by this
   * rate limit configuration. If the override value is invalid or cannot be resolved
   * from metadata, no override is provided. See :ref:`rate limit override
   * &lt;config_http_filters_rate_limit_rate_limit_override&gt;` for more information.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RateLimit.Override limit = 4;</code>
   * @return The limit.
   */
  io.envoyproxy.envoy.config.route.v3.RateLimit.Override getLimit();
  /**
   * <pre>
   * An optional limit override to be appended to the descriptor produced by this
   * rate limit configuration. If the override value is invalid or cannot be resolved
   * from metadata, no override is provided. See :ref:`rate limit override
   * &lt;config_http_filters_rate_limit_rate_limit_override&gt;` for more information.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RateLimit.Override limit = 4;</code>
   */
  io.envoyproxy.envoy.config.route.v3.RateLimit.OverrideOrBuilder getLimitOrBuilder();
}
