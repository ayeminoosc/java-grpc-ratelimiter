// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

public interface HedgePolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.HedgePolicy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the number of initial requests that should be sent upstream.
   * Must be at least 1.
   * Defaults to 1.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_requests = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the initialRequests field is set.
   */
  boolean hasInitialRequests();
  /**
   * <pre>
   * Specifies the number of initial requests that should be sent upstream.
   * Must be at least 1.
   * Defaults to 1.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_requests = 1 [(.validate.rules) = { ... }</code>
   * @return The initialRequests.
   */
  com.google.protobuf.UInt32Value getInitialRequests();
  /**
   * <pre>
   * Specifies the number of initial requests that should be sent upstream.
   * Must be at least 1.
   * Defaults to 1.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value initial_requests = 1 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getInitialRequestsOrBuilder();

  /**
   * <pre>
   * Specifies a probability that an additional upstream request should be sent
   * on top of what is specified by initial_requests.
   * Defaults to 0.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent additional_request_chance = 2;</code>
   * @return Whether the additionalRequestChance field is set.
   */
  boolean hasAdditionalRequestChance();
  /**
   * <pre>
   * Specifies a probability that an additional upstream request should be sent
   * on top of what is specified by initial_requests.
   * Defaults to 0.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent additional_request_chance = 2;</code>
   * @return The additionalRequestChance.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getAdditionalRequestChance();
  /**
   * <pre>
   * Specifies a probability that an additional upstream request should be sent
   * on top of what is specified by initial_requests.
   * Defaults to 0.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent additional_request_chance = 2;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getAdditionalRequestChanceOrBuilder();

  /**
   * <pre>
   * Indicates that a hedged request should be sent when the per-try timeout is hit.
   * This means that a retry will be issued without resetting the original request, leaving multiple upstream requests in flight.
   * The first request to complete successfully will be the one returned to the caller.
   * * At any time, a successful response (i.e. not triggering any of the retry-on conditions) would be returned to the client.
   * * Before per-try timeout, an error response (per retry-on conditions) would be retried immediately or returned ot the client
   *   if there are no more retries left.
   * * After per-try timeout, an error response would be discarded, as a retry in the form of a hedged request is already in progress.
   * Note: For this to have effect, you must have a :ref:`RetryPolicy &lt;envoy_api_msg_config.route.v3.RetryPolicy&gt;` that retries at least
   * one error code and specifies a maximum number of retries.
   * Defaults to false.
   * </pre>
   *
   * <code>bool hedge_on_per_try_timeout = 3;</code>
   * @return The hedgeOnPerTryTimeout.
   */
  boolean getHedgeOnPerTryTimeout();
}
