// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

public interface CorsPolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.CorsPolicy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allow_origin_string_match = 11;</code>
   */
  java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> 
      getAllowOriginStringMatchList();
  /**
   * <pre>
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allow_origin_string_match = 11;</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcher getAllowOriginStringMatch(int index);
  /**
   * <pre>
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allow_origin_string_match = 11;</code>
   */
  int getAllowOriginStringMatchCount();
  /**
   * <pre>
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allow_origin_string_match = 11;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> 
      getAllowOriginStringMatchOrBuilderList();
  /**
   * <pre>
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher allow_origin_string_match = 11;</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getAllowOriginStringMatchOrBuilder(
      int index);

  /**
   * <pre>
   * Specifies the content for the *access-control-allow-methods* header.
   * </pre>
   *
   * <code>string allow_methods = 2;</code>
   * @return The allowMethods.
   */
  java.lang.String getAllowMethods();
  /**
   * <pre>
   * Specifies the content for the *access-control-allow-methods* header.
   * </pre>
   *
   * <code>string allow_methods = 2;</code>
   * @return The bytes for allowMethods.
   */
  com.google.protobuf.ByteString
      getAllowMethodsBytes();

  /**
   * <pre>
   * Specifies the content for the *access-control-allow-headers* header.
   * </pre>
   *
   * <code>string allow_headers = 3;</code>
   * @return The allowHeaders.
   */
  java.lang.String getAllowHeaders();
  /**
   * <pre>
   * Specifies the content for the *access-control-allow-headers* header.
   * </pre>
   *
   * <code>string allow_headers = 3;</code>
   * @return The bytes for allowHeaders.
   */
  com.google.protobuf.ByteString
      getAllowHeadersBytes();

  /**
   * <pre>
   * Specifies the content for the *access-control-expose-headers* header.
   * </pre>
   *
   * <code>string expose_headers = 4;</code>
   * @return The exposeHeaders.
   */
  java.lang.String getExposeHeaders();
  /**
   * <pre>
   * Specifies the content for the *access-control-expose-headers* header.
   * </pre>
   *
   * <code>string expose_headers = 4;</code>
   * @return The bytes for exposeHeaders.
   */
  com.google.protobuf.ByteString
      getExposeHeadersBytes();

  /**
   * <pre>
   * Specifies the content for the *access-control-max-age* header.
   * </pre>
   *
   * <code>string max_age = 5;</code>
   * @return The maxAge.
   */
  java.lang.String getMaxAge();
  /**
   * <pre>
   * Specifies the content for the *access-control-max-age* header.
   * </pre>
   *
   * <code>string max_age = 5;</code>
   * @return The bytes for maxAge.
   */
  com.google.protobuf.ByteString
      getMaxAgeBytes();

  /**
   * <pre>
   * Specifies whether the resource allows credentials.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_credentials = 6;</code>
   * @return Whether the allowCredentials field is set.
   */
  boolean hasAllowCredentials();
  /**
   * <pre>
   * Specifies whether the resource allows credentials.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_credentials = 6;</code>
   * @return The allowCredentials.
   */
  com.google.protobuf.BoolValue getAllowCredentials();
  /**
   * <pre>
   * Specifies whether the resource allows credentials.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue allow_credentials = 6;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getAllowCredentialsOrBuilder();

  /**
   * <pre>
   * Specifies the % of requests for which the CORS filter is enabled.
   * If neither ``enabled``, ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS
   * filter will be enabled for 100% of the requests.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is
   * specified, Envoy will lookup the runtime key to get the percentage of requests to filter.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 9;</code>
   * @return Whether the filterEnabled field is set.
   */
  boolean hasFilterEnabled();
  /**
   * <pre>
   * Specifies the % of requests for which the CORS filter is enabled.
   * If neither ``enabled``, ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS
   * filter will be enabled for 100% of the requests.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is
   * specified, Envoy will lookup the runtime key to get the percentage of requests to filter.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 9;</code>
   * @return The filterEnabled.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnabled();
  /**
   * <pre>
   * Specifies the % of requests for which the CORS filter is enabled.
   * If neither ``enabled``, ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS
   * filter will be enabled for 100% of the requests.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is
   * specified, Envoy will lookup the runtime key to get the percentage of requests to filter.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 9;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnabledOrBuilder();

  /**
   * <pre>
   * Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
   * enforced.
   * This field is intended to be used when ``filter_enabled`` and ``enabled`` are off. One of those
   * fields have to explicitly disable the filter in order for this setting to take effect.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* to determine if it's valid but will not enforce any policies.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 10;</code>
   * @return Whether the shadowEnabled field is set.
   */
  boolean hasShadowEnabled();
  /**
   * <pre>
   * Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
   * enforced.
   * This field is intended to be used when ``filter_enabled`` and ``enabled`` are off. One of those
   * fields have to explicitly disable the filter in order for this setting to take effect.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* to determine if it's valid but will not enforce any policies.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 10;</code>
   * @return The shadowEnabled.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getShadowEnabled();
  /**
   * <pre>
   * Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
   * enforced.
   * This field is intended to be used when ``filter_enabled`` and ``enabled`` are off. One of those
   * fields have to explicitly disable the filter in order for this setting to take effect.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* to determine if it's valid but will not enforce any policies.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 10;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getShadowEnabledOrBuilder();

  public io.envoyproxy.envoy.config.route.v3.CorsPolicy.EnabledSpecifierCase getEnabledSpecifierCase();
}
