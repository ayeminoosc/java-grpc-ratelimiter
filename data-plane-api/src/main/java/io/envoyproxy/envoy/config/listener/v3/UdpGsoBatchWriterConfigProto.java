// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/listener/v3/udp_gso_batch_writer_config.proto

package io.envoyproxy.envoy.config.listener.v3;

public final class UdpGsoBatchWriterConfigProto {
  private UdpGsoBatchWriterConfigProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_envoy_config_listener_v3_UdpGsoBatchWriterOptions_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_envoy_config_listener_v3_UdpGsoBatchWriterOptions_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n:envoy/config/listener/v3/udp_gso_batch" +
      "_writer_config.proto\022\030envoy.config.liste" +
      "ner.v3\032\036google/protobuf/duration.proto\032\036" +
      "google/protobuf/wrappers.proto\032\035udpa/ann" +
      "otations/status.proto\032!udpa/annotations/" +
      "versioning.proto\"\032\n\030UdpGsoBatchWriterOpt" +
      "ionsBP\n&io.envoyproxy.envoy.config.liste" +
      "ner.v3B\034UdpGsoBatchWriterConfigProtoP\001\272\200" +
      "\310\321\006\002\020\002b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DurationProto.getDescriptor(),
          com.google.protobuf.WrappersProto.getDescriptor(),
          udpa.annotations.Status.getDescriptor(),
          udpa.annotations.Versioning.getDescriptor(),
        });
    internal_static_envoy_config_listener_v3_UdpGsoBatchWriterOptions_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_envoy_config_listener_v3_UdpGsoBatchWriterOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_envoy_config_listener_v3_UdpGsoBatchWriterOptions_descriptor,
        new java.lang.String[] { });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(udpa.annotations.Status.fileStatus);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.DurationProto.getDescriptor();
    com.google.protobuf.WrappersProto.getDescriptor();
    udpa.annotations.Status.getDescriptor();
    udpa.annotations.Versioning.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
