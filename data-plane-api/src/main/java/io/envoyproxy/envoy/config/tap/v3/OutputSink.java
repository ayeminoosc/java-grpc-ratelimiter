// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/tap/v3/common.proto

package io.envoyproxy.envoy.config.tap.v3;

/**
 * <pre>
 * Tap output sink configuration.
 * </pre>
 *
 * Protobuf type {@code envoy.config.tap.v3.OutputSink}
 */
public final class OutputSink extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.tap.v3.OutputSink)
    OutputSinkOrBuilder {
private static final long serialVersionUID = 0L;
  // Use OutputSink.newBuilder() to construct.
  private OutputSink(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private OutputSink() {
    format_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new OutputSink();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private OutputSink(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            format_ = rawValue;
            break;
          }
          case 18: {
            io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.Builder subBuilder = null;
            if (outputSinkTypeCase_ == 2) {
              subBuilder = ((io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_).toBuilder();
            }
            outputSinkType_ =
                input.readMessage(io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_);
              outputSinkType_ = subBuilder.buildPartial();
            }
            outputSinkTypeCase_ = 2;
            break;
          }
          case 26: {
            io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.Builder subBuilder = null;
            if (outputSinkTypeCase_ == 3) {
              subBuilder = ((io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_).toBuilder();
            }
            outputSinkType_ =
                input.readMessage(io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_);
              outputSinkType_ = subBuilder.buildPartial();
            }
            outputSinkTypeCase_ = 3;
            break;
          }
          case 34: {
            io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.Builder subBuilder = null;
            if (outputSinkTypeCase_ == 4) {
              subBuilder = ((io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_).toBuilder();
            }
            outputSinkType_ =
                input.readMessage(io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_);
              outputSinkType_ = subBuilder.buildPartial();
            }
            outputSinkTypeCase_ = 4;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.tap.v3.CommonProto.internal_static_envoy_config_tap_v3_OutputSink_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.tap.v3.CommonProto.internal_static_envoy_config_tap_v3_OutputSink_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.tap.v3.OutputSink.class, io.envoyproxy.envoy.config.tap.v3.OutputSink.Builder.class);
  }

  /**
   * <pre>
   * Output format. All output is in the form of one or more :ref:`TraceWrapper
   * &lt;envoy_api_msg_data.tap.v3.TraceWrapper&gt;` messages. This enumeration indicates
   * how those messages are written. Note that not all sinks support all output formats. See
   * individual sink documentation for more information.
   * </pre>
   *
   * Protobuf enum {@code envoy.config.tap.v3.OutputSink.Format}
   */
  public enum Format
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Each message will be written as JSON. Any :ref:`body &lt;envoy_api_msg_data.tap.v3.Body&gt;`
     * data will be present in the :ref:`as_bytes
     * &lt;envoy_api_field_data.tap.v3.Body.as_bytes&gt;` field. This means that body data will be
     * base64 encoded as per the `proto3 JSON mappings
     * &lt;https://developers.google.com/protocol-buffers/docs/proto3#json&gt;`_.
     * </pre>
     *
     * <code>JSON_BODY_AS_BYTES = 0;</code>
     */
    JSON_BODY_AS_BYTES(0),
    /**
     * <pre>
     * Each message will be written as JSON. Any :ref:`body &lt;envoy_api_msg_data.tap.v3.Body&gt;`
     * data will be present in the :ref:`as_string
     * &lt;envoy_api_field_data.tap.v3.Body.as_string&gt;` field. This means that body data will be
     * string encoded as per the `proto3 JSON mappings
     * &lt;https://developers.google.com/protocol-buffers/docs/proto3#json&gt;`_. This format type is
     * useful when it is known that that body is human readable (e.g., JSON over HTTP) and the
     * user wishes to view it directly without being forced to base64 decode the body.
     * </pre>
     *
     * <code>JSON_BODY_AS_STRING = 1;</code>
     */
    JSON_BODY_AS_STRING(1),
    /**
     * <pre>
     * Binary proto format. Note that binary proto is not self-delimiting. If a sink writes
     * multiple binary messages without any length information the data stream will not be
     * useful. However, for certain sinks that are self-delimiting (e.g., one message per file)
     * this output format makes consumption simpler.
     * </pre>
     *
     * <code>PROTO_BINARY = 2;</code>
     */
    PROTO_BINARY(2),
    /**
     * <pre>
     * Messages are written as a sequence tuples, where each tuple is the message length encoded
     * as a `protobuf 32-bit varint
     * &lt;https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.io.coded_stream&gt;`_
     * followed by the binary message. The messages can be read back using the language specific
     * protobuf coded stream implementation to obtain the message length and the message.
     * </pre>
     *
     * <code>PROTO_BINARY_LENGTH_DELIMITED = 3;</code>
     */
    PROTO_BINARY_LENGTH_DELIMITED(3),
    /**
     * <pre>
     * Text proto format.
     * </pre>
     *
     * <code>PROTO_TEXT = 4;</code>
     */
    PROTO_TEXT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Each message will be written as JSON. Any :ref:`body &lt;envoy_api_msg_data.tap.v3.Body&gt;`
     * data will be present in the :ref:`as_bytes
     * &lt;envoy_api_field_data.tap.v3.Body.as_bytes&gt;` field. This means that body data will be
     * base64 encoded as per the `proto3 JSON mappings
     * &lt;https://developers.google.com/protocol-buffers/docs/proto3#json&gt;`_.
     * </pre>
     *
     * <code>JSON_BODY_AS_BYTES = 0;</code>
     */
    public static final int JSON_BODY_AS_BYTES_VALUE = 0;
    /**
     * <pre>
     * Each message will be written as JSON. Any :ref:`body &lt;envoy_api_msg_data.tap.v3.Body&gt;`
     * data will be present in the :ref:`as_string
     * &lt;envoy_api_field_data.tap.v3.Body.as_string&gt;` field. This means that body data will be
     * string encoded as per the `proto3 JSON mappings
     * &lt;https://developers.google.com/protocol-buffers/docs/proto3#json&gt;`_. This format type is
     * useful when it is known that that body is human readable (e.g., JSON over HTTP) and the
     * user wishes to view it directly without being forced to base64 decode the body.
     * </pre>
     *
     * <code>JSON_BODY_AS_STRING = 1;</code>
     */
    public static final int JSON_BODY_AS_STRING_VALUE = 1;
    /**
     * <pre>
     * Binary proto format. Note that binary proto is not self-delimiting. If a sink writes
     * multiple binary messages without any length information the data stream will not be
     * useful. However, for certain sinks that are self-delimiting (e.g., one message per file)
     * this output format makes consumption simpler.
     * </pre>
     *
     * <code>PROTO_BINARY = 2;</code>
     */
    public static final int PROTO_BINARY_VALUE = 2;
    /**
     * <pre>
     * Messages are written as a sequence tuples, where each tuple is the message length encoded
     * as a `protobuf 32-bit varint
     * &lt;https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.io.coded_stream&gt;`_
     * followed by the binary message. The messages can be read back using the language specific
     * protobuf coded stream implementation to obtain the message length and the message.
     * </pre>
     *
     * <code>PROTO_BINARY_LENGTH_DELIMITED = 3;</code>
     */
    public static final int PROTO_BINARY_LENGTH_DELIMITED_VALUE = 3;
    /**
     * <pre>
     * Text proto format.
     * </pre>
     *
     * <code>PROTO_TEXT = 4;</code>
     */
    public static final int PROTO_TEXT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Format valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Format forNumber(int value) {
      switch (value) {
        case 0: return JSON_BODY_AS_BYTES;
        case 1: return JSON_BODY_AS_STRING;
        case 2: return PROTO_BINARY;
        case 3: return PROTO_BINARY_LENGTH_DELIMITED;
        case 4: return PROTO_TEXT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Format> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Format>() {
            public Format findValueByNumber(int number) {
              return Format.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.tap.v3.OutputSink.getDescriptor().getEnumTypes().get(0);
    }

    private static final Format[] VALUES = values();

    public static Format valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Format(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.config.tap.v3.OutputSink.Format)
  }

  private int outputSinkTypeCase_ = 0;
  private java.lang.Object outputSinkType_;
  public enum OutputSinkTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    STREAMING_ADMIN(2),
    FILE_PER_TAP(3),
    STREAMING_GRPC(4),
    OUTPUTSINKTYPE_NOT_SET(0);
    private final int value;
    private OutputSinkTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OutputSinkTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static OutputSinkTypeCase forNumber(int value) {
      switch (value) {
        case 2: return STREAMING_ADMIN;
        case 3: return FILE_PER_TAP;
        case 4: return STREAMING_GRPC;
        case 0: return OUTPUTSINKTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public OutputSinkTypeCase
  getOutputSinkTypeCase() {
    return OutputSinkTypeCase.forNumber(
        outputSinkTypeCase_);
  }

  public static final int FORMAT_FIELD_NUMBER = 1;
  private int format_;
  /**
   * <pre>
   * Sink output format.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for format.
   */
  @java.lang.Override public int getFormatValue() {
    return format_;
  }
  /**
   * <pre>
   * Sink output format.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
   * @return The format.
   */
  @java.lang.Override public io.envoyproxy.envoy.config.tap.v3.OutputSink.Format getFormat() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.config.tap.v3.OutputSink.Format result = io.envoyproxy.envoy.config.tap.v3.OutputSink.Format.valueOf(format_);
    return result == null ? io.envoyproxy.envoy.config.tap.v3.OutputSink.Format.UNRECOGNIZED : result;
  }

  public static final int STREAMING_ADMIN_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
   * .. attention::
   *   It is only allowed to specify the streaming admin output sink if the tap is being
   *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
   *   been configured to receive tap configuration from some other source (e.g., static
   *   file, XDS, etc.) configuring the streaming admin output type will fail.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
   * @return Whether the streamingAdmin field is set.
   */
  @java.lang.Override
  public boolean hasStreamingAdmin() {
    return outputSinkTypeCase_ == 2;
  }
  /**
   * <pre>
   * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
   * .. attention::
   *   It is only allowed to specify the streaming admin output sink if the tap is being
   *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
   *   been configured to receive tap configuration from some other source (e.g., static
   *   file, XDS, etc.) configuring the streaming admin output type will fail.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
   * @return The streamingAdmin.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink getStreamingAdmin() {
    if (outputSinkTypeCase_ == 2) {
       return (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_;
    }
    return io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance();
  }
  /**
   * <pre>
   * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
   * .. attention::
   *   It is only allowed to specify the streaming admin output sink if the tap is being
   *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
   *   been configured to receive tap configuration from some other source (e.g., static
   *   file, XDS, etc.) configuring the streaming admin output type will fail.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.StreamingAdminSinkOrBuilder getStreamingAdminOrBuilder() {
    if (outputSinkTypeCase_ == 2) {
       return (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_;
    }
    return io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance();
  }

  public static final int FILE_PER_TAP_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Tap output will be written to a file per tap sink.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
   * @return Whether the filePerTap field is set.
   */
  @java.lang.Override
  public boolean hasFilePerTap() {
    return outputSinkTypeCase_ == 3;
  }
  /**
   * <pre>
   * Tap output will be written to a file per tap sink.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
   * @return The filePerTap.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.FilePerTapSink getFilePerTap() {
    if (outputSinkTypeCase_ == 3) {
       return (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_;
    }
    return io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance();
  }
  /**
   * <pre>
   * Tap output will be written to a file per tap sink.
   * </pre>
   *
   * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.FilePerTapSinkOrBuilder getFilePerTapOrBuilder() {
    if (outputSinkTypeCase_ == 3) {
       return (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_;
    }
    return io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance();
  }

  public static final int STREAMING_GRPC_FIELD_NUMBER = 4;
  /**
   * <pre>
   * [#not-implemented-hide:]
   * GrpcService to stream data to. The format argument must be PROTO_BINARY.
   * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
   * </pre>
   *
   * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
   * @return Whether the streamingGrpc field is set.
   */
  @java.lang.Override
  public boolean hasStreamingGrpc() {
    return outputSinkTypeCase_ == 4;
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * GrpcService to stream data to. The format argument must be PROTO_BINARY.
   * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
   * </pre>
   *
   * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
   * @return The streamingGrpc.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink getStreamingGrpc() {
    if (outputSinkTypeCase_ == 4) {
       return (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_;
    }
    return io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance();
  }
  /**
   * <pre>
   * [#not-implemented-hide:]
   * GrpcService to stream data to. The format argument must be PROTO_BINARY.
   * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
   * </pre>
   *
   * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSinkOrBuilder getStreamingGrpcOrBuilder() {
    if (outputSinkTypeCase_ == 4) {
       return (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_;
    }
    return io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (format_ != io.envoyproxy.envoy.config.tap.v3.OutputSink.Format.JSON_BODY_AS_BYTES.getNumber()) {
      output.writeEnum(1, format_);
    }
    if (outputSinkTypeCase_ == 2) {
      output.writeMessage(2, (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_);
    }
    if (outputSinkTypeCase_ == 3) {
      output.writeMessage(3, (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_);
    }
    if (outputSinkTypeCase_ == 4) {
      output.writeMessage(4, (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (format_ != io.envoyproxy.envoy.config.tap.v3.OutputSink.Format.JSON_BODY_AS_BYTES.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, format_);
    }
    if (outputSinkTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_);
    }
    if (outputSinkTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_);
    }
    if (outputSinkTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.tap.v3.OutputSink)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.tap.v3.OutputSink other = (io.envoyproxy.envoy.config.tap.v3.OutputSink) obj;

    if (format_ != other.format_) return false;
    if (!getOutputSinkTypeCase().equals(other.getOutputSinkTypeCase())) return false;
    switch (outputSinkTypeCase_) {
      case 2:
        if (!getStreamingAdmin()
            .equals(other.getStreamingAdmin())) return false;
        break;
      case 3:
        if (!getFilePerTap()
            .equals(other.getFilePerTap())) return false;
        break;
      case 4:
        if (!getStreamingGrpc()
            .equals(other.getStreamingGrpc())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FORMAT_FIELD_NUMBER;
    hash = (53 * hash) + format_;
    switch (outputSinkTypeCase_) {
      case 2:
        hash = (37 * hash) + STREAMING_ADMIN_FIELD_NUMBER;
        hash = (53 * hash) + getStreamingAdmin().hashCode();
        break;
      case 3:
        hash = (37 * hash) + FILE_PER_TAP_FIELD_NUMBER;
        hash = (53 * hash) + getFilePerTap().hashCode();
        break;
      case 4:
        hash = (37 * hash) + STREAMING_GRPC_FIELD_NUMBER;
        hash = (53 * hash) + getStreamingGrpc().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.tap.v3.OutputSink parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.tap.v3.OutputSink prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Tap output sink configuration.
   * </pre>
   *
   * Protobuf type {@code envoy.config.tap.v3.OutputSink}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.tap.v3.OutputSink)
      io.envoyproxy.envoy.config.tap.v3.OutputSinkOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.tap.v3.CommonProto.internal_static_envoy_config_tap_v3_OutputSink_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.tap.v3.CommonProto.internal_static_envoy_config_tap_v3_OutputSink_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.tap.v3.OutputSink.class, io.envoyproxy.envoy.config.tap.v3.OutputSink.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.tap.v3.OutputSink.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      format_ = 0;

      outputSinkTypeCase_ = 0;
      outputSinkType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.tap.v3.CommonProto.internal_static_envoy_config_tap_v3_OutputSink_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.OutputSink getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.tap.v3.OutputSink.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.OutputSink build() {
      io.envoyproxy.envoy.config.tap.v3.OutputSink result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.OutputSink buildPartial() {
      io.envoyproxy.envoy.config.tap.v3.OutputSink result = new io.envoyproxy.envoy.config.tap.v3.OutputSink(this);
      result.format_ = format_;
      if (outputSinkTypeCase_ == 2) {
        if (streamingAdminBuilder_ == null) {
          result.outputSinkType_ = outputSinkType_;
        } else {
          result.outputSinkType_ = streamingAdminBuilder_.build();
        }
      }
      if (outputSinkTypeCase_ == 3) {
        if (filePerTapBuilder_ == null) {
          result.outputSinkType_ = outputSinkType_;
        } else {
          result.outputSinkType_ = filePerTapBuilder_.build();
        }
      }
      if (outputSinkTypeCase_ == 4) {
        if (streamingGrpcBuilder_ == null) {
          result.outputSinkType_ = outputSinkType_;
        } else {
          result.outputSinkType_ = streamingGrpcBuilder_.build();
        }
      }
      result.outputSinkTypeCase_ = outputSinkTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.tap.v3.OutputSink) {
        return mergeFrom((io.envoyproxy.envoy.config.tap.v3.OutputSink)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.tap.v3.OutputSink other) {
      if (other == io.envoyproxy.envoy.config.tap.v3.OutputSink.getDefaultInstance()) return this;
      if (other.format_ != 0) {
        setFormatValue(other.getFormatValue());
      }
      switch (other.getOutputSinkTypeCase()) {
        case STREAMING_ADMIN: {
          mergeStreamingAdmin(other.getStreamingAdmin());
          break;
        }
        case FILE_PER_TAP: {
          mergeFilePerTap(other.getFilePerTap());
          break;
        }
        case STREAMING_GRPC: {
          mergeStreamingGrpc(other.getStreamingGrpc());
          break;
        }
        case OUTPUTSINKTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.tap.v3.OutputSink parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.tap.v3.OutputSink) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int outputSinkTypeCase_ = 0;
    private java.lang.Object outputSinkType_;
    public OutputSinkTypeCase
        getOutputSinkTypeCase() {
      return OutputSinkTypeCase.forNumber(
          outputSinkTypeCase_);
    }

    public Builder clearOutputSinkType() {
      outputSinkTypeCase_ = 0;
      outputSinkType_ = null;
      onChanged();
      return this;
    }


    private int format_ = 0;
    /**
     * <pre>
     * Sink output format.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for format.
     */
    @java.lang.Override public int getFormatValue() {
      return format_;
    }
    /**
     * <pre>
     * Sink output format.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for format to set.
     * @return This builder for chaining.
     */
    public Builder setFormatValue(int value) {
      
      format_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sink output format.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
     * @return The format.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.OutputSink.Format getFormat() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.config.tap.v3.OutputSink.Format result = io.envoyproxy.envoy.config.tap.v3.OutputSink.Format.valueOf(format_);
      return result == null ? io.envoyproxy.envoy.config.tap.v3.OutputSink.Format.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Sink output format.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
     * @param value The format to set.
     * @return This builder for chaining.
     */
    public Builder setFormat(io.envoyproxy.envoy.config.tap.v3.OutputSink.Format value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      format_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sink output format.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.OutputSink.Format format = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearFormat() {
      
      format_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink, io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.Builder, io.envoyproxy.envoy.config.tap.v3.StreamingAdminSinkOrBuilder> streamingAdminBuilder_;
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     * @return Whether the streamingAdmin field is set.
     */
    @java.lang.Override
    public boolean hasStreamingAdmin() {
      return outputSinkTypeCase_ == 2;
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     * @return The streamingAdmin.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink getStreamingAdmin() {
      if (streamingAdminBuilder_ == null) {
        if (outputSinkTypeCase_ == 2) {
          return (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_;
        }
        return io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance();
      } else {
        if (outputSinkTypeCase_ == 2) {
          return streamingAdminBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    public Builder setStreamingAdmin(io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink value) {
      if (streamingAdminBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputSinkType_ = value;
        onChanged();
      } else {
        streamingAdminBuilder_.setMessage(value);
      }
      outputSinkTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    public Builder setStreamingAdmin(
        io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.Builder builderForValue) {
      if (streamingAdminBuilder_ == null) {
        outputSinkType_ = builderForValue.build();
        onChanged();
      } else {
        streamingAdminBuilder_.setMessage(builderForValue.build());
      }
      outputSinkTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    public Builder mergeStreamingAdmin(io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink value) {
      if (streamingAdminBuilder_ == null) {
        if (outputSinkTypeCase_ == 2 &&
            outputSinkType_ != io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance()) {
          outputSinkType_ = io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.newBuilder((io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_)
              .mergeFrom(value).buildPartial();
        } else {
          outputSinkType_ = value;
        }
        onChanged();
      } else {
        if (outputSinkTypeCase_ == 2) {
          streamingAdminBuilder_.mergeFrom(value);
        }
        streamingAdminBuilder_.setMessage(value);
      }
      outputSinkTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    public Builder clearStreamingAdmin() {
      if (streamingAdminBuilder_ == null) {
        if (outputSinkTypeCase_ == 2) {
          outputSinkTypeCase_ = 0;
          outputSinkType_ = null;
          onChanged();
        }
      } else {
        if (outputSinkTypeCase_ == 2) {
          outputSinkTypeCase_ = 0;
          outputSinkType_ = null;
        }
        streamingAdminBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    public io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.Builder getStreamingAdminBuilder() {
      return getStreamingAdminFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.StreamingAdminSinkOrBuilder getStreamingAdminOrBuilder() {
      if ((outputSinkTypeCase_ == 2) && (streamingAdminBuilder_ != null)) {
        return streamingAdminBuilder_.getMessageOrBuilder();
      } else {
        if (outputSinkTypeCase_ == 2) {
          return (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_;
        }
        return io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     * .. attention::
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingAdminSink streaming_admin = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink, io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.Builder, io.envoyproxy.envoy.config.tap.v3.StreamingAdminSinkOrBuilder> 
        getStreamingAdminFieldBuilder() {
      if (streamingAdminBuilder_ == null) {
        if (!(outputSinkTypeCase_ == 2)) {
          outputSinkType_ = io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.getDefaultInstance();
        }
        streamingAdminBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink, io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink.Builder, io.envoyproxy.envoy.config.tap.v3.StreamingAdminSinkOrBuilder>(
                (io.envoyproxy.envoy.config.tap.v3.StreamingAdminSink) outputSinkType_,
                getParentForChildren(),
                isClean());
        outputSinkType_ = null;
      }
      outputSinkTypeCase_ = 2;
      onChanged();;
      return streamingAdminBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.tap.v3.FilePerTapSink, io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.Builder, io.envoyproxy.envoy.config.tap.v3.FilePerTapSinkOrBuilder> filePerTapBuilder_;
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     * @return Whether the filePerTap field is set.
     */
    @java.lang.Override
    public boolean hasFilePerTap() {
      return outputSinkTypeCase_ == 3;
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     * @return The filePerTap.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.FilePerTapSink getFilePerTap() {
      if (filePerTapBuilder_ == null) {
        if (outputSinkTypeCase_ == 3) {
          return (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_;
        }
        return io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance();
      } else {
        if (outputSinkTypeCase_ == 3) {
          return filePerTapBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    public Builder setFilePerTap(io.envoyproxy.envoy.config.tap.v3.FilePerTapSink value) {
      if (filePerTapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputSinkType_ = value;
        onChanged();
      } else {
        filePerTapBuilder_.setMessage(value);
      }
      outputSinkTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    public Builder setFilePerTap(
        io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.Builder builderForValue) {
      if (filePerTapBuilder_ == null) {
        outputSinkType_ = builderForValue.build();
        onChanged();
      } else {
        filePerTapBuilder_.setMessage(builderForValue.build());
      }
      outputSinkTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    public Builder mergeFilePerTap(io.envoyproxy.envoy.config.tap.v3.FilePerTapSink value) {
      if (filePerTapBuilder_ == null) {
        if (outputSinkTypeCase_ == 3 &&
            outputSinkType_ != io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance()) {
          outputSinkType_ = io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.newBuilder((io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_)
              .mergeFrom(value).buildPartial();
        } else {
          outputSinkType_ = value;
        }
        onChanged();
      } else {
        if (outputSinkTypeCase_ == 3) {
          filePerTapBuilder_.mergeFrom(value);
        }
        filePerTapBuilder_.setMessage(value);
      }
      outputSinkTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    public Builder clearFilePerTap() {
      if (filePerTapBuilder_ == null) {
        if (outputSinkTypeCase_ == 3) {
          outputSinkTypeCase_ = 0;
          outputSinkType_ = null;
          onChanged();
        }
      } else {
        if (outputSinkTypeCase_ == 3) {
          outputSinkTypeCase_ = 0;
          outputSinkType_ = null;
        }
        filePerTapBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    public io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.Builder getFilePerTapBuilder() {
      return getFilePerTapFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.FilePerTapSinkOrBuilder getFilePerTapOrBuilder() {
      if ((outputSinkTypeCase_ == 3) && (filePerTapBuilder_ != null)) {
        return filePerTapBuilder_.getMessageOrBuilder();
      } else {
        if (outputSinkTypeCase_ == 3) {
          return (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_;
        }
        return io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Tap output will be written to a file per tap sink.
     * </pre>
     *
     * <code>.envoy.config.tap.v3.FilePerTapSink file_per_tap = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.tap.v3.FilePerTapSink, io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.Builder, io.envoyproxy.envoy.config.tap.v3.FilePerTapSinkOrBuilder> 
        getFilePerTapFieldBuilder() {
      if (filePerTapBuilder_ == null) {
        if (!(outputSinkTypeCase_ == 3)) {
          outputSinkType_ = io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.getDefaultInstance();
        }
        filePerTapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.tap.v3.FilePerTapSink, io.envoyproxy.envoy.config.tap.v3.FilePerTapSink.Builder, io.envoyproxy.envoy.config.tap.v3.FilePerTapSinkOrBuilder>(
                (io.envoyproxy.envoy.config.tap.v3.FilePerTapSink) outputSinkType_,
                getParentForChildren(),
                isClean());
        outputSinkType_ = null;
      }
      outputSinkTypeCase_ = 3;
      onChanged();;
      return filePerTapBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink, io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.Builder, io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSinkOrBuilder> streamingGrpcBuilder_;
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     * @return Whether the streamingGrpc field is set.
     */
    @java.lang.Override
    public boolean hasStreamingGrpc() {
      return outputSinkTypeCase_ == 4;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     * @return The streamingGrpc.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink getStreamingGrpc() {
      if (streamingGrpcBuilder_ == null) {
        if (outputSinkTypeCase_ == 4) {
          return (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_;
        }
        return io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance();
      } else {
        if (outputSinkTypeCase_ == 4) {
          return streamingGrpcBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    public Builder setStreamingGrpc(io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink value) {
      if (streamingGrpcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outputSinkType_ = value;
        onChanged();
      } else {
        streamingGrpcBuilder_.setMessage(value);
      }
      outputSinkTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    public Builder setStreamingGrpc(
        io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.Builder builderForValue) {
      if (streamingGrpcBuilder_ == null) {
        outputSinkType_ = builderForValue.build();
        onChanged();
      } else {
        streamingGrpcBuilder_.setMessage(builderForValue.build());
      }
      outputSinkTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    public Builder mergeStreamingGrpc(io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink value) {
      if (streamingGrpcBuilder_ == null) {
        if (outputSinkTypeCase_ == 4 &&
            outputSinkType_ != io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance()) {
          outputSinkType_ = io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.newBuilder((io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_)
              .mergeFrom(value).buildPartial();
        } else {
          outputSinkType_ = value;
        }
        onChanged();
      } else {
        if (outputSinkTypeCase_ == 4) {
          streamingGrpcBuilder_.mergeFrom(value);
        }
        streamingGrpcBuilder_.setMessage(value);
      }
      outputSinkTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    public Builder clearStreamingGrpc() {
      if (streamingGrpcBuilder_ == null) {
        if (outputSinkTypeCase_ == 4) {
          outputSinkTypeCase_ = 0;
          outputSinkType_ = null;
          onChanged();
        }
      } else {
        if (outputSinkTypeCase_ == 4) {
          outputSinkTypeCase_ = 0;
          outputSinkType_ = null;
        }
        streamingGrpcBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    public io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.Builder getStreamingGrpcBuilder() {
      return getStreamingGrpcFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSinkOrBuilder getStreamingGrpcOrBuilder() {
      if ((outputSinkTypeCase_ == 4) && (streamingGrpcBuilder_ != null)) {
        return streamingGrpcBuilder_.getMessageOrBuilder();
      } else {
        if (outputSinkTypeCase_ == 4) {
          return (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_;
        }
        return io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     * [#comment: TODO(samflattery): remove cleanup in uber_per_filter.cc once implemented]
     * </pre>
     *
     * <code>.envoy.config.tap.v3.StreamingGrpcSink streaming_grpc = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink, io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.Builder, io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSinkOrBuilder> 
        getStreamingGrpcFieldBuilder() {
      if (streamingGrpcBuilder_ == null) {
        if (!(outputSinkTypeCase_ == 4)) {
          outputSinkType_ = io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.getDefaultInstance();
        }
        streamingGrpcBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink, io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink.Builder, io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSinkOrBuilder>(
                (io.envoyproxy.envoy.config.tap.v3.StreamingGrpcSink) outputSinkType_,
                getParentForChildren(),
                isClean());
        outputSinkType_ = null;
      }
      outputSinkTypeCase_ = 4;
      onChanged();;
      return streamingGrpcBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.tap.v3.OutputSink)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.tap.v3.OutputSink)
  private static final io.envoyproxy.envoy.config.tap.v3.OutputSink DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.tap.v3.OutputSink();
  }

  public static io.envoyproxy.envoy.config.tap.v3.OutputSink getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<OutputSink>
      PARSER = new com.google.protobuf.AbstractParser<OutputSink>() {
    @java.lang.Override
    public OutputSink parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new OutputSink(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<OutputSink> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<OutputSink> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.tap.v3.OutputSink getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

