// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/accesslog/v3/accesslog.proto

package io.envoyproxy.envoy.config.accesslog.v3;

public interface RuntimeFilterOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.accesslog.v3.RuntimeFilter)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Runtime key to get an optional overridden numerator for use in the
   * *percent_sampled* field. If found in runtime, this value will replace the
   * default numerator.
   * </pre>
   *
   * <code>string runtime_key = 1 [(.validate.rules) = { ... }</code>
   * @return The runtimeKey.
   */
  java.lang.String getRuntimeKey();
  /**
   * <pre>
   * Runtime key to get an optional overridden numerator for use in the
   * *percent_sampled* field. If found in runtime, this value will replace the
   * default numerator.
   * </pre>
   *
   * <code>string runtime_key = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for runtimeKey.
   */
  com.google.protobuf.ByteString
      getRuntimeKeyBytes();

  /**
   * <pre>
   * The default sampling percentage. If not specified, defaults to 0% with
   * denominator of 100.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percent_sampled = 2;</code>
   * @return Whether the percentSampled field is set.
   */
  boolean hasPercentSampled();
  /**
   * <pre>
   * The default sampling percentage. If not specified, defaults to 0% with
   * denominator of 100.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percent_sampled = 2;</code>
   * @return The percentSampled.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getPercentSampled();
  /**
   * <pre>
   * The default sampling percentage. If not specified, defaults to 0% with
   * denominator of 100.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percent_sampled = 2;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getPercentSampledOrBuilder();

  /**
   * <pre>
   * By default, sampling pivots on the header
   * :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id&gt;` being
   * present. If :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id&gt;`
   * is present, the filter will consistently sample across multiple hosts based
   * on the runtime key value and the value extracted from
   * :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id&gt;`. If it is
   * missing, or *use_independent_randomness* is set to true, the filter will
   * randomly sample based on the runtime key value alone.
   * *use_independent_randomness* can be used for logging kill switches within
   * complex nested :ref:`AndFilter
   * &lt;envoy_api_msg_config.accesslog.v3.AndFilter&gt;` and :ref:`OrFilter
   * &lt;envoy_api_msg_config.accesslog.v3.OrFilter&gt;` blocks that are easier to
   * reason about from a probability perspective (i.e., setting to true will
   * cause the filter to behave like an independent random variable when
   * composed within logical operator filters).
   * </pre>
   *
   * <code>bool use_independent_randomness = 3;</code>
   * @return The useIndependentRandomness.
   */
  boolean getUseIndependentRandomness();
}
