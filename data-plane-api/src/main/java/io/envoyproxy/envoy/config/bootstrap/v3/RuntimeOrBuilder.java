// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/bootstrap/v3/bootstrap.proto

package io.envoyproxy.envoy.config.bootstrap.v3;

public interface RuntimeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.bootstrap.v3.Runtime)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link. Envoy
   * will watch the location for changes and reload the file system tree when
   * they happen. If this parameter is not set, there will be no disk based
   * runtime.
   * </pre>
   *
   * <code>string symlink_root = 1;</code>
   * @return The symlinkRoot.
   */
  java.lang.String getSymlinkRoot();
  /**
   * <pre>
   * The implementation assumes that the file system tree is accessed via a
   * symbolic link. An atomic link swap is used when a new tree should be
   * switched to. This parameter specifies the path to the symbolic link. Envoy
   * will watch the location for changes and reload the file system tree when
   * they happen. If this parameter is not set, there will be no disk based
   * runtime.
   * </pre>
   *
   * <code>string symlink_root = 1;</code>
   * @return The bytes for symlinkRoot.
   */
  com.google.protobuf.ByteString
      getSymlinkRootBytes();

  /**
   * <pre>
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   * </pre>
   *
   * <code>string subdirectory = 2;</code>
   * @return The subdirectory.
   */
  java.lang.String getSubdirectory();
  /**
   * <pre>
   * Specifies the subdirectory to load within the root directory. This is
   * useful if multiple systems share the same delivery mechanism. Envoy
   * configuration elements can be contained in a dedicated subdirectory.
   * </pre>
   *
   * <code>string subdirectory = 2;</code>
   * @return The bytes for subdirectory.
   */
  com.google.protobuf.ByteString
      getSubdirectoryBytes();

  /**
   * <pre>
   * Specifies an optional subdirectory to load within the root directory. If
   * specified and the directory exists, configuration values within this
   * directory will override those found in the primary subdirectory. This is
   * useful when Envoy is deployed across many different types of servers.
   * Sometimes it is useful to have a per service cluster directory for runtime
   * configuration. See below for exactly how the override directory is used.
   * </pre>
   *
   * <code>string override_subdirectory = 3;</code>
   * @return The overrideSubdirectory.
   */
  java.lang.String getOverrideSubdirectory();
  /**
   * <pre>
   * Specifies an optional subdirectory to load within the root directory. If
   * specified and the directory exists, configuration values within this
   * directory will override those found in the primary subdirectory. This is
   * useful when Envoy is deployed across many different types of servers.
   * Sometimes it is useful to have a per service cluster directory for runtime
   * configuration. See below for exactly how the override directory is used.
   * </pre>
   *
   * <code>string override_subdirectory = 3;</code>
   * @return The bytes for overrideSubdirectory.
   */
  com.google.protobuf.ByteString
      getOverrideSubdirectoryBytes();

  /**
   * <pre>
   * Static base runtime. This will be :ref:`overridden
   * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding &lt;config_runtime_proto_json&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Struct base = 4;</code>
   * @return Whether the base field is set.
   */
  boolean hasBase();
  /**
   * <pre>
   * Static base runtime. This will be :ref:`overridden
   * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding &lt;config_runtime_proto_json&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Struct base = 4;</code>
   * @return The base.
   */
  com.google.protobuf.Struct getBase();
  /**
   * <pre>
   * Static base runtime. This will be :ref:`overridden
   * &lt;config_runtime_layering&gt;` by other runtime layers, e.g.
   * disk or admin. This follows the :ref:`runtime protobuf JSON representation
   * encoding &lt;config_runtime_proto_json&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Struct base = 4;</code>
   */
  com.google.protobuf.StructOrBuilder getBaseOrBuilder();
}
