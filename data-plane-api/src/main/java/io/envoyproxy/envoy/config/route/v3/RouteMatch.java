// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

/**
 * <pre>
 * [#next-free-field: 13]
 * </pre>
 *
 * Protobuf type {@code envoy.config.route.v3.RouteMatch}
 */
public final class RouteMatch extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.route.v3.RouteMatch)
    RouteMatchOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RouteMatch.newBuilder() to construct.
  private RouteMatch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RouteMatch() {
    headers_ = java.util.Collections.emptyList();
    queryParameters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RouteMatch();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RouteMatch(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            pathSpecifierCase_ = 1;
            pathSpecifier_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            pathSpecifierCase_ = 2;
            pathSpecifier_ = s;
            break;
          }
          case 34: {
            com.google.protobuf.BoolValue.Builder subBuilder = null;
            if (caseSensitive_ != null) {
              subBuilder = caseSensitive_.toBuilder();
            }
            caseSensitive_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(caseSensitive_);
              caseSensitive_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              headers_ = new java.util.ArrayList<io.envoyproxy.envoy.config.route.v3.HeaderMatcher>();
              mutable_bitField0_ |= 0x00000001;
            }
            headers_.add(
                input.readMessage(io.envoyproxy.envoy.config.route.v3.HeaderMatcher.parser(), extensionRegistry));
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              queryParameters_ = new java.util.ArrayList<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher>();
              mutable_bitField0_ |= 0x00000002;
            }
            queryParameters_.add(
                input.readMessage(io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.parser(), extensionRegistry));
            break;
          }
          case 66: {
            io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder subBuilder = null;
            if (grpc_ != null) {
              subBuilder = grpc_.toBuilder();
            }
            grpc_ = input.readMessage(io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(grpc_);
              grpc_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder subBuilder = null;
            if (runtimeFraction_ != null) {
              subBuilder = runtimeFraction_.toBuilder();
            }
            runtimeFraction_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(runtimeFraction_);
              runtimeFraction_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder subBuilder = null;
            if (pathSpecifierCase_ == 10) {
              subBuilder = ((io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_).toBuilder();
            }
            pathSpecifier_ =
                input.readMessage(io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_);
              pathSpecifier_ = subBuilder.buildPartial();
            }
            pathSpecifierCase_ = 10;
            break;
          }
          case 90: {
            io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder subBuilder = null;
            if (tlsContext_ != null) {
              subBuilder = tlsContext_.toBuilder();
            }
            tlsContext_ = input.readMessage(io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tlsContext_);
              tlsContext_ = subBuilder.buildPartial();
            }

            break;
          }
          case 98: {
            io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder subBuilder = null;
            if (pathSpecifierCase_ == 12) {
              subBuilder = ((io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_).toBuilder();
            }
            pathSpecifier_ =
                input.readMessage(io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_);
              pathSpecifier_ = subBuilder.buildPartial();
            }
            pathSpecifierCase_ = 12;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        headers_ = java.util.Collections.unmodifiableList(headers_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        queryParameters_ = java.util.Collections.unmodifiableList(queryParameters_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.route.v3.RouteMatch.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.Builder.class);
  }

  public interface GrpcRouteMatchOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions}
   */
  public static final class GrpcRouteMatchOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)
      GrpcRouteMatchOptionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GrpcRouteMatchOptions.newBuilder() to construct.
    private GrpcRouteMatchOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GrpcRouteMatchOptions() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GrpcRouteMatchOptions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GrpcRouteMatchOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_GrpcRouteMatchOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_GrpcRouteMatchOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions other = (io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_GrpcRouteMatchOptions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_GrpcRouteMatchOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_GrpcRouteMatchOptions_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions getDefaultInstanceForType() {
        return io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions build() {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions buildPartial() {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions result = new io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions) {
          return mergeFrom((io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions other) {
        if (other == io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)
    }

    // @@protoc_insertion_point(class_scope:envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions)
    private static final io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions();
    }

    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GrpcRouteMatchOptions>
        PARSER = new com.google.protobuf.AbstractParser<GrpcRouteMatchOptions>() {
      @java.lang.Override
      public GrpcRouteMatchOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GrpcRouteMatchOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GrpcRouteMatchOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GrpcRouteMatchOptions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TlsContextMatchOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is presented.
     * If not specified, certificate presentation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue presented = 1;</code>
     * @return Whether the presented field is set.
     */
    boolean hasPresented();
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is presented.
     * If not specified, certificate presentation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue presented = 1;</code>
     * @return The presented.
     */
    com.google.protobuf.BoolValue getPresented();
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is presented.
     * If not specified, certificate presentation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue presented = 1;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getPresentedOrBuilder();

    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is validated.
     * If not specified, certificate validation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue validated = 2;</code>
     * @return Whether the validated field is set.
     */
    boolean hasValidated();
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is validated.
     * If not specified, certificate validation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue validated = 2;</code>
     * @return The validated.
     */
    com.google.protobuf.BoolValue getValidated();
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is validated.
     * If not specified, certificate validation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue validated = 2;</code>
     */
    com.google.protobuf.BoolValueOrBuilder getValidatedOrBuilder();
  }
  /**
   * Protobuf type {@code envoy.config.route.v3.RouteMatch.TlsContextMatchOptions}
   */
  public static final class TlsContextMatchOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)
      TlsContextMatchOptionsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TlsContextMatchOptions.newBuilder() to construct.
    private TlsContextMatchOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TlsContextMatchOptions() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TlsContextMatchOptions();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TlsContextMatchOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (presented_ != null) {
                subBuilder = presented_.toBuilder();
              }
              presented_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(presented_);
                presented_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.BoolValue.Builder subBuilder = null;
              if (validated_ != null) {
                subBuilder = validated_.toBuilder();
              }
              validated_ = input.readMessage(com.google.protobuf.BoolValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(validated_);
                validated_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_TlsContextMatchOptions_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_TlsContextMatchOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder.class);
    }

    public static final int PRESENTED_FIELD_NUMBER = 1;
    private com.google.protobuf.BoolValue presented_;
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is presented.
     * If not specified, certificate presentation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue presented = 1;</code>
     * @return Whether the presented field is set.
     */
    @java.lang.Override
    public boolean hasPresented() {
      return presented_ != null;
    }
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is presented.
     * If not specified, certificate presentation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue presented = 1;</code>
     * @return The presented.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getPresented() {
      return presented_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : presented_;
    }
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is presented.
     * If not specified, certificate presentation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue presented = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getPresentedOrBuilder() {
      return getPresented();
    }

    public static final int VALIDATED_FIELD_NUMBER = 2;
    private com.google.protobuf.BoolValue validated_;
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is validated.
     * If not specified, certificate validation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue validated = 2;</code>
     * @return Whether the validated field is set.
     */
    @java.lang.Override
    public boolean hasValidated() {
      return validated_ != null;
    }
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is validated.
     * If not specified, certificate validation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue validated = 2;</code>
     * @return The validated.
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getValidated() {
      return validated_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : validated_;
    }
    /**
     * <pre>
     * If specified, the route will match against whether or not a certificate is validated.
     * If not specified, certificate validation status (true or false) will not be considered when route matching.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue validated = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValueOrBuilder getValidatedOrBuilder() {
      return getValidated();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (presented_ != null) {
        output.writeMessage(1, getPresented());
      }
      if (validated_ != null) {
        output.writeMessage(2, getValidated());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (presented_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPresented());
      }
      if (validated_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getValidated());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions other = (io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions) obj;

      if (hasPresented() != other.hasPresented()) return false;
      if (hasPresented()) {
        if (!getPresented()
            .equals(other.getPresented())) return false;
      }
      if (hasValidated() != other.hasValidated()) return false;
      if (hasValidated()) {
        if (!getValidated()
            .equals(other.getValidated())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPresented()) {
        hash = (37 * hash) + PRESENTED_FIELD_NUMBER;
        hash = (53 * hash) + getPresented().hashCode();
      }
      if (hasValidated()) {
        hash = (37 * hash) + VALIDATED_FIELD_NUMBER;
        hash = (53 * hash) + getValidated().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.config.route.v3.RouteMatch.TlsContextMatchOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_TlsContextMatchOptions_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_TlsContextMatchOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (presentedBuilder_ == null) {
          presented_ = null;
        } else {
          presented_ = null;
          presentedBuilder_ = null;
        }
        if (validatedBuilder_ == null) {
          validated_ = null;
        } else {
          validated_ = null;
          validatedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_TlsContextMatchOptions_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions getDefaultInstanceForType() {
        return io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions build() {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions buildPartial() {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions result = new io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions(this);
        if (presentedBuilder_ == null) {
          result.presented_ = presented_;
        } else {
          result.presented_ = presentedBuilder_.build();
        }
        if (validatedBuilder_ == null) {
          result.validated_ = validated_;
        } else {
          result.validated_ = validatedBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions) {
          return mergeFrom((io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions other) {
        if (other == io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.getDefaultInstance()) return this;
        if (other.hasPresented()) {
          mergePresented(other.getPresented());
        }
        if (other.hasValidated()) {
          mergeValidated(other.getValidated());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.BoolValue presented_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> presentedBuilder_;
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       * @return Whether the presented field is set.
       */
      public boolean hasPresented() {
        return presentedBuilder_ != null || presented_ != null;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       * @return The presented.
       */
      public com.google.protobuf.BoolValue getPresented() {
        if (presentedBuilder_ == null) {
          return presented_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : presented_;
        } else {
          return presentedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      public Builder setPresented(com.google.protobuf.BoolValue value) {
        if (presentedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          presented_ = value;
          onChanged();
        } else {
          presentedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      public Builder setPresented(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (presentedBuilder_ == null) {
          presented_ = builderForValue.build();
          onChanged();
        } else {
          presentedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      public Builder mergePresented(com.google.protobuf.BoolValue value) {
        if (presentedBuilder_ == null) {
          if (presented_ != null) {
            presented_ =
              com.google.protobuf.BoolValue.newBuilder(presented_).mergeFrom(value).buildPartial();
          } else {
            presented_ = value;
          }
          onChanged();
        } else {
          presentedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      public Builder clearPresented() {
        if (presentedBuilder_ == null) {
          presented_ = null;
          onChanged();
        } else {
          presented_ = null;
          presentedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      public com.google.protobuf.BoolValue.Builder getPresentedBuilder() {
        
        onChanged();
        return getPresentedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getPresentedOrBuilder() {
        if (presentedBuilder_ != null) {
          return presentedBuilder_.getMessageOrBuilder();
        } else {
          return presented_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : presented_;
        }
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is presented.
       * If not specified, certificate presentation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue presented = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getPresentedFieldBuilder() {
        if (presentedBuilder_ == null) {
          presentedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getPresented(),
                  getParentForChildren(),
                  isClean());
          presented_ = null;
        }
        return presentedBuilder_;
      }

      private com.google.protobuf.BoolValue validated_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> validatedBuilder_;
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       * @return Whether the validated field is set.
       */
      public boolean hasValidated() {
        return validatedBuilder_ != null || validated_ != null;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       * @return The validated.
       */
      public com.google.protobuf.BoolValue getValidated() {
        if (validatedBuilder_ == null) {
          return validated_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : validated_;
        } else {
          return validatedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      public Builder setValidated(com.google.protobuf.BoolValue value) {
        if (validatedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validated_ = value;
          onChanged();
        } else {
          validatedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      public Builder setValidated(
          com.google.protobuf.BoolValue.Builder builderForValue) {
        if (validatedBuilder_ == null) {
          validated_ = builderForValue.build();
          onChanged();
        } else {
          validatedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      public Builder mergeValidated(com.google.protobuf.BoolValue value) {
        if (validatedBuilder_ == null) {
          if (validated_ != null) {
            validated_ =
              com.google.protobuf.BoolValue.newBuilder(validated_).mergeFrom(value).buildPartial();
          } else {
            validated_ = value;
          }
          onChanged();
        } else {
          validatedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      public Builder clearValidated() {
        if (validatedBuilder_ == null) {
          validated_ = null;
          onChanged();
        } else {
          validated_ = null;
          validatedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      public com.google.protobuf.BoolValue.Builder getValidatedBuilder() {
        
        onChanged();
        return getValidatedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      public com.google.protobuf.BoolValueOrBuilder getValidatedOrBuilder() {
        if (validatedBuilder_ != null) {
          return validatedBuilder_.getMessageOrBuilder();
        } else {
          return validated_ == null ?
              com.google.protobuf.BoolValue.getDefaultInstance() : validated_;
        }
      }
      /**
       * <pre>
       * If specified, the route will match against whether or not a certificate is validated.
       * If not specified, certificate validation status (true or false) will not be considered when route matching.
       * </pre>
       *
       * <code>.google.protobuf.BoolValue validated = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
          getValidatedFieldBuilder() {
        if (validatedBuilder_ == null) {
          validatedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                  getValidated(),
                  getParentForChildren(),
                  isClean());
          validated_ = null;
        }
        return validatedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)
    }

    // @@protoc_insertion_point(class_scope:envoy.config.route.v3.RouteMatch.TlsContextMatchOptions)
    private static final io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions();
    }

    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TlsContextMatchOptions>
        PARSER = new com.google.protobuf.AbstractParser<TlsContextMatchOptions>() {
      @java.lang.Override
      public TlsContextMatchOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TlsContextMatchOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TlsContextMatchOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TlsContextMatchOptions> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConnectMatcherOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.RouteMatch.ConnectMatcher)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * An extensible message for matching CONNECT requests.
   * </pre>
   *
   * Protobuf type {@code envoy.config.route.v3.RouteMatch.ConnectMatcher}
   */
  public static final class ConnectMatcher extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.config.route.v3.RouteMatch.ConnectMatcher)
      ConnectMatcherOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConnectMatcher.newBuilder() to construct.
    private ConnectMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConnectMatcher() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConnectMatcher();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConnectMatcher(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_ConnectMatcher_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_ConnectMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher other = (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An extensible message for matching CONNECT requests.
     * </pre>
     *
     * Protobuf type {@code envoy.config.route.v3.RouteMatch.ConnectMatcher}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.config.route.v3.RouteMatch.ConnectMatcher)
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcherOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_ConnectMatcher_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_ConnectMatcher_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_ConnectMatcher_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher getDefaultInstanceForType() {
        return io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher build() {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher buildPartial() {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher result = new io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) {
          return mergeFrom((io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher other) {
        if (other == io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.config.route.v3.RouteMatch.ConnectMatcher)
    }

    // @@protoc_insertion_point(class_scope:envoy.config.route.v3.RouteMatch.ConnectMatcher)
    private static final io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher();
    }

    public static io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConnectMatcher>
        PARSER = new com.google.protobuf.AbstractParser<ConnectMatcher>() {
      @java.lang.Override
      public ConnectMatcher parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnectMatcher(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConnectMatcher> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConnectMatcher> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int pathSpecifierCase_ = 0;
  private java.lang.Object pathSpecifier_;
  public enum PathSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PREFIX(1),
    PATH(2),
    SAFE_REGEX(10),
    CONNECT_MATCHER(12),
    PATHSPECIFIER_NOT_SET(0);
    private final int value;
    private PathSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PathSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static PathSpecifierCase forNumber(int value) {
      switch (value) {
        case 1: return PREFIX;
        case 2: return PATH;
        case 10: return SAFE_REGEX;
        case 12: return CONNECT_MATCHER;
        case 0: return PATHSPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PathSpecifierCase
  getPathSpecifierCase() {
    return PathSpecifierCase.forNumber(
        pathSpecifierCase_);
  }

  public static final int PREFIX_FIELD_NUMBER = 1;
  /**
   * <pre>
   * If specified, the route is a prefix rule meaning that the prefix must
   * match the beginning of the *:path* header.
   * </pre>
   *
   * <code>string prefix = 1;</code>
   * @return Whether the prefix field is set.
   */
  public boolean hasPrefix() {
    return pathSpecifierCase_ == 1;
  }
  /**
   * <pre>
   * If specified, the route is a prefix rule meaning that the prefix must
   * match the beginning of the *:path* header.
   * </pre>
   *
   * <code>string prefix = 1;</code>
   * @return The prefix.
   */
  public java.lang.String getPrefix() {
    java.lang.Object ref = "";
    if (pathSpecifierCase_ == 1) {
      ref = pathSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (pathSpecifierCase_ == 1) {
        pathSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * If specified, the route is a prefix rule meaning that the prefix must
   * match the beginning of the *:path* header.
   * </pre>
   *
   * <code>string prefix = 1;</code>
   * @return The bytes for prefix.
   */
  public com.google.protobuf.ByteString
      getPrefixBytes() {
    java.lang.Object ref = "";
    if (pathSpecifierCase_ == 1) {
      ref = pathSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (pathSpecifierCase_ == 1) {
        pathSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PATH_FIELD_NUMBER = 2;
  /**
   * <pre>
   * If specified, the route is an exact path rule meaning that the path must
   * exactly match the *:path* header once the query string is removed.
   * </pre>
   *
   * <code>string path = 2;</code>
   * @return Whether the path field is set.
   */
  public boolean hasPath() {
    return pathSpecifierCase_ == 2;
  }
  /**
   * <pre>
   * If specified, the route is an exact path rule meaning that the path must
   * exactly match the *:path* header once the query string is removed.
   * </pre>
   *
   * <code>string path = 2;</code>
   * @return The path.
   */
  public java.lang.String getPath() {
    java.lang.Object ref = "";
    if (pathSpecifierCase_ == 2) {
      ref = pathSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (pathSpecifierCase_ == 2) {
        pathSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * If specified, the route is an exact path rule meaning that the path must
   * exactly match the *:path* header once the query string is removed.
   * </pre>
   *
   * <code>string path = 2;</code>
   * @return The bytes for path.
   */
  public com.google.protobuf.ByteString
      getPathBytes() {
    java.lang.Object ref = "";
    if (pathSpecifierCase_ == 2) {
      ref = pathSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (pathSpecifierCase_ == 2) {
        pathSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SAFE_REGEX_FIELD_NUMBER = 10;
  /**
   * <pre>
   * If specified, the route is a regular expression rule meaning that the
   * regex must match the *:path* header once the query string is removed. The entire path
   * (without the query string) must match the regex. The rule will not match if only a
   * subsequence of the *:path* header matches the regex.
   * [#next-major-version: In the v3 API we should redo how path specification works such
   * that we utilize StringMatcher, and additionally have consistent options around whether we
   * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
   * to deprecate the existing options. We should even consider whether we want to do away with
   * path_specifier entirely and just rely on a set of header matchers which can already match
   * on :path, etc. The issue with that is it is unclear how to generically deal with query string
   * stripping. This needs more thought.]
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
   * @return Whether the safeRegex field is set.
   */
  @java.lang.Override
  public boolean hasSafeRegex() {
    return pathSpecifierCase_ == 10;
  }
  /**
   * <pre>
   * If specified, the route is a regular expression rule meaning that the
   * regex must match the *:path* header once the query string is removed. The entire path
   * (without the query string) must match the regex. The rule will not match if only a
   * subsequence of the *:path* header matches the regex.
   * [#next-major-version: In the v3 API we should redo how path specification works such
   * that we utilize StringMatcher, and additionally have consistent options around whether we
   * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
   * to deprecate the existing options. We should even consider whether we want to do away with
   * path_specifier entirely and just rely on a set of header matchers which can already match
   * on :path, etc. The issue with that is it is unclear how to generically deal with query string
   * stripping. This needs more thought.]
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
   * @return The safeRegex.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatcher getSafeRegex() {
    if (pathSpecifierCase_ == 10) {
       return (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_;
    }
    return io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance();
  }
  /**
   * <pre>
   * If specified, the route is a regular expression rule meaning that the
   * regex must match the *:path* header once the query string is removed. The entire path
   * (without the query string) must match the regex. The rule will not match if only a
   * subsequence of the *:path* header matches the regex.
   * [#next-major-version: In the v3 API we should redo how path specification works such
   * that we utilize StringMatcher, and additionally have consistent options around whether we
   * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
   * to deprecate the existing options. We should even consider whether we want to do away with
   * path_specifier entirely and just rely on a set of header matchers which can already match
   * on :path, etc. The issue with that is it is unclear how to generically deal with query string
   * stripping. This needs more thought.]
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder getSafeRegexOrBuilder() {
    if (pathSpecifierCase_ == 10) {
       return (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_;
    }
    return io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance();
  }

  public static final int CONNECT_MATCHER_FIELD_NUMBER = 12;
  /**
   * <pre>
   * If this is used as the matcher, the matcher will only match CONNECT requests.
   * Note that this will not match HTTP/2 upgrade-style CONNECT requests
   * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
   * upgrades.
   * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
   * where Extended CONNECT requests may have a path, the path matchers will work if
   * there is a path present.
   * Note that CONNECT support is currently considered alpha in Envoy.
   * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
   * @return Whether the connectMatcher field is set.
   */
  @java.lang.Override
  public boolean hasConnectMatcher() {
    return pathSpecifierCase_ == 12;
  }
  /**
   * <pre>
   * If this is used as the matcher, the matcher will only match CONNECT requests.
   * Note that this will not match HTTP/2 upgrade-style CONNECT requests
   * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
   * upgrades.
   * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
   * where Extended CONNECT requests may have a path, the path matchers will work if
   * there is a path present.
   * Note that CONNECT support is currently considered alpha in Envoy.
   * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
   * @return The connectMatcher.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher getConnectMatcher() {
    if (pathSpecifierCase_ == 12) {
       return (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_;
    }
    return io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
  }
  /**
   * <pre>
   * If this is used as the matcher, the matcher will only match CONNECT requests.
   * Note that this will not match HTTP/2 upgrade-style CONNECT requests
   * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
   * upgrades.
   * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
   * where Extended CONNECT requests may have a path, the path matchers will work if
   * there is a path present.
   * Note that CONNECT support is currently considered alpha in Envoy.
   * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcherOrBuilder getConnectMatcherOrBuilder() {
    if (pathSpecifierCase_ == 12) {
       return (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_;
    }
    return io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
  }

  public static final int CASE_SENSITIVE_FIELD_NUMBER = 4;
  private com.google.protobuf.BoolValue caseSensitive_;
  /**
   * <pre>
   * Indicates that prefix/path matching should be case sensitive. The default
   * is true.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
   * @return Whether the caseSensitive field is set.
   */
  @java.lang.Override
  public boolean hasCaseSensitive() {
    return caseSensitive_ != null;
  }
  /**
   * <pre>
   * Indicates that prefix/path matching should be case sensitive. The default
   * is true.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
   * @return The caseSensitive.
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getCaseSensitive() {
    return caseSensitive_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : caseSensitive_;
  }
  /**
   * <pre>
   * Indicates that prefix/path matching should be case sensitive. The default
   * is true.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValueOrBuilder getCaseSensitiveOrBuilder() {
    return getCaseSensitive();
  }

  public static final int RUNTIME_FRACTION_FIELD_NUMBER = 9;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent runtimeFraction_;
  /**
   * <pre>
   * Indicates that the route should additionally match on a runtime key. Every time the route
   * is considered for a match, it must also fall under the percentage of matches indicated by
   * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
   * number is &lt;= the value of the numerator N, or if the key is not present, the default
   * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
   * route configuration can be used to roll out route changes in a gradual manner without full
   * code/config deploys. Refer to the :ref:`traffic shifting
   * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
   * .. note::
   *    Parsing this field is implemented such that the runtime key's data may be represented
   *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
   *    integer with the assumption that the value is an integral percentage out of 100. For
   *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
   *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
   * @return Whether the runtimeFraction field is set.
   */
  @java.lang.Override
  public boolean hasRuntimeFraction() {
    return runtimeFraction_ != null;
  }
  /**
   * <pre>
   * Indicates that the route should additionally match on a runtime key. Every time the route
   * is considered for a match, it must also fall under the percentage of matches indicated by
   * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
   * number is &lt;= the value of the numerator N, or if the key is not present, the default
   * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
   * route configuration can be used to roll out route changes in a gradual manner without full
   * code/config deploys. Refer to the :ref:`traffic shifting
   * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
   * .. note::
   *    Parsing this field is implemented such that the runtime key's data may be represented
   *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
   *    integer with the assumption that the value is an integral percentage out of 100. For
   *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
   *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
   * @return The runtimeFraction.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getRuntimeFraction() {
    return runtimeFraction_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : runtimeFraction_;
  }
  /**
   * <pre>
   * Indicates that the route should additionally match on a runtime key. Every time the route
   * is considered for a match, it must also fall under the percentage of matches indicated by
   * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
   * number is &lt;= the value of the numerator N, or if the key is not present, the default
   * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
   * route configuration can be used to roll out route changes in a gradual manner without full
   * code/config deploys. Refer to the :ref:`traffic shifting
   * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
   * .. note::
   *    Parsing this field is implemented such that the runtime key's data may be represented
   *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
   *    integer with the assumption that the value is an integral percentage out of 100. For
   *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
   *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getRuntimeFractionOrBuilder() {
    return getRuntimeFraction();
  }

  public static final int HEADERS_FIELD_NUMBER = 6;
  private java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> headers_;
  /**
   * <pre>
   * Specifies a set of headers that the route should match on. The router will
   * check the request’s headers against all the specified headers in the route
   * config. A match will happen if all the headers in the route are present in
   * the request with the same values (or based on presence if the value field
   * is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> getHeadersList() {
    return headers_;
  }
  /**
   * <pre>
   * Specifies a set of headers that the route should match on. The router will
   * check the request’s headers against all the specified headers in the route
   * config. A match will happen if all the headers in the route are present in
   * the request with the same values (or based on presence if the value field
   * is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> 
      getHeadersOrBuilderList() {
    return headers_;
  }
  /**
   * <pre>
   * Specifies a set of headers that the route should match on. The router will
   * check the request’s headers against all the specified headers in the route
   * config. A match will happen if all the headers in the route are present in
   * the request with the same values (or based on presence if the value field
   * is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
   */
  @java.lang.Override
  public int getHeadersCount() {
    return headers_.size();
  }
  /**
   * <pre>
   * Specifies a set of headers that the route should match on. The router will
   * check the request’s headers against all the specified headers in the route
   * config. A match will happen if all the headers in the route are present in
   * the request with the same values (or based on presence if the value field
   * is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.HeaderMatcher getHeaders(int index) {
    return headers_.get(index);
  }
  /**
   * <pre>
   * Specifies a set of headers that the route should match on. The router will
   * check the request’s headers against all the specified headers in the route
   * config. A match will happen if all the headers in the route are present in
   * the request with the same values (or based on presence if the value field
   * is not in the config).
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder getHeadersOrBuilder(
      int index) {
    return headers_.get(index);
  }

  public static final int QUERY_PARAMETERS_FIELD_NUMBER = 7;
  private java.util.List<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher> queryParameters_;
  /**
   * <pre>
   * Specifies a set of URL query parameters on which the route should
   * match. The router will check the query string from the *path* header
   * against all the specified query parameters. If the number of specified
   * query parameters is nonzero, they all must match the *path* header's
   * query string for a match to occur.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher> getQueryParametersList() {
    return queryParameters_;
  }
  /**
   * <pre>
   * Specifies a set of URL query parameters on which the route should
   * match. The router will check the query string from the *path* header
   * against all the specified query parameters. If the number of specified
   * query parameters is nonzero, they all must match the *path* header's
   * query string for a match to occur.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder> 
      getQueryParametersOrBuilderList() {
    return queryParameters_;
  }
  /**
   * <pre>
   * Specifies a set of URL query parameters on which the route should
   * match. The router will check the query string from the *path* header
   * against all the specified query parameters. If the number of specified
   * query parameters is nonzero, they all must match the *path* header's
   * query string for a match to occur.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
   */
  @java.lang.Override
  public int getQueryParametersCount() {
    return queryParameters_.size();
  }
  /**
   * <pre>
   * Specifies a set of URL query parameters on which the route should
   * match. The router will check the query string from the *path* header
   * against all the specified query parameters. If the number of specified
   * query parameters is nonzero, they all must match the *path* header's
   * query string for a match to occur.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher getQueryParameters(int index) {
    return queryParameters_.get(index);
  }
  /**
   * <pre>
   * Specifies a set of URL query parameters on which the route should
   * match. The router will check the query string from the *path* header
   * against all the specified query parameters. If the number of specified
   * query parameters is nonzero, they all must match the *path* header's
   * query string for a match to occur.
   * </pre>
   *
   * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder getQueryParametersOrBuilder(
      int index) {
    return queryParameters_.get(index);
  }

  public static final int GRPC_FIELD_NUMBER = 8;
  private io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc_;
  /**
   * <pre>
   * If specified, only gRPC requests will be matched. The router will check
   * that the content-type header has a application/grpc or one of the various
   * application/grpc+ values.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
   * @return Whether the grpc field is set.
   */
  @java.lang.Override
  public boolean hasGrpc() {
    return grpc_ != null;
  }
  /**
   * <pre>
   * If specified, only gRPC requests will be matched. The router will check
   * that the content-type header has a application/grpc or one of the various
   * application/grpc+ values.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
   * @return The grpc.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions getGrpc() {
    return grpc_ == null ? io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.getDefaultInstance() : grpc_;
  }
  /**
   * <pre>
   * If specified, only gRPC requests will be matched. The router will check
   * that the content-type header has a application/grpc or one of the various
   * application/grpc+ values.
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptionsOrBuilder getGrpcOrBuilder() {
    return getGrpc();
  }

  public static final int TLS_CONTEXT_FIELD_NUMBER = 11;
  private io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tlsContext_;
  /**
   * <pre>
   * If specified, the client tls context will be matched against the defined
   * match options.
   * [#next-major-version: unify with RBAC]
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
   * @return Whether the tlsContext field is set.
   */
  @java.lang.Override
  public boolean hasTlsContext() {
    return tlsContext_ != null;
  }
  /**
   * <pre>
   * If specified, the client tls context will be matched against the defined
   * match options.
   * [#next-major-version: unify with RBAC]
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
   * @return The tlsContext.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions getTlsContext() {
    return tlsContext_ == null ? io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.getDefaultInstance() : tlsContext_;
  }
  /**
   * <pre>
   * If specified, the client tls context will be matched against the defined
   * match options.
   * [#next-major-version: unify with RBAC]
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptionsOrBuilder getTlsContextOrBuilder() {
    return getTlsContext();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (pathSpecifierCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, pathSpecifier_);
    }
    if (pathSpecifierCase_ == 2) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, pathSpecifier_);
    }
    if (caseSensitive_ != null) {
      output.writeMessage(4, getCaseSensitive());
    }
    for (int i = 0; i < headers_.size(); i++) {
      output.writeMessage(6, headers_.get(i));
    }
    for (int i = 0; i < queryParameters_.size(); i++) {
      output.writeMessage(7, queryParameters_.get(i));
    }
    if (grpc_ != null) {
      output.writeMessage(8, getGrpc());
    }
    if (runtimeFraction_ != null) {
      output.writeMessage(9, getRuntimeFraction());
    }
    if (pathSpecifierCase_ == 10) {
      output.writeMessage(10, (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_);
    }
    if (tlsContext_ != null) {
      output.writeMessage(11, getTlsContext());
    }
    if (pathSpecifierCase_ == 12) {
      output.writeMessage(12, (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (pathSpecifierCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, pathSpecifier_);
    }
    if (pathSpecifierCase_ == 2) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, pathSpecifier_);
    }
    if (caseSensitive_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getCaseSensitive());
    }
    for (int i = 0; i < headers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, headers_.get(i));
    }
    for (int i = 0; i < queryParameters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, queryParameters_.get(i));
    }
    if (grpc_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getGrpc());
    }
    if (runtimeFraction_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getRuntimeFraction());
    }
    if (pathSpecifierCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_);
    }
    if (tlsContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getTlsContext());
    }
    if (pathSpecifierCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.route.v3.RouteMatch other = (io.envoyproxy.envoy.config.route.v3.RouteMatch) obj;

    if (hasCaseSensitive() != other.hasCaseSensitive()) return false;
    if (hasCaseSensitive()) {
      if (!getCaseSensitive()
          .equals(other.getCaseSensitive())) return false;
    }
    if (hasRuntimeFraction() != other.hasRuntimeFraction()) return false;
    if (hasRuntimeFraction()) {
      if (!getRuntimeFraction()
          .equals(other.getRuntimeFraction())) return false;
    }
    if (!getHeadersList()
        .equals(other.getHeadersList())) return false;
    if (!getQueryParametersList()
        .equals(other.getQueryParametersList())) return false;
    if (hasGrpc() != other.hasGrpc()) return false;
    if (hasGrpc()) {
      if (!getGrpc()
          .equals(other.getGrpc())) return false;
    }
    if (hasTlsContext() != other.hasTlsContext()) return false;
    if (hasTlsContext()) {
      if (!getTlsContext()
          .equals(other.getTlsContext())) return false;
    }
    if (!getPathSpecifierCase().equals(other.getPathSpecifierCase())) return false;
    switch (pathSpecifierCase_) {
      case 1:
        if (!getPrefix()
            .equals(other.getPrefix())) return false;
        break;
      case 2:
        if (!getPath()
            .equals(other.getPath())) return false;
        break;
      case 10:
        if (!getSafeRegex()
            .equals(other.getSafeRegex())) return false;
        break;
      case 12:
        if (!getConnectMatcher()
            .equals(other.getConnectMatcher())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCaseSensitive()) {
      hash = (37 * hash) + CASE_SENSITIVE_FIELD_NUMBER;
      hash = (53 * hash) + getCaseSensitive().hashCode();
    }
    if (hasRuntimeFraction()) {
      hash = (37 * hash) + RUNTIME_FRACTION_FIELD_NUMBER;
      hash = (53 * hash) + getRuntimeFraction().hashCode();
    }
    if (getHeadersCount() > 0) {
      hash = (37 * hash) + HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getHeadersList().hashCode();
    }
    if (getQueryParametersCount() > 0) {
      hash = (37 * hash) + QUERY_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getQueryParametersList().hashCode();
    }
    if (hasGrpc()) {
      hash = (37 * hash) + GRPC_FIELD_NUMBER;
      hash = (53 * hash) + getGrpc().hashCode();
    }
    if (hasTlsContext()) {
      hash = (37 * hash) + TLS_CONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getTlsContext().hashCode();
    }
    switch (pathSpecifierCase_) {
      case 1:
        hash = (37 * hash) + PREFIX_FIELD_NUMBER;
        hash = (53 * hash) + getPrefix().hashCode();
        break;
      case 2:
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPath().hashCode();
        break;
      case 10:
        hash = (37 * hash) + SAFE_REGEX_FIELD_NUMBER;
        hash = (53 * hash) + getSafeRegex().hashCode();
        break;
      case 12:
        hash = (37 * hash) + CONNECT_MATCHER_FIELD_NUMBER;
        hash = (53 * hash) + getConnectMatcher().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.route.v3.RouteMatch parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.route.v3.RouteMatch prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 13]
   * </pre>
   *
   * Protobuf type {@code envoy.config.route.v3.RouteMatch}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.route.v3.RouteMatch)
      io.envoyproxy.envoy.config.route.v3.RouteMatchOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.route.v3.RouteMatch.class, io.envoyproxy.envoy.config.route.v3.RouteMatch.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.route.v3.RouteMatch.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getHeadersFieldBuilder();
        getQueryParametersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (caseSensitiveBuilder_ == null) {
        caseSensitive_ = null;
      } else {
        caseSensitive_ = null;
        caseSensitiveBuilder_ = null;
      }
      if (runtimeFractionBuilder_ == null) {
        runtimeFraction_ = null;
      } else {
        runtimeFraction_ = null;
        runtimeFractionBuilder_ = null;
      }
      if (headersBuilder_ == null) {
        headers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        headersBuilder_.clear();
      }
      if (queryParametersBuilder_ == null) {
        queryParameters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        queryParametersBuilder_.clear();
      }
      if (grpcBuilder_ == null) {
        grpc_ = null;
      } else {
        grpc_ = null;
        grpcBuilder_ = null;
      }
      if (tlsContextBuilder_ == null) {
        tlsContext_ = null;
      } else {
        tlsContext_ = null;
        tlsContextBuilder_ = null;
      }
      pathSpecifierCase_ = 0;
      pathSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.route.v3.RouteComponentsProto.internal_static_envoy_config_route_v3_RouteMatch_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.route.v3.RouteMatch.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch build() {
      io.envoyproxy.envoy.config.route.v3.RouteMatch result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch buildPartial() {
      io.envoyproxy.envoy.config.route.v3.RouteMatch result = new io.envoyproxy.envoy.config.route.v3.RouteMatch(this);
      int from_bitField0_ = bitField0_;
      if (pathSpecifierCase_ == 1) {
        result.pathSpecifier_ = pathSpecifier_;
      }
      if (pathSpecifierCase_ == 2) {
        result.pathSpecifier_ = pathSpecifier_;
      }
      if (pathSpecifierCase_ == 10) {
        if (safeRegexBuilder_ == null) {
          result.pathSpecifier_ = pathSpecifier_;
        } else {
          result.pathSpecifier_ = safeRegexBuilder_.build();
        }
      }
      if (pathSpecifierCase_ == 12) {
        if (connectMatcherBuilder_ == null) {
          result.pathSpecifier_ = pathSpecifier_;
        } else {
          result.pathSpecifier_ = connectMatcherBuilder_.build();
        }
      }
      if (caseSensitiveBuilder_ == null) {
        result.caseSensitive_ = caseSensitive_;
      } else {
        result.caseSensitive_ = caseSensitiveBuilder_.build();
      }
      if (runtimeFractionBuilder_ == null) {
        result.runtimeFraction_ = runtimeFraction_;
      } else {
        result.runtimeFraction_ = runtimeFractionBuilder_.build();
      }
      if (headersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          headers_ = java.util.Collections.unmodifiableList(headers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.headers_ = headers_;
      } else {
        result.headers_ = headersBuilder_.build();
      }
      if (queryParametersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          queryParameters_ = java.util.Collections.unmodifiableList(queryParameters_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.queryParameters_ = queryParameters_;
      } else {
        result.queryParameters_ = queryParametersBuilder_.build();
      }
      if (grpcBuilder_ == null) {
        result.grpc_ = grpc_;
      } else {
        result.grpc_ = grpcBuilder_.build();
      }
      if (tlsContextBuilder_ == null) {
        result.tlsContext_ = tlsContext_;
      } else {
        result.tlsContext_ = tlsContextBuilder_.build();
      }
      result.pathSpecifierCase_ = pathSpecifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.route.v3.RouteMatch) {
        return mergeFrom((io.envoyproxy.envoy.config.route.v3.RouteMatch)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.route.v3.RouteMatch other) {
      if (other == io.envoyproxy.envoy.config.route.v3.RouteMatch.getDefaultInstance()) return this;
      if (other.hasCaseSensitive()) {
        mergeCaseSensitive(other.getCaseSensitive());
      }
      if (other.hasRuntimeFraction()) {
        mergeRuntimeFraction(other.getRuntimeFraction());
      }
      if (headersBuilder_ == null) {
        if (!other.headers_.isEmpty()) {
          if (headers_.isEmpty()) {
            headers_ = other.headers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHeadersIsMutable();
            headers_.addAll(other.headers_);
          }
          onChanged();
        }
      } else {
        if (!other.headers_.isEmpty()) {
          if (headersBuilder_.isEmpty()) {
            headersBuilder_.dispose();
            headersBuilder_ = null;
            headers_ = other.headers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            headersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHeadersFieldBuilder() : null;
          } else {
            headersBuilder_.addAllMessages(other.headers_);
          }
        }
      }
      if (queryParametersBuilder_ == null) {
        if (!other.queryParameters_.isEmpty()) {
          if (queryParameters_.isEmpty()) {
            queryParameters_ = other.queryParameters_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureQueryParametersIsMutable();
            queryParameters_.addAll(other.queryParameters_);
          }
          onChanged();
        }
      } else {
        if (!other.queryParameters_.isEmpty()) {
          if (queryParametersBuilder_.isEmpty()) {
            queryParametersBuilder_.dispose();
            queryParametersBuilder_ = null;
            queryParameters_ = other.queryParameters_;
            bitField0_ = (bitField0_ & ~0x00000002);
            queryParametersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getQueryParametersFieldBuilder() : null;
          } else {
            queryParametersBuilder_.addAllMessages(other.queryParameters_);
          }
        }
      }
      if (other.hasGrpc()) {
        mergeGrpc(other.getGrpc());
      }
      if (other.hasTlsContext()) {
        mergeTlsContext(other.getTlsContext());
      }
      switch (other.getPathSpecifierCase()) {
        case PREFIX: {
          pathSpecifierCase_ = 1;
          pathSpecifier_ = other.pathSpecifier_;
          onChanged();
          break;
        }
        case PATH: {
          pathSpecifierCase_ = 2;
          pathSpecifier_ = other.pathSpecifier_;
          onChanged();
          break;
        }
        case SAFE_REGEX: {
          mergeSafeRegex(other.getSafeRegex());
          break;
        }
        case CONNECT_MATCHER: {
          mergeConnectMatcher(other.getConnectMatcher());
          break;
        }
        case PATHSPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.route.v3.RouteMatch parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.route.v3.RouteMatch) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int pathSpecifierCase_ = 0;
    private java.lang.Object pathSpecifier_;
    public PathSpecifierCase
        getPathSpecifierCase() {
      return PathSpecifierCase.forNumber(
          pathSpecifierCase_);
    }

    public Builder clearPathSpecifier() {
      pathSpecifierCase_ = 0;
      pathSpecifier_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <pre>
     * If specified, the route is a prefix rule meaning that the prefix must
     * match the beginning of the *:path* header.
     * </pre>
     *
     * <code>string prefix = 1;</code>
     * @return Whether the prefix field is set.
     */
    @java.lang.Override
    public boolean hasPrefix() {
      return pathSpecifierCase_ == 1;
    }
    /**
     * <pre>
     * If specified, the route is a prefix rule meaning that the prefix must
     * match the beginning of the *:path* header.
     * </pre>
     *
     * <code>string prefix = 1;</code>
     * @return The prefix.
     */
    @java.lang.Override
    public java.lang.String getPrefix() {
      java.lang.Object ref = "";
      if (pathSpecifierCase_ == 1) {
        ref = pathSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (pathSpecifierCase_ == 1) {
          pathSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If specified, the route is a prefix rule meaning that the prefix must
     * match the beginning of the *:path* header.
     * </pre>
     *
     * <code>string prefix = 1;</code>
     * @return The bytes for prefix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPrefixBytes() {
      java.lang.Object ref = "";
      if (pathSpecifierCase_ == 1) {
        ref = pathSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (pathSpecifierCase_ == 1) {
          pathSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If specified, the route is a prefix rule meaning that the prefix must
     * match the beginning of the *:path* header.
     * </pre>
     *
     * <code>string prefix = 1;</code>
     * @param value The prefix to set.
     * @return This builder for chaining.
     */
    public Builder setPrefix(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  pathSpecifierCase_ = 1;
      pathSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the route is a prefix rule meaning that the prefix must
     * match the beginning of the *:path* header.
     * </pre>
     *
     * <code>string prefix = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPrefix() {
      if (pathSpecifierCase_ == 1) {
        pathSpecifierCase_ = 0;
        pathSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * If specified, the route is a prefix rule meaning that the prefix must
     * match the beginning of the *:path* header.
     * </pre>
     *
     * <code>string prefix = 1;</code>
     * @param value The bytes for prefix to set.
     * @return This builder for chaining.
     */
    public Builder setPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      pathSpecifierCase_ = 1;
      pathSpecifier_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * If specified, the route is an exact path rule meaning that the path must
     * exactly match the *:path* header once the query string is removed.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return Whether the path field is set.
     */
    @java.lang.Override
    public boolean hasPath() {
      return pathSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * If specified, the route is an exact path rule meaning that the path must
     * exactly match the *:path* header once the query string is removed.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = "";
      if (pathSpecifierCase_ == 2) {
        ref = pathSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (pathSpecifierCase_ == 2) {
          pathSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If specified, the route is an exact path rule meaning that the path must
     * exactly match the *:path* header once the query string is removed.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = "";
      if (pathSpecifierCase_ == 2) {
        ref = pathSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (pathSpecifierCase_ == 2) {
          pathSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If specified, the route is an exact path rule meaning that the path must
     * exactly match the *:path* header once the query string is removed.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  pathSpecifierCase_ = 2;
      pathSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the route is an exact path rule meaning that the path must
     * exactly match the *:path* header once the query string is removed.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      if (pathSpecifierCase_ == 2) {
        pathSpecifierCase_ = 0;
        pathSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * If specified, the route is an exact path rule meaning that the path must
     * exactly match the *:path* header once the query string is removed.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      pathSpecifierCase_ = 2;
      pathSpecifier_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.RegexMatcher, io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder> safeRegexBuilder_;
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     * @return Whether the safeRegex field is set.
     */
    @java.lang.Override
    public boolean hasSafeRegex() {
      return pathSpecifierCase_ == 10;
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     * @return The safeRegex.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatcher getSafeRegex() {
      if (safeRegexBuilder_ == null) {
        if (pathSpecifierCase_ == 10) {
          return (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_;
        }
        return io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance();
      } else {
        if (pathSpecifierCase_ == 10) {
          return safeRegexBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    public Builder setSafeRegex(io.envoyproxy.envoy.type.matcher.v3.RegexMatcher value) {
      if (safeRegexBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pathSpecifier_ = value;
        onChanged();
      } else {
        safeRegexBuilder_.setMessage(value);
      }
      pathSpecifierCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    public Builder setSafeRegex(
        io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder builderForValue) {
      if (safeRegexBuilder_ == null) {
        pathSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        safeRegexBuilder_.setMessage(builderForValue.build());
      }
      pathSpecifierCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeSafeRegex(io.envoyproxy.envoy.type.matcher.v3.RegexMatcher value) {
      if (safeRegexBuilder_ == null) {
        if (pathSpecifierCase_ == 10 &&
            pathSpecifier_ != io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance()) {
          pathSpecifier_ = io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.newBuilder((io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          pathSpecifier_ = value;
        }
        onChanged();
      } else {
        if (pathSpecifierCase_ == 10) {
          safeRegexBuilder_.mergeFrom(value);
        }
        safeRegexBuilder_.setMessage(value);
      }
      pathSpecifierCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    public Builder clearSafeRegex() {
      if (safeRegexBuilder_ == null) {
        if (pathSpecifierCase_ == 10) {
          pathSpecifierCase_ = 0;
          pathSpecifier_ = null;
          onChanged();
        }
      } else {
        if (pathSpecifierCase_ == 10) {
          pathSpecifierCase_ = 0;
          pathSpecifier_ = null;
        }
        safeRegexBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder getSafeRegexBuilder() {
      return getSafeRegexFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder getSafeRegexOrBuilder() {
      if ((pathSpecifierCase_ == 10) && (safeRegexBuilder_ != null)) {
        return safeRegexBuilder_.getMessageOrBuilder();
      } else {
        if (pathSpecifierCase_ == 10) {
          return (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_;
        }
        return io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If specified, the route is a regular expression rule meaning that the
     * regex must match the *:path* header once the query string is removed. The entire path
     * (without the query string) must match the regex. The rule will not match if only a
     * subsequence of the *:path* header matches the regex.
     * [#next-major-version: In the v3 API we should redo how path specification works such
     * that we utilize StringMatcher, and additionally have consistent options around whether we
     * strip query strings, do a case sensitive match, etc. In the interim it will be too disruptive
     * to deprecate the existing options. We should even consider whether we want to do away with
     * path_specifier entirely and just rely on a set of header matchers which can already match
     * on :path, etc. The issue with that is it is unclear how to generically deal with query string
     * stripping. This needs more thought.]
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher safe_regex = 10 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.RegexMatcher, io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder> 
        getSafeRegexFieldBuilder() {
      if (safeRegexBuilder_ == null) {
        if (!(pathSpecifierCase_ == 10)) {
          pathSpecifier_ = io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance();
        }
        safeRegexBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.matcher.v3.RegexMatcher, io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder>(
                (io.envoyproxy.envoy.type.matcher.v3.RegexMatcher) pathSpecifier_,
                getParentForChildren(),
                isClean());
        pathSpecifier_ = null;
      }
      pathSpecifierCase_ = 10;
      onChanged();;
      return safeRegexBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcherOrBuilder> connectMatcherBuilder_;
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     * @return Whether the connectMatcher field is set.
     */
    @java.lang.Override
    public boolean hasConnectMatcher() {
      return pathSpecifierCase_ == 12;
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     * @return The connectMatcher.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher getConnectMatcher() {
      if (connectMatcherBuilder_ == null) {
        if (pathSpecifierCase_ == 12) {
          return (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_;
        }
        return io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
      } else {
        if (pathSpecifierCase_ == 12) {
          return connectMatcherBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    public Builder setConnectMatcher(io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher value) {
      if (connectMatcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pathSpecifier_ = value;
        onChanged();
      } else {
        connectMatcherBuilder_.setMessage(value);
      }
      pathSpecifierCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    public Builder setConnectMatcher(
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder builderForValue) {
      if (connectMatcherBuilder_ == null) {
        pathSpecifier_ = builderForValue.build();
        onChanged();
      } else {
        connectMatcherBuilder_.setMessage(builderForValue.build());
      }
      pathSpecifierCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    public Builder mergeConnectMatcher(io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher value) {
      if (connectMatcherBuilder_ == null) {
        if (pathSpecifierCase_ == 12 &&
            pathSpecifier_ != io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance()) {
          pathSpecifier_ = io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.newBuilder((io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_)
              .mergeFrom(value).buildPartial();
        } else {
          pathSpecifier_ = value;
        }
        onChanged();
      } else {
        if (pathSpecifierCase_ == 12) {
          connectMatcherBuilder_.mergeFrom(value);
        }
        connectMatcherBuilder_.setMessage(value);
      }
      pathSpecifierCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    public Builder clearConnectMatcher() {
      if (connectMatcherBuilder_ == null) {
        if (pathSpecifierCase_ == 12) {
          pathSpecifierCase_ = 0;
          pathSpecifier_ = null;
          onChanged();
        }
      } else {
        if (pathSpecifierCase_ == 12) {
          pathSpecifierCase_ = 0;
          pathSpecifier_ = null;
        }
        connectMatcherBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder getConnectMatcherBuilder() {
      return getConnectMatcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcherOrBuilder getConnectMatcherOrBuilder() {
      if ((pathSpecifierCase_ == 12) && (connectMatcherBuilder_ != null)) {
        return connectMatcherBuilder_.getMessageOrBuilder();
      } else {
        if (pathSpecifierCase_ == 12) {
          return (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_;
        }
        return io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * If this is used as the matcher, the matcher will only match CONNECT requests.
     * Note that this will not match HTTP/2 upgrade-style CONNECT requests
     * (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
     * upgrades.
     * This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
     * where Extended CONNECT requests may have a path, the path matchers will work if
     * there is a path present.
     * Note that CONNECT support is currently considered alpha in Envoy.
     * [#comment:TODO(htuch): Replace the above comment with an alpha tag.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.ConnectMatcher connect_matcher = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcherOrBuilder> 
        getConnectMatcherFieldBuilder() {
      if (connectMatcherBuilder_ == null) {
        if (!(pathSpecifierCase_ == 12)) {
          pathSpecifier_ = io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.getDefaultInstance();
        }
        connectMatcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcherOrBuilder>(
                (io.envoyproxy.envoy.config.route.v3.RouteMatch.ConnectMatcher) pathSpecifier_,
                getParentForChildren(),
                isClean());
        pathSpecifier_ = null;
      }
      pathSpecifierCase_ = 12;
      onChanged();;
      return connectMatcherBuilder_;
    }

    private com.google.protobuf.BoolValue caseSensitive_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> caseSensitiveBuilder_;
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     * @return Whether the caseSensitive field is set.
     */
    public boolean hasCaseSensitive() {
      return caseSensitiveBuilder_ != null || caseSensitive_ != null;
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     * @return The caseSensitive.
     */
    public com.google.protobuf.BoolValue getCaseSensitive() {
      if (caseSensitiveBuilder_ == null) {
        return caseSensitive_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : caseSensitive_;
      } else {
        return caseSensitiveBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    public Builder setCaseSensitive(com.google.protobuf.BoolValue value) {
      if (caseSensitiveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        caseSensitive_ = value;
        onChanged();
      } else {
        caseSensitiveBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    public Builder setCaseSensitive(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      if (caseSensitiveBuilder_ == null) {
        caseSensitive_ = builderForValue.build();
        onChanged();
      } else {
        caseSensitiveBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    public Builder mergeCaseSensitive(com.google.protobuf.BoolValue value) {
      if (caseSensitiveBuilder_ == null) {
        if (caseSensitive_ != null) {
          caseSensitive_ =
            com.google.protobuf.BoolValue.newBuilder(caseSensitive_).mergeFrom(value).buildPartial();
        } else {
          caseSensitive_ = value;
        }
        onChanged();
      } else {
        caseSensitiveBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    public Builder clearCaseSensitive() {
      if (caseSensitiveBuilder_ == null) {
        caseSensitive_ = null;
        onChanged();
      } else {
        caseSensitive_ = null;
        caseSensitiveBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    public com.google.protobuf.BoolValue.Builder getCaseSensitiveBuilder() {
      
      onChanged();
      return getCaseSensitiveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    public com.google.protobuf.BoolValueOrBuilder getCaseSensitiveOrBuilder() {
      if (caseSensitiveBuilder_ != null) {
        return caseSensitiveBuilder_.getMessageOrBuilder();
      } else {
        return caseSensitive_ == null ?
            com.google.protobuf.BoolValue.getDefaultInstance() : caseSensitive_;
      }
    }
    /**
     * <pre>
     * Indicates that prefix/path matching should be case sensitive. The default
     * is true.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue case_sensitive = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder> 
        getCaseSensitiveFieldBuilder() {
      if (caseSensitiveBuilder_ == null) {
        caseSensitiveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.BoolValue, com.google.protobuf.BoolValue.Builder, com.google.protobuf.BoolValueOrBuilder>(
                getCaseSensitive(),
                getParentForChildren(),
                isClean());
        caseSensitive_ = null;
      }
      return caseSensitiveBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent runtimeFraction_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> runtimeFractionBuilder_;
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     * @return Whether the runtimeFraction field is set.
     */
    public boolean hasRuntimeFraction() {
      return runtimeFractionBuilder_ != null || runtimeFraction_ != null;
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     * @return The runtimeFraction.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getRuntimeFraction() {
      if (runtimeFractionBuilder_ == null) {
        return runtimeFraction_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : runtimeFraction_;
      } else {
        return runtimeFractionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    public Builder setRuntimeFraction(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (runtimeFractionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        runtimeFraction_ = value;
        onChanged();
      } else {
        runtimeFractionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    public Builder setRuntimeFraction(
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
      if (runtimeFractionBuilder_ == null) {
        runtimeFraction_ = builderForValue.build();
        onChanged();
      } else {
        runtimeFractionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    public Builder mergeRuntimeFraction(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (runtimeFractionBuilder_ == null) {
        if (runtimeFraction_ != null) {
          runtimeFraction_ =
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.newBuilder(runtimeFraction_).mergeFrom(value).buildPartial();
        } else {
          runtimeFraction_ = value;
        }
        onChanged();
      } else {
        runtimeFractionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    public Builder clearRuntimeFraction() {
      if (runtimeFractionBuilder_ == null) {
        runtimeFraction_ = null;
        onChanged();
      } else {
        runtimeFraction_ = null;
        runtimeFractionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getRuntimeFractionBuilder() {
      
      onChanged();
      return getRuntimeFractionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getRuntimeFractionOrBuilder() {
      if (runtimeFractionBuilder_ != null) {
        return runtimeFractionBuilder_.getMessageOrBuilder();
      } else {
        return runtimeFraction_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : runtimeFraction_;
      }
    }
    /**
     * <pre>
     * Indicates that the route should additionally match on a runtime key. Every time the route
     * is considered for a match, it must also fall under the percentage of matches indicated by
     * this field. For some fraction N/D, a random number in the range [0,D) is selected. If the
     * number is &lt;= the value of the numerator N, or if the key is not present, the default
     * value, the router continues to evaluate the remaining match criteria. A runtime_fraction
     * route configuration can be used to roll out route changes in a gradual manner without full
     * code/config deploys. Refer to the :ref:`traffic shifting
     * &lt;config_http_conn_man_route_table_traffic_splitting_shift&gt;` docs for additional documentation.
     * .. note::
     *    Parsing this field is implemented such that the runtime key's data may be represented
     *    as a FractionalPercent proto represented as JSON/YAML and may also be represented as an
     *    integer with the assumption that the value is an integral percentage out of 100. For
     *    instance, a runtime key lookup returning the value "42" would parse as a FractionalPercent
     *    whose numerator is 42 and denominator is HUNDRED. This preserves legacy semantics.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent runtime_fraction = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
        getRuntimeFractionFieldBuilder() {
      if (runtimeFractionBuilder_ == null) {
        runtimeFractionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                getRuntimeFraction(),
                getParentForChildren(),
                isClean());
        runtimeFraction_ = null;
      }
      return runtimeFractionBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> headers_ =
      java.util.Collections.emptyList();
    private void ensureHeadersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        headers_ = new java.util.ArrayList<io.envoyproxy.envoy.config.route.v3.HeaderMatcher>(headers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.HeaderMatcher, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder, io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> headersBuilder_;

    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher> getHeadersList() {
      if (headersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(headers_);
      } else {
        return headersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public int getHeadersCount() {
      if (headersBuilder_ == null) {
        return headers_.size();
      } else {
        return headersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher getHeaders(int index) {
      if (headersBuilder_ == null) {
        return headers_.get(index);
      } else {
        return headersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder setHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.set(index, value);
        onChanged();
      } else {
        headersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder setHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.set(index, builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder addHeaders(io.envoyproxy.envoy.config.route.v3.HeaderMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.add(value);
        onChanged();
      } else {
        headersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder addHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHeadersIsMutable();
        headers_.add(index, value);
        onChanged();
      } else {
        headersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder addHeaders(
        io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.add(builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder addHeaders(
        int index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder builderForValue) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.add(index, builderForValue.build());
        onChanged();
      } else {
        headersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder addAllHeaders(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.route.v3.HeaderMatcher> values) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, headers_);
        onChanged();
      } else {
        headersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder clearHeaders() {
      if (headersBuilder_ == null) {
        headers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        headersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public Builder removeHeaders(int index) {
      if (headersBuilder_ == null) {
        ensureHeadersIsMutable();
        headers_.remove(index);
        onChanged();
      } else {
        headersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder getHeadersBuilder(
        int index) {
      return getHeadersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder getHeadersOrBuilder(
        int index) {
      if (headersBuilder_ == null) {
        return headers_.get(index);  } else {
        return headersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> 
         getHeadersOrBuilderList() {
      if (headersBuilder_ != null) {
        return headersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(headers_);
      }
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder addHeadersBuilder() {
      return getHeadersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.route.v3.HeaderMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder addHeadersBuilder(
        int index) {
      return getHeadersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a set of headers that the route should match on. The router will
     * check the request’s headers against all the specified headers in the route
     * config. A match will happen if all the headers in the route are present in
     * the request with the same values (or based on presence if the value field
     * is not in the config).
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.HeaderMatcher headers = 6;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder> 
         getHeadersBuilderList() {
      return getHeadersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.HeaderMatcher, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder, io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder> 
        getHeadersFieldBuilder() {
      if (headersBuilder_ == null) {
        headersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.route.v3.HeaderMatcher, io.envoyproxy.envoy.config.route.v3.HeaderMatcher.Builder, io.envoyproxy.envoy.config.route.v3.HeaderMatcherOrBuilder>(
                headers_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        headers_ = null;
      }
      return headersBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher> queryParameters_ =
      java.util.Collections.emptyList();
    private void ensureQueryParametersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        queryParameters_ = new java.util.ArrayList<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher>(queryParameters_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder> queryParametersBuilder_;

    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher> getQueryParametersList() {
      if (queryParametersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(queryParameters_);
      } else {
        return queryParametersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public int getQueryParametersCount() {
      if (queryParametersBuilder_ == null) {
        return queryParameters_.size();
      } else {
        return queryParametersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher getQueryParameters(int index) {
      if (queryParametersBuilder_ == null) {
        return queryParameters_.get(index);
      } else {
        return queryParametersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder setQueryParameters(
        int index, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher value) {
      if (queryParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueryParametersIsMutable();
        queryParameters_.set(index, value);
        onChanged();
      } else {
        queryParametersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder setQueryParameters(
        int index, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder builderForValue) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.set(index, builderForValue.build());
        onChanged();
      } else {
        queryParametersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder addQueryParameters(io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher value) {
      if (queryParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueryParametersIsMutable();
        queryParameters_.add(value);
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder addQueryParameters(
        int index, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher value) {
      if (queryParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueryParametersIsMutable();
        queryParameters_.add(index, value);
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder addQueryParameters(
        io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder builderForValue) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.add(builderForValue.build());
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder addQueryParameters(
        int index, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder builderForValue) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.add(index, builderForValue.build());
        onChanged();
      } else {
        queryParametersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder addAllQueryParameters(
        java.lang.Iterable<? extends io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher> values) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, queryParameters_);
        onChanged();
      } else {
        queryParametersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder clearQueryParameters() {
      if (queryParametersBuilder_ == null) {
        queryParameters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        queryParametersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public Builder removeQueryParameters(int index) {
      if (queryParametersBuilder_ == null) {
        ensureQueryParametersIsMutable();
        queryParameters_.remove(index);
        onChanged();
      } else {
        queryParametersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder getQueryParametersBuilder(
        int index) {
      return getQueryParametersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder getQueryParametersOrBuilder(
        int index) {
      if (queryParametersBuilder_ == null) {
        return queryParameters_.get(index);  } else {
        return queryParametersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder> 
         getQueryParametersOrBuilderList() {
      if (queryParametersBuilder_ != null) {
        return queryParametersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(queryParameters_);
      }
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder addQueryParametersBuilder() {
      return getQueryParametersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder addQueryParametersBuilder(
        int index) {
      return getQueryParametersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies a set of URL query parameters on which the route should
     * match. The router will check the query string from the *path* header
     * against all the specified query parameters. If the number of specified
     * query parameters is nonzero, they all must match the *path* header's
     * query string for a match to occur.
     * </pre>
     *
     * <code>repeated .envoy.config.route.v3.QueryParameterMatcher query_parameters = 7;</code>
     */
    public java.util.List<io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder> 
         getQueryParametersBuilderList() {
      return getQueryParametersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder> 
        getQueryParametersFieldBuilder() {
      if (queryParametersBuilder_ == null) {
        queryParametersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcher.Builder, io.envoyproxy.envoy.config.route.v3.QueryParameterMatcherOrBuilder>(
                queryParameters_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        queryParameters_ = null;
      }
      return queryParametersBuilder_;
    }

    private io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptionsOrBuilder> grpcBuilder_;
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     * @return Whether the grpc field is set.
     */
    public boolean hasGrpc() {
      return grpcBuilder_ != null || grpc_ != null;
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     * @return The grpc.
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions getGrpc() {
      if (grpcBuilder_ == null) {
        return grpc_ == null ? io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.getDefaultInstance() : grpc_;
      } else {
        return grpcBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    public Builder setGrpc(io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions value) {
      if (grpcBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        grpc_ = value;
        onChanged();
      } else {
        grpcBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    public Builder setGrpc(
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder builderForValue) {
      if (grpcBuilder_ == null) {
        grpc_ = builderForValue.build();
        onChanged();
      } else {
        grpcBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    public Builder mergeGrpc(io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions value) {
      if (grpcBuilder_ == null) {
        if (grpc_ != null) {
          grpc_ =
            io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.newBuilder(grpc_).mergeFrom(value).buildPartial();
        } else {
          grpc_ = value;
        }
        onChanged();
      } else {
        grpcBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    public Builder clearGrpc() {
      if (grpcBuilder_ == null) {
        grpc_ = null;
        onChanged();
      } else {
        grpc_ = null;
        grpcBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder getGrpcBuilder() {
      
      onChanged();
      return getGrpcFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptionsOrBuilder getGrpcOrBuilder() {
      if (grpcBuilder_ != null) {
        return grpcBuilder_.getMessageOrBuilder();
      } else {
        return grpc_ == null ?
            io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.getDefaultInstance() : grpc_;
      }
    }
    /**
     * <pre>
     * If specified, only gRPC requests will be matched. The router will check
     * that the content-type header has a application/grpc or one of the various
     * application/grpc+ values.
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions grpc = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptionsOrBuilder> 
        getGrpcFieldBuilder() {
      if (grpcBuilder_ == null) {
        grpcBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptions.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.GrpcRouteMatchOptionsOrBuilder>(
                getGrpc(),
                getParentForChildren(),
                isClean());
        grpc_ = null;
      }
      return grpcBuilder_;
    }

    private io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tlsContext_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptionsOrBuilder> tlsContextBuilder_;
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     * @return Whether the tlsContext field is set.
     */
    public boolean hasTlsContext() {
      return tlsContextBuilder_ != null || tlsContext_ != null;
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     * @return The tlsContext.
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions getTlsContext() {
      if (tlsContextBuilder_ == null) {
        return tlsContext_ == null ? io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.getDefaultInstance() : tlsContext_;
      } else {
        return tlsContextBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    public Builder setTlsContext(io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions value) {
      if (tlsContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tlsContext_ = value;
        onChanged();
      } else {
        tlsContextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    public Builder setTlsContext(
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder builderForValue) {
      if (tlsContextBuilder_ == null) {
        tlsContext_ = builderForValue.build();
        onChanged();
      } else {
        tlsContextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    public Builder mergeTlsContext(io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions value) {
      if (tlsContextBuilder_ == null) {
        if (tlsContext_ != null) {
          tlsContext_ =
            io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.newBuilder(tlsContext_).mergeFrom(value).buildPartial();
        } else {
          tlsContext_ = value;
        }
        onChanged();
      } else {
        tlsContextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    public Builder clearTlsContext() {
      if (tlsContextBuilder_ == null) {
        tlsContext_ = null;
        onChanged();
      } else {
        tlsContext_ = null;
        tlsContextBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder getTlsContextBuilder() {
      
      onChanged();
      return getTlsContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    public io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptionsOrBuilder getTlsContextOrBuilder() {
      if (tlsContextBuilder_ != null) {
        return tlsContextBuilder_.getMessageOrBuilder();
      } else {
        return tlsContext_ == null ?
            io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.getDefaultInstance() : tlsContext_;
      }
    }
    /**
     * <pre>
     * If specified, the client tls context will be matched against the defined
     * match options.
     * [#next-major-version: unify with RBAC]
     * </pre>
     *
     * <code>.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions tls_context = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptionsOrBuilder> 
        getTlsContextFieldBuilder() {
      if (tlsContextBuilder_ == null) {
        tlsContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptions.Builder, io.envoyproxy.envoy.config.route.v3.RouteMatch.TlsContextMatchOptionsOrBuilder>(
                getTlsContext(),
                getParentForChildren(),
                isClean());
        tlsContext_ = null;
      }
      return tlsContextBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.route.v3.RouteMatch)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.route.v3.RouteMatch)
  private static final io.envoyproxy.envoy.config.route.v3.RouteMatch DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.route.v3.RouteMatch();
  }

  public static io.envoyproxy.envoy.config.route.v3.RouteMatch getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RouteMatch>
      PARSER = new com.google.protobuf.AbstractParser<RouteMatch>() {
    @java.lang.Override
    public RouteMatch parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RouteMatch(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RouteMatch> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RouteMatch> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.route.v3.RouteMatch getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

