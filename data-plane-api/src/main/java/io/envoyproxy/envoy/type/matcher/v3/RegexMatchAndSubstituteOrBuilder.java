// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/type/matcher/v3/regex.proto

package io.envoyproxy.envoy.type.matcher.v3;

public interface RegexMatchAndSubstituteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.type.matcher.v3.RegexMatchAndSubstitute)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the pattern field is set.
   */
  boolean hasPattern();
  /**
   * <pre>
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
   * @return The pattern.
   */
  io.envoyproxy.envoy.type.matcher.v3.RegexMatcher getPattern();
  /**
   * <pre>
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder getPatternOrBuilder();

  /**
   * <pre>
   * The string that should be substituted into matching portions of the
   * subject string during a substitution operation to produce a new string.
   * Capture groups in the pattern can be referenced in the substitution
   * string. Note, however, that the syntax for referring to capture groups is
   * defined by the chosen regular expression engine. Google's `RE2
   * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
   * backslash followed by the capture group number to denote a numbered
   * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
   * to capture group 2.
   * </pre>
   *
   * <code>string substitution = 2;</code>
   * @return The substitution.
   */
  java.lang.String getSubstitution();
  /**
   * <pre>
   * The string that should be substituted into matching portions of the
   * subject string during a substitution operation to produce a new string.
   * Capture groups in the pattern can be referenced in the substitution
   * string. Note, however, that the syntax for referring to capture groups is
   * defined by the chosen regular expression engine. Google's `RE2
   * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
   * backslash followed by the capture group number to denote a numbered
   * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
   * to capture group 2.
   * </pre>
   *
   * <code>string substitution = 2;</code>
   * @return The bytes for substitution.
   */
  com.google.protobuf.ByteString
      getSubstitutionBytes();
}
