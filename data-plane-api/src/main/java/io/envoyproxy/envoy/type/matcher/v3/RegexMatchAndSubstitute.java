// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/type/matcher/v3/regex.proto

package io.envoyproxy.envoy.type.matcher.v3;

/**
 * <pre>
 * Describes how to match a string and then produce a new string using a regular
 * expression and a substitution string.
 * </pre>
 *
 * Protobuf type {@code envoy.type.matcher.v3.RegexMatchAndSubstitute}
 */
public final class RegexMatchAndSubstitute extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.type.matcher.v3.RegexMatchAndSubstitute)
    RegexMatchAndSubstituteOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RegexMatchAndSubstitute.newBuilder() to construct.
  private RegexMatchAndSubstitute(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RegexMatchAndSubstitute() {
    substitution_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RegexMatchAndSubstitute();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RegexMatchAndSubstitute(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder subBuilder = null;
            if (pattern_ != null) {
              subBuilder = pattern_.toBuilder();
            }
            pattern_ = input.readMessage(io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(pattern_);
              pattern_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            substitution_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.type.matcher.v3.RegexProto.internal_static_envoy_type_matcher_v3_RegexMatchAndSubstitute_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.type.matcher.v3.RegexProto.internal_static_envoy_type_matcher_v3_RegexMatchAndSubstitute_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.class, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder.class);
  }

  public static final int PATTERN_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.type.matcher.v3.RegexMatcher pattern_;
  /**
   * <pre>
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the pattern field is set.
   */
  @java.lang.Override
  public boolean hasPattern() {
    return pattern_ != null;
  }
  /**
   * <pre>
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
   * @return The pattern.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatcher getPattern() {
    return pattern_ == null ? io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance() : pattern_;
  }
  /**
   * <pre>
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder getPatternOrBuilder() {
    return getPattern();
  }

  public static final int SUBSTITUTION_FIELD_NUMBER = 2;
  private volatile java.lang.Object substitution_;
  /**
   * <pre>
   * The string that should be substituted into matching portions of the
   * subject string during a substitution operation to produce a new string.
   * Capture groups in the pattern can be referenced in the substitution
   * string. Note, however, that the syntax for referring to capture groups is
   * defined by the chosen regular expression engine. Google's `RE2
   * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
   * backslash followed by the capture group number to denote a numbered
   * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
   * to capture group 2.
   * </pre>
   *
   * <code>string substitution = 2;</code>
   * @return The substitution.
   */
  @java.lang.Override
  public java.lang.String getSubstitution() {
    java.lang.Object ref = substitution_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      substitution_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The string that should be substituted into matching portions of the
   * subject string during a substitution operation to produce a new string.
   * Capture groups in the pattern can be referenced in the substitution
   * string. Note, however, that the syntax for referring to capture groups is
   * defined by the chosen regular expression engine. Google's `RE2
   * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
   * backslash followed by the capture group number to denote a numbered
   * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
   * to capture group 2.
   * </pre>
   *
   * <code>string substitution = 2;</code>
   * @return The bytes for substitution.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSubstitutionBytes() {
    java.lang.Object ref = substitution_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      substitution_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (pattern_ != null) {
      output.writeMessage(1, getPattern());
    }
    if (!getSubstitutionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, substitution_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (pattern_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPattern());
    }
    if (!getSubstitutionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, substitution_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute other = (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) obj;

    if (hasPattern() != other.hasPattern()) return false;
    if (hasPattern()) {
      if (!getPattern()
          .equals(other.getPattern())) return false;
    }
    if (!getSubstitution()
        .equals(other.getSubstitution())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPattern()) {
      hash = (37 * hash) + PATTERN_FIELD_NUMBER;
      hash = (53 * hash) + getPattern().hashCode();
    }
    hash = (37 * hash) + SUBSTITUTION_FIELD_NUMBER;
    hash = (53 * hash) + getSubstitution().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes how to match a string and then produce a new string using a regular
   * expression and a substitution string.
   * </pre>
   *
   * Protobuf type {@code envoy.type.matcher.v3.RegexMatchAndSubstitute}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.type.matcher.v3.RegexMatchAndSubstitute)
      io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstituteOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.type.matcher.v3.RegexProto.internal_static_envoy_type_matcher_v3_RegexMatchAndSubstitute_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.type.matcher.v3.RegexProto.internal_static_envoy_type_matcher_v3_RegexMatchAndSubstitute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.class, io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (patternBuilder_ == null) {
        pattern_ = null;
      } else {
        pattern_ = null;
        patternBuilder_ = null;
      }
      substitution_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.type.matcher.v3.RegexProto.internal_static_envoy_type_matcher_v3_RegexMatchAndSubstitute_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute getDefaultInstanceForType() {
      return io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute build() {
      io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute buildPartial() {
      io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute result = new io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute(this);
      if (patternBuilder_ == null) {
        result.pattern_ = pattern_;
      } else {
        result.pattern_ = patternBuilder_.build();
      }
      result.substitution_ = substitution_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) {
        return mergeFrom((io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute other) {
      if (other == io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute.getDefaultInstance()) return this;
      if (other.hasPattern()) {
        mergePattern(other.getPattern());
      }
      if (!other.getSubstitution().isEmpty()) {
        substitution_ = other.substitution_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private io.envoyproxy.envoy.type.matcher.v3.RegexMatcher pattern_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.RegexMatcher, io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder> patternBuilder_;
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the pattern field is set.
     */
    public boolean hasPattern() {
      return patternBuilder_ != null || pattern_ != null;
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     * @return The pattern.
     */
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatcher getPattern() {
      if (patternBuilder_ == null) {
        return pattern_ == null ? io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance() : pattern_;
      } else {
        return patternBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setPattern(io.envoyproxy.envoy.type.matcher.v3.RegexMatcher value) {
      if (patternBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pattern_ = value;
        onChanged();
      } else {
        patternBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setPattern(
        io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder builderForValue) {
      if (patternBuilder_ == null) {
        pattern_ = builderForValue.build();
        onChanged();
      } else {
        patternBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergePattern(io.envoyproxy.envoy.type.matcher.v3.RegexMatcher value) {
      if (patternBuilder_ == null) {
        if (pattern_ != null) {
          pattern_ =
            io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.newBuilder(pattern_).mergeFrom(value).buildPartial();
        } else {
          pattern_ = value;
        }
        onChanged();
      } else {
        patternBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearPattern() {
      if (patternBuilder_ == null) {
        pattern_ = null;
        onChanged();
      } else {
        pattern_ = null;
        patternBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder getPatternBuilder() {
      
      onChanged();
      return getPatternFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder getPatternOrBuilder() {
      if (patternBuilder_ != null) {
        return patternBuilder_.getMessageOrBuilder();
      } else {
        return pattern_ == null ?
            io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.getDefaultInstance() : pattern_;
      }
    }
    /**
     * <pre>
     * The regular expression used to find portions of a string (hereafter called
     * the "subject string") that should be replaced. When a new string is
     * produced during the substitution operation, the new string is initially
     * the same as the subject string, but then all matches in the subject string
     * are replaced by the substitution string. If replacing all matches isn't
     * desired, regular expression anchors can be used to ensure a single match,
     * so as to replace just one occurrence of a pattern. Capture groups can be
     * used in the pattern to extract portions of the subject string, and then
     * referenced in the substitution string.
     * </pre>
     *
     * <code>.envoy.type.matcher.v3.RegexMatcher pattern = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.RegexMatcher, io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder> 
        getPatternFieldBuilder() {
      if (patternBuilder_ == null) {
        patternBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.matcher.v3.RegexMatcher, io.envoyproxy.envoy.type.matcher.v3.RegexMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.RegexMatcherOrBuilder>(
                getPattern(),
                getParentForChildren(),
                isClean());
        pattern_ = null;
      }
      return patternBuilder_;
    }

    private java.lang.Object substitution_ = "";
    /**
     * <pre>
     * The string that should be substituted into matching portions of the
     * subject string during a substitution operation to produce a new string.
     * Capture groups in the pattern can be referenced in the substitution
     * string. Note, however, that the syntax for referring to capture groups is
     * defined by the chosen regular expression engine. Google's `RE2
     * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
     * backslash followed by the capture group number to denote a numbered
     * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
     * to capture group 2.
     * </pre>
     *
     * <code>string substitution = 2;</code>
     * @return The substitution.
     */
    public java.lang.String getSubstitution() {
      java.lang.Object ref = substitution_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        substitution_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The string that should be substituted into matching portions of the
     * subject string during a substitution operation to produce a new string.
     * Capture groups in the pattern can be referenced in the substitution
     * string. Note, however, that the syntax for referring to capture groups is
     * defined by the chosen regular expression engine. Google's `RE2
     * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
     * backslash followed by the capture group number to denote a numbered
     * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
     * to capture group 2.
     * </pre>
     *
     * <code>string substitution = 2;</code>
     * @return The bytes for substitution.
     */
    public com.google.protobuf.ByteString
        getSubstitutionBytes() {
      java.lang.Object ref = substitution_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        substitution_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The string that should be substituted into matching portions of the
     * subject string during a substitution operation to produce a new string.
     * Capture groups in the pattern can be referenced in the substitution
     * string. Note, however, that the syntax for referring to capture groups is
     * defined by the chosen regular expression engine. Google's `RE2
     * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
     * backslash followed by the capture group number to denote a numbered
     * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
     * to capture group 2.
     * </pre>
     *
     * <code>string substitution = 2;</code>
     * @param value The substitution to set.
     * @return This builder for chaining.
     */
    public Builder setSubstitution(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      substitution_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The string that should be substituted into matching portions of the
     * subject string during a substitution operation to produce a new string.
     * Capture groups in the pattern can be referenced in the substitution
     * string. Note, however, that the syntax for referring to capture groups is
     * defined by the chosen regular expression engine. Google's `RE2
     * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
     * backslash followed by the capture group number to denote a numbered
     * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
     * to capture group 2.
     * </pre>
     *
     * <code>string substitution = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSubstitution() {
      
      substitution_ = getDefaultInstance().getSubstitution();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The string that should be substituted into matching portions of the
     * subject string during a substitution operation to produce a new string.
     * Capture groups in the pattern can be referenced in the substitution
     * string. Note, however, that the syntax for referring to capture groups is
     * defined by the chosen regular expression engine. Google's `RE2
     * &lt;https://github.com/google/re2&gt;`_ regular expression engine uses a
     * backslash followed by the capture group number to denote a numbered
     * capture group. E.g., ``&#92;1`` refers to capture group 1, and ``&#92;2`` refers
     * to capture group 2.
     * </pre>
     *
     * <code>string substitution = 2;</code>
     * @param value The bytes for substitution to set.
     * @return This builder for chaining.
     */
    public Builder setSubstitutionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      substitution_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.type.matcher.v3.RegexMatchAndSubstitute)
  }

  // @@protoc_insertion_point(class_scope:envoy.type.matcher.v3.RegexMatchAndSubstitute)
  private static final io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute();
  }

  public static io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RegexMatchAndSubstitute>
      PARSER = new com.google.protobuf.AbstractParser<RegexMatchAndSubstitute>() {
    @java.lang.Override
    public RegexMatchAndSubstitute parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RegexMatchAndSubstitute(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RegexMatchAndSubstitute> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RegexMatchAndSubstitute> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.RegexMatchAndSubstitute getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

