// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/type/metadata/v3/metadata.proto

package io.envoyproxy.envoy.type.metadata.v3;

public interface MetadataKeyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.type.metadata.v3.MetadataKey)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The key name of Metadata to retrieve the Struct from the metadata.
   * Typically, it represents a builtin subsystem or custom extension.
   * </pre>
   *
   * <code>string key = 1 [(.validate.rules) = { ... }</code>
   * @return The key.
   */
  java.lang.String getKey();
  /**
   * <pre>
   * The key name of Metadata to retrieve the Struct from the metadata.
   * Typically, it represents a builtin subsystem or custom extension.
   * </pre>
   *
   * <code>string key = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for key.
   */
  com.google.protobuf.ByteString
      getKeyBytes();

  /**
   * <pre>
   * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
   * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
   * which depends on the particular scenario.
   * Note: Due to that only the key type segment is supported, the path can not specify a list
   * unless the list is the last segment.
   * </pre>
   *
   * <code>repeated .envoy.type.metadata.v3.MetadataKey.PathSegment path = 2 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.type.metadata.v3.MetadataKey.PathSegment> 
      getPathList();
  /**
   * <pre>
   * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
   * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
   * which depends on the particular scenario.
   * Note: Due to that only the key type segment is supported, the path can not specify a list
   * unless the list is the last segment.
   * </pre>
   *
   * <code>repeated .envoy.type.metadata.v3.MetadataKey.PathSegment path = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.metadata.v3.MetadataKey.PathSegment getPath(int index);
  /**
   * <pre>
   * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
   * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
   * which depends on the particular scenario.
   * Note: Due to that only the key type segment is supported, the path can not specify a list
   * unless the list is the last segment.
   * </pre>
   *
   * <code>repeated .envoy.type.metadata.v3.MetadataKey.PathSegment path = 2 [(.validate.rules) = { ... }</code>
   */
  int getPathCount();
  /**
   * <pre>
   * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
   * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
   * which depends on the particular scenario.
   * Note: Due to that only the key type segment is supported, the path can not specify a list
   * unless the list is the last segment.
   * </pre>
   *
   * <code>repeated .envoy.type.metadata.v3.MetadataKey.PathSegment path = 2 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.metadata.v3.MetadataKey.PathSegmentOrBuilder> 
      getPathOrBuilderList();
  /**
   * <pre>
   * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
   * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
   * which depends on the particular scenario.
   * Note: Due to that only the key type segment is supported, the path can not specify a list
   * unless the list is the last segment.
   * </pre>
   *
   * <code>repeated .envoy.type.metadata.v3.MetadataKey.PathSegment path = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.metadata.v3.MetadataKey.PathSegmentOrBuilder getPathOrBuilder(
      int index);
}
