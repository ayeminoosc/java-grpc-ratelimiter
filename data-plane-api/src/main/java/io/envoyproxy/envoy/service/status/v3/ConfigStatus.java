// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/status/v3/csds.proto

package io.envoyproxy.envoy.service.status.v3;

/**
 * <pre>
 * Status of a config from a management server view.
 * </pre>
 *
 * Protobuf enum {@code envoy.service.status.v3.ConfigStatus}
 */
public enum ConfigStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Status info is not available/unknown.
   * </pre>
   *
   * <code>UNKNOWN = 0;</code>
   */
  UNKNOWN(0),
  /**
   * <pre>
   * Management server has sent the config to client and received ACK.
   * </pre>
   *
   * <code>SYNCED = 1;</code>
   */
  SYNCED(1),
  /**
   * <pre>
   * Config is not sent.
   * </pre>
   *
   * <code>NOT_SENT = 2;</code>
   */
  NOT_SENT(2),
  /**
   * <pre>
   * Management server has sent the config to client but hasn’t received
   * ACK/NACK.
   * </pre>
   *
   * <code>STALE = 3;</code>
   */
  STALE(3),
  /**
   * <pre>
   * Management server has sent the config to client but received NACK. The
   * attached config dump will be the latest config (the rejected one), since
   * it is the persisted version in the management server.
   * </pre>
   *
   * <code>ERROR = 4;</code>
   */
  ERROR(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Status info is not available/unknown.
   * </pre>
   *
   * <code>UNKNOWN = 0;</code>
   */
  public static final int UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * Management server has sent the config to client and received ACK.
   * </pre>
   *
   * <code>SYNCED = 1;</code>
   */
  public static final int SYNCED_VALUE = 1;
  /**
   * <pre>
   * Config is not sent.
   * </pre>
   *
   * <code>NOT_SENT = 2;</code>
   */
  public static final int NOT_SENT_VALUE = 2;
  /**
   * <pre>
   * Management server has sent the config to client but hasn’t received
   * ACK/NACK.
   * </pre>
   *
   * <code>STALE = 3;</code>
   */
  public static final int STALE_VALUE = 3;
  /**
   * <pre>
   * Management server has sent the config to client but received NACK. The
   * attached config dump will be the latest config (the rejected one), since
   * it is the persisted version in the management server.
   * </pre>
   *
   * <code>ERROR = 4;</code>
   */
  public static final int ERROR_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ConfigStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ConfigStatus forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN;
      case 1: return SYNCED;
      case 2: return NOT_SENT;
      case 3: return STALE;
      case 4: return ERROR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ConfigStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ConfigStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ConfigStatus>() {
          public ConfigStatus findValueByNumber(int number) {
            return ConfigStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.envoyproxy.envoy.service.status.v3.CsdsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ConfigStatus[] VALUES = values();

  public static ConfigStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ConfigStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:envoy.service.status.v3.ConfigStatus)
}

