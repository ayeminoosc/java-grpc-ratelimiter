// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/admin/v3/clusters.proto

package io.envoyproxy.envoy.admin.v3;

/**
 * <pre>
 * Details an individual cluster's current status.
 * [#next-free-field: 7]
 * </pre>
 *
 * Protobuf type {@code envoy.admin.v3.ClusterStatus}
 */
public final class ClusterStatus extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.admin.v3.ClusterStatus)
    ClusterStatusOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ClusterStatus.newBuilder() to construct.
  private ClusterStatus(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ClusterStatus() {
    name_ = "";
    hostStatuses_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ClusterStatus();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ClusterStatus(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 16: {

            addedViaApi_ = input.readBool();
            break;
          }
          case 26: {
            io.envoyproxy.envoy.type.v3.Percent.Builder subBuilder = null;
            if (successRateEjectionThreshold_ != null) {
              subBuilder = successRateEjectionThreshold_.toBuilder();
            }
            successRateEjectionThreshold_ = input.readMessage(io.envoyproxy.envoy.type.v3.Percent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(successRateEjectionThreshold_);
              successRateEjectionThreshold_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              hostStatuses_ = new java.util.ArrayList<io.envoyproxy.envoy.admin.v3.HostStatus>();
              mutable_bitField0_ |= 0x00000001;
            }
            hostStatuses_.add(
                input.readMessage(io.envoyproxy.envoy.admin.v3.HostStatus.parser(), extensionRegistry));
            break;
          }
          case 42: {
            io.envoyproxy.envoy.type.v3.Percent.Builder subBuilder = null;
            if (localOriginSuccessRateEjectionThreshold_ != null) {
              subBuilder = localOriginSuccessRateEjectionThreshold_.toBuilder();
            }
            localOriginSuccessRateEjectionThreshold_ = input.readMessage(io.envoyproxy.envoy.type.v3.Percent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(localOriginSuccessRateEjectionThreshold_);
              localOriginSuccessRateEjectionThreshold_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.Builder subBuilder = null;
            if (circuitBreakers_ != null) {
              subBuilder = circuitBreakers_.toBuilder();
            }
            circuitBreakers_ = input.readMessage(io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(circuitBreakers_);
              circuitBreakers_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        hostStatuses_ = java.util.Collections.unmodifiableList(hostStatuses_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.admin.v3.ClustersProto.internal_static_envoy_admin_v3_ClusterStatus_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.admin.v3.ClustersProto.internal_static_envoy_admin_v3_ClusterStatus_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.admin.v3.ClusterStatus.class, io.envoyproxy.envoy.admin.v3.ClusterStatus.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * Name of the cluster.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Name of the cluster.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ADDED_VIA_API_FIELD_NUMBER = 2;
  private boolean addedViaApi_;
  /**
   * <pre>
   * Denotes whether this cluster was added via API or configured statically.
   * </pre>
   *
   * <code>bool added_via_api = 2;</code>
   * @return The addedViaApi.
   */
  @java.lang.Override
  public boolean getAddedViaApi() {
    return addedViaApi_;
  }

  public static final int SUCCESS_RATE_EJECTION_THRESHOLD_FIELD_NUMBER = 3;
  private io.envoyproxy.envoy.type.v3.Percent successRateEjectionThreshold_;
  /**
   * <pre>
   * The success rate threshold used in the last interval.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *false*, all errors: externally and locally generated were used to calculate the threshold.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *true*, only externally generated errors were used to calculate the threshold.
   * The threshold is used to eject hosts based on their success rate. See
   * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
   * Note: this field may be omitted in any of the three following cases:
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
   * @return Whether the successRateEjectionThreshold field is set.
   */
  @java.lang.Override
  public boolean hasSuccessRateEjectionThreshold() {
    return successRateEjectionThreshold_ != null;
  }
  /**
   * <pre>
   * The success rate threshold used in the last interval.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *false*, all errors: externally and locally generated were used to calculate the threshold.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *true*, only externally generated errors were used to calculate the threshold.
   * The threshold is used to eject hosts based on their success rate. See
   * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
   * Note: this field may be omitted in any of the three following cases:
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
   * @return The successRateEjectionThreshold.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.Percent getSuccessRateEjectionThreshold() {
    return successRateEjectionThreshold_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : successRateEjectionThreshold_;
  }
  /**
   * <pre>
   * The success rate threshold used in the last interval.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *false*, all errors: externally and locally generated were used to calculate the threshold.
   * If
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *true*, only externally generated errors were used to calculate the threshold.
   * The threshold is used to eject hosts based on their success rate. See
   * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
   * Note: this field may be omitted in any of the three following cases:
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.PercentOrBuilder getSuccessRateEjectionThresholdOrBuilder() {
    return getSuccessRateEjectionThreshold();
  }

  public static final int HOST_STATUSES_FIELD_NUMBER = 4;
  private java.util.List<io.envoyproxy.envoy.admin.v3.HostStatus> hostStatuses_;
  /**
   * <pre>
   * Mapping from host address to the host's current status.
   * </pre>
   *
   * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.admin.v3.HostStatus> getHostStatusesList() {
    return hostStatuses_;
  }
  /**
   * <pre>
   * Mapping from host address to the host's current status.
   * </pre>
   *
   * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder> 
      getHostStatusesOrBuilderList() {
    return hostStatuses_;
  }
  /**
   * <pre>
   * Mapping from host address to the host's current status.
   * </pre>
   *
   * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
   */
  @java.lang.Override
  public int getHostStatusesCount() {
    return hostStatuses_.size();
  }
  /**
   * <pre>
   * Mapping from host address to the host's current status.
   * </pre>
   *
   * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.admin.v3.HostStatus getHostStatuses(int index) {
    return hostStatuses_.get(index);
  }
  /**
   * <pre>
   * Mapping from host address to the host's current status.
   * </pre>
   *
   * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder getHostStatusesOrBuilder(
      int index) {
    return hostStatuses_.get(index);
  }

  public static final int LOCAL_ORIGIN_SUCCESS_RATE_EJECTION_THRESHOLD_FIELD_NUMBER = 5;
  private io.envoyproxy.envoy.type.v3.Percent localOriginSuccessRateEjectionThreshold_;
  /**
   * <pre>
   * The success rate threshold used in the last interval when only locally originated failures were
   * taken into account and externally originated errors were treated as success.
   * This field should be interpreted only when
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *true*. The threshold is used to eject hosts based on their success rate.
   * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
   * details.
   * Note: this field may be omitted in any of the three following cases:
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
   * @return Whether the localOriginSuccessRateEjectionThreshold field is set.
   */
  @java.lang.Override
  public boolean hasLocalOriginSuccessRateEjectionThreshold() {
    return localOriginSuccessRateEjectionThreshold_ != null;
  }
  /**
   * <pre>
   * The success rate threshold used in the last interval when only locally originated failures were
   * taken into account and externally originated errors were treated as success.
   * This field should be interpreted only when
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *true*. The threshold is used to eject hosts based on their success rate.
   * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
   * details.
   * Note: this field may be omitted in any of the three following cases:
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
   * @return The localOriginSuccessRateEjectionThreshold.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.Percent getLocalOriginSuccessRateEjectionThreshold() {
    return localOriginSuccessRateEjectionThreshold_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : localOriginSuccessRateEjectionThreshold_;
  }
  /**
   * <pre>
   * The success rate threshold used in the last interval when only locally originated failures were
   * taken into account and externally originated errors were treated as success.
   * This field should be interpreted only when
   * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
   * is *true*. The threshold is used to eject hosts based on their success rate.
   * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
   * details.
   * Note: this field may be omitted in any of the three following cases:
   * 1. There were not enough hosts with enough request volume to proceed with success rate based
   *    outlier ejection.
   * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
   *    threshold for that interval.
   * 3. Outlier detection is not enabled for this cluster.
   * </pre>
   *
   * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.v3.PercentOrBuilder getLocalOriginSuccessRateEjectionThresholdOrBuilder() {
    return getLocalOriginSuccessRateEjectionThreshold();
  }

  public static final int CIRCUIT_BREAKERS_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers circuitBreakers_;
  /**
   * <pre>
   * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
   * @return Whether the circuitBreakers field is set.
   */
  @java.lang.Override
  public boolean hasCircuitBreakers() {
    return circuitBreakers_ != null;
  }
  /**
   * <pre>
   * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
   * @return The circuitBreakers.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers getCircuitBreakers() {
    return circuitBreakers_ == null ? io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.getDefaultInstance() : circuitBreakers_;
  }
  /**
   * <pre>
   * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.cluster.v3.CircuitBreakersOrBuilder getCircuitBreakersOrBuilder() {
    return getCircuitBreakers();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (addedViaApi_ != false) {
      output.writeBool(2, addedViaApi_);
    }
    if (successRateEjectionThreshold_ != null) {
      output.writeMessage(3, getSuccessRateEjectionThreshold());
    }
    for (int i = 0; i < hostStatuses_.size(); i++) {
      output.writeMessage(4, hostStatuses_.get(i));
    }
    if (localOriginSuccessRateEjectionThreshold_ != null) {
      output.writeMessage(5, getLocalOriginSuccessRateEjectionThreshold());
    }
    if (circuitBreakers_ != null) {
      output.writeMessage(6, getCircuitBreakers());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (addedViaApi_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, addedViaApi_);
    }
    if (successRateEjectionThreshold_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getSuccessRateEjectionThreshold());
    }
    for (int i = 0; i < hostStatuses_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, hostStatuses_.get(i));
    }
    if (localOriginSuccessRateEjectionThreshold_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getLocalOriginSuccessRateEjectionThreshold());
    }
    if (circuitBreakers_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getCircuitBreakers());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.admin.v3.ClusterStatus)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.admin.v3.ClusterStatus other = (io.envoyproxy.envoy.admin.v3.ClusterStatus) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (getAddedViaApi()
        != other.getAddedViaApi()) return false;
    if (hasSuccessRateEjectionThreshold() != other.hasSuccessRateEjectionThreshold()) return false;
    if (hasSuccessRateEjectionThreshold()) {
      if (!getSuccessRateEjectionThreshold()
          .equals(other.getSuccessRateEjectionThreshold())) return false;
    }
    if (!getHostStatusesList()
        .equals(other.getHostStatusesList())) return false;
    if (hasLocalOriginSuccessRateEjectionThreshold() != other.hasLocalOriginSuccessRateEjectionThreshold()) return false;
    if (hasLocalOriginSuccessRateEjectionThreshold()) {
      if (!getLocalOriginSuccessRateEjectionThreshold()
          .equals(other.getLocalOriginSuccessRateEjectionThreshold())) return false;
    }
    if (hasCircuitBreakers() != other.hasCircuitBreakers()) return false;
    if (hasCircuitBreakers()) {
      if (!getCircuitBreakers()
          .equals(other.getCircuitBreakers())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + ADDED_VIA_API_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getAddedViaApi());
    if (hasSuccessRateEjectionThreshold()) {
      hash = (37 * hash) + SUCCESS_RATE_EJECTION_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + getSuccessRateEjectionThreshold().hashCode();
    }
    if (getHostStatusesCount() > 0) {
      hash = (37 * hash) + HOST_STATUSES_FIELD_NUMBER;
      hash = (53 * hash) + getHostStatusesList().hashCode();
    }
    if (hasLocalOriginSuccessRateEjectionThreshold()) {
      hash = (37 * hash) + LOCAL_ORIGIN_SUCCESS_RATE_EJECTION_THRESHOLD_FIELD_NUMBER;
      hash = (53 * hash) + getLocalOriginSuccessRateEjectionThreshold().hashCode();
    }
    if (hasCircuitBreakers()) {
      hash = (37 * hash) + CIRCUIT_BREAKERS_FIELD_NUMBER;
      hash = (53 * hash) + getCircuitBreakers().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.admin.v3.ClusterStatus parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.admin.v3.ClusterStatus prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Details an individual cluster's current status.
   * [#next-free-field: 7]
   * </pre>
   *
   * Protobuf type {@code envoy.admin.v3.ClusterStatus}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.admin.v3.ClusterStatus)
      io.envoyproxy.envoy.admin.v3.ClusterStatusOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.admin.v3.ClustersProto.internal_static_envoy_admin_v3_ClusterStatus_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.admin.v3.ClustersProto.internal_static_envoy_admin_v3_ClusterStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.admin.v3.ClusterStatus.class, io.envoyproxy.envoy.admin.v3.ClusterStatus.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.admin.v3.ClusterStatus.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getHostStatusesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      addedViaApi_ = false;

      if (successRateEjectionThresholdBuilder_ == null) {
        successRateEjectionThreshold_ = null;
      } else {
        successRateEjectionThreshold_ = null;
        successRateEjectionThresholdBuilder_ = null;
      }
      if (hostStatusesBuilder_ == null) {
        hostStatuses_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        hostStatusesBuilder_.clear();
      }
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        localOriginSuccessRateEjectionThreshold_ = null;
      } else {
        localOriginSuccessRateEjectionThreshold_ = null;
        localOriginSuccessRateEjectionThresholdBuilder_ = null;
      }
      if (circuitBreakersBuilder_ == null) {
        circuitBreakers_ = null;
      } else {
        circuitBreakers_ = null;
        circuitBreakersBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.admin.v3.ClustersProto.internal_static_envoy_admin_v3_ClusterStatus_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.admin.v3.ClusterStatus getDefaultInstanceForType() {
      return io.envoyproxy.envoy.admin.v3.ClusterStatus.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.admin.v3.ClusterStatus build() {
      io.envoyproxy.envoy.admin.v3.ClusterStatus result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.admin.v3.ClusterStatus buildPartial() {
      io.envoyproxy.envoy.admin.v3.ClusterStatus result = new io.envoyproxy.envoy.admin.v3.ClusterStatus(this);
      int from_bitField0_ = bitField0_;
      result.name_ = name_;
      result.addedViaApi_ = addedViaApi_;
      if (successRateEjectionThresholdBuilder_ == null) {
        result.successRateEjectionThreshold_ = successRateEjectionThreshold_;
      } else {
        result.successRateEjectionThreshold_ = successRateEjectionThresholdBuilder_.build();
      }
      if (hostStatusesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          hostStatuses_ = java.util.Collections.unmodifiableList(hostStatuses_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.hostStatuses_ = hostStatuses_;
      } else {
        result.hostStatuses_ = hostStatusesBuilder_.build();
      }
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        result.localOriginSuccessRateEjectionThreshold_ = localOriginSuccessRateEjectionThreshold_;
      } else {
        result.localOriginSuccessRateEjectionThreshold_ = localOriginSuccessRateEjectionThresholdBuilder_.build();
      }
      if (circuitBreakersBuilder_ == null) {
        result.circuitBreakers_ = circuitBreakers_;
      } else {
        result.circuitBreakers_ = circuitBreakersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.admin.v3.ClusterStatus) {
        return mergeFrom((io.envoyproxy.envoy.admin.v3.ClusterStatus)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.admin.v3.ClusterStatus other) {
      if (other == io.envoyproxy.envoy.admin.v3.ClusterStatus.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.getAddedViaApi() != false) {
        setAddedViaApi(other.getAddedViaApi());
      }
      if (other.hasSuccessRateEjectionThreshold()) {
        mergeSuccessRateEjectionThreshold(other.getSuccessRateEjectionThreshold());
      }
      if (hostStatusesBuilder_ == null) {
        if (!other.hostStatuses_.isEmpty()) {
          if (hostStatuses_.isEmpty()) {
            hostStatuses_ = other.hostStatuses_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureHostStatusesIsMutable();
            hostStatuses_.addAll(other.hostStatuses_);
          }
          onChanged();
        }
      } else {
        if (!other.hostStatuses_.isEmpty()) {
          if (hostStatusesBuilder_.isEmpty()) {
            hostStatusesBuilder_.dispose();
            hostStatusesBuilder_ = null;
            hostStatuses_ = other.hostStatuses_;
            bitField0_ = (bitField0_ & ~0x00000001);
            hostStatusesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHostStatusesFieldBuilder() : null;
          } else {
            hostStatusesBuilder_.addAllMessages(other.hostStatuses_);
          }
        }
      }
      if (other.hasLocalOriginSuccessRateEjectionThreshold()) {
        mergeLocalOriginSuccessRateEjectionThreshold(other.getLocalOriginSuccessRateEjectionThreshold());
      }
      if (other.hasCircuitBreakers()) {
        mergeCircuitBreakers(other.getCircuitBreakers());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.admin.v3.ClusterStatus parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.admin.v3.ClusterStatus) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * Name of the cluster.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Name of the cluster.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Name of the cluster.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the cluster.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the cluster.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private boolean addedViaApi_ ;
    /**
     * <pre>
     * Denotes whether this cluster was added via API or configured statically.
     * </pre>
     *
     * <code>bool added_via_api = 2;</code>
     * @return The addedViaApi.
     */
    @java.lang.Override
    public boolean getAddedViaApi() {
      return addedViaApi_;
    }
    /**
     * <pre>
     * Denotes whether this cluster was added via API or configured statically.
     * </pre>
     *
     * <code>bool added_via_api = 2;</code>
     * @param value The addedViaApi to set.
     * @return This builder for chaining.
     */
    public Builder setAddedViaApi(boolean value) {
      
      addedViaApi_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Denotes whether this cluster was added via API or configured statically.
     * </pre>
     *
     * <code>bool added_via_api = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearAddedViaApi() {
      
      addedViaApi_ = false;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.type.v3.Percent successRateEjectionThreshold_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> successRateEjectionThresholdBuilder_;
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     * @return Whether the successRateEjectionThreshold field is set.
     */
    public boolean hasSuccessRateEjectionThreshold() {
      return successRateEjectionThresholdBuilder_ != null || successRateEjectionThreshold_ != null;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     * @return The successRateEjectionThreshold.
     */
    public io.envoyproxy.envoy.type.v3.Percent getSuccessRateEjectionThreshold() {
      if (successRateEjectionThresholdBuilder_ == null) {
        return successRateEjectionThreshold_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : successRateEjectionThreshold_;
      } else {
        return successRateEjectionThresholdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    public Builder setSuccessRateEjectionThreshold(io.envoyproxy.envoy.type.v3.Percent value) {
      if (successRateEjectionThresholdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        successRateEjectionThreshold_ = value;
        onChanged();
      } else {
        successRateEjectionThresholdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    public Builder setSuccessRateEjectionThreshold(
        io.envoyproxy.envoy.type.v3.Percent.Builder builderForValue) {
      if (successRateEjectionThresholdBuilder_ == null) {
        successRateEjectionThreshold_ = builderForValue.build();
        onChanged();
      } else {
        successRateEjectionThresholdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    public Builder mergeSuccessRateEjectionThreshold(io.envoyproxy.envoy.type.v3.Percent value) {
      if (successRateEjectionThresholdBuilder_ == null) {
        if (successRateEjectionThreshold_ != null) {
          successRateEjectionThreshold_ =
            io.envoyproxy.envoy.type.v3.Percent.newBuilder(successRateEjectionThreshold_).mergeFrom(value).buildPartial();
        } else {
          successRateEjectionThreshold_ = value;
        }
        onChanged();
      } else {
        successRateEjectionThresholdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    public Builder clearSuccessRateEjectionThreshold() {
      if (successRateEjectionThresholdBuilder_ == null) {
        successRateEjectionThreshold_ = null;
        onChanged();
      } else {
        successRateEjectionThreshold_ = null;
        successRateEjectionThresholdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.Percent.Builder getSuccessRateEjectionThresholdBuilder() {
      
      onChanged();
      return getSuccessRateEjectionThresholdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    public io.envoyproxy.envoy.type.v3.PercentOrBuilder getSuccessRateEjectionThresholdOrBuilder() {
      if (successRateEjectionThresholdBuilder_ != null) {
        return successRateEjectionThresholdBuilder_.getMessageOrBuilder();
      } else {
        return successRateEjectionThreshold_ == null ?
            io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : successRateEjectionThreshold_;
      }
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *false*, all errors: externally and locally generated were used to calculate the threshold.
     * If
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*, only externally generated errors were used to calculate the threshold.
     * The threshold is used to eject hosts based on their success rate. See
     * :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent success_rate_ejection_threshold = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> 
        getSuccessRateEjectionThresholdFieldBuilder() {
      if (successRateEjectionThresholdBuilder_ == null) {
        successRateEjectionThresholdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder>(
                getSuccessRateEjectionThreshold(),
                getParentForChildren(),
                isClean());
        successRateEjectionThreshold_ = null;
      }
      return successRateEjectionThresholdBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.admin.v3.HostStatus> hostStatuses_ =
      java.util.Collections.emptyList();
    private void ensureHostStatusesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        hostStatuses_ = new java.util.ArrayList<io.envoyproxy.envoy.admin.v3.HostStatus>(hostStatuses_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.admin.v3.HostStatus, io.envoyproxy.envoy.admin.v3.HostStatus.Builder, io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder> hostStatusesBuilder_;

    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public java.util.List<io.envoyproxy.envoy.admin.v3.HostStatus> getHostStatusesList() {
      if (hostStatusesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(hostStatuses_);
      } else {
        return hostStatusesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public int getHostStatusesCount() {
      if (hostStatusesBuilder_ == null) {
        return hostStatuses_.size();
      } else {
        return hostStatusesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public io.envoyproxy.envoy.admin.v3.HostStatus getHostStatuses(int index) {
      if (hostStatusesBuilder_ == null) {
        return hostStatuses_.get(index);
      } else {
        return hostStatusesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder setHostStatuses(
        int index, io.envoyproxy.envoy.admin.v3.HostStatus value) {
      if (hostStatusesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostStatusesIsMutable();
        hostStatuses_.set(index, value);
        onChanged();
      } else {
        hostStatusesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder setHostStatuses(
        int index, io.envoyproxy.envoy.admin.v3.HostStatus.Builder builderForValue) {
      if (hostStatusesBuilder_ == null) {
        ensureHostStatusesIsMutable();
        hostStatuses_.set(index, builderForValue.build());
        onChanged();
      } else {
        hostStatusesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder addHostStatuses(io.envoyproxy.envoy.admin.v3.HostStatus value) {
      if (hostStatusesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostStatusesIsMutable();
        hostStatuses_.add(value);
        onChanged();
      } else {
        hostStatusesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder addHostStatuses(
        int index, io.envoyproxy.envoy.admin.v3.HostStatus value) {
      if (hostStatusesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHostStatusesIsMutable();
        hostStatuses_.add(index, value);
        onChanged();
      } else {
        hostStatusesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder addHostStatuses(
        io.envoyproxy.envoy.admin.v3.HostStatus.Builder builderForValue) {
      if (hostStatusesBuilder_ == null) {
        ensureHostStatusesIsMutable();
        hostStatuses_.add(builderForValue.build());
        onChanged();
      } else {
        hostStatusesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder addHostStatuses(
        int index, io.envoyproxy.envoy.admin.v3.HostStatus.Builder builderForValue) {
      if (hostStatusesBuilder_ == null) {
        ensureHostStatusesIsMutable();
        hostStatuses_.add(index, builderForValue.build());
        onChanged();
      } else {
        hostStatusesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder addAllHostStatuses(
        java.lang.Iterable<? extends io.envoyproxy.envoy.admin.v3.HostStatus> values) {
      if (hostStatusesBuilder_ == null) {
        ensureHostStatusesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hostStatuses_);
        onChanged();
      } else {
        hostStatusesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder clearHostStatuses() {
      if (hostStatusesBuilder_ == null) {
        hostStatuses_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        hostStatusesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public Builder removeHostStatuses(int index) {
      if (hostStatusesBuilder_ == null) {
        ensureHostStatusesIsMutable();
        hostStatuses_.remove(index);
        onChanged();
      } else {
        hostStatusesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public io.envoyproxy.envoy.admin.v3.HostStatus.Builder getHostStatusesBuilder(
        int index) {
      return getHostStatusesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder getHostStatusesOrBuilder(
        int index) {
      if (hostStatusesBuilder_ == null) {
        return hostStatuses_.get(index);  } else {
        return hostStatusesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder> 
         getHostStatusesOrBuilderList() {
      if (hostStatusesBuilder_ != null) {
        return hostStatusesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(hostStatuses_);
      }
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public io.envoyproxy.envoy.admin.v3.HostStatus.Builder addHostStatusesBuilder() {
      return getHostStatusesFieldBuilder().addBuilder(
          io.envoyproxy.envoy.admin.v3.HostStatus.getDefaultInstance());
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public io.envoyproxy.envoy.admin.v3.HostStatus.Builder addHostStatusesBuilder(
        int index) {
      return getHostStatusesFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.admin.v3.HostStatus.getDefaultInstance());
    }
    /**
     * <pre>
     * Mapping from host address to the host's current status.
     * </pre>
     *
     * <code>repeated .envoy.admin.v3.HostStatus host_statuses = 4;</code>
     */
    public java.util.List<io.envoyproxy.envoy.admin.v3.HostStatus.Builder> 
         getHostStatusesBuilderList() {
      return getHostStatusesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.admin.v3.HostStatus, io.envoyproxy.envoy.admin.v3.HostStatus.Builder, io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder> 
        getHostStatusesFieldBuilder() {
      if (hostStatusesBuilder_ == null) {
        hostStatusesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.admin.v3.HostStatus, io.envoyproxy.envoy.admin.v3.HostStatus.Builder, io.envoyproxy.envoy.admin.v3.HostStatusOrBuilder>(
                hostStatuses_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        hostStatuses_ = null;
      }
      return hostStatusesBuilder_;
    }

    private io.envoyproxy.envoy.type.v3.Percent localOriginSuccessRateEjectionThreshold_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> localOriginSuccessRateEjectionThresholdBuilder_;
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     * @return Whether the localOriginSuccessRateEjectionThreshold field is set.
     */
    public boolean hasLocalOriginSuccessRateEjectionThreshold() {
      return localOriginSuccessRateEjectionThresholdBuilder_ != null || localOriginSuccessRateEjectionThreshold_ != null;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     * @return The localOriginSuccessRateEjectionThreshold.
     */
    public io.envoyproxy.envoy.type.v3.Percent getLocalOriginSuccessRateEjectionThreshold() {
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        return localOriginSuccessRateEjectionThreshold_ == null ? io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : localOriginSuccessRateEjectionThreshold_;
      } else {
        return localOriginSuccessRateEjectionThresholdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    public Builder setLocalOriginSuccessRateEjectionThreshold(io.envoyproxy.envoy.type.v3.Percent value) {
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        localOriginSuccessRateEjectionThreshold_ = value;
        onChanged();
      } else {
        localOriginSuccessRateEjectionThresholdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    public Builder setLocalOriginSuccessRateEjectionThreshold(
        io.envoyproxy.envoy.type.v3.Percent.Builder builderForValue) {
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        localOriginSuccessRateEjectionThreshold_ = builderForValue.build();
        onChanged();
      } else {
        localOriginSuccessRateEjectionThresholdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    public Builder mergeLocalOriginSuccessRateEjectionThreshold(io.envoyproxy.envoy.type.v3.Percent value) {
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        if (localOriginSuccessRateEjectionThreshold_ != null) {
          localOriginSuccessRateEjectionThreshold_ =
            io.envoyproxy.envoy.type.v3.Percent.newBuilder(localOriginSuccessRateEjectionThreshold_).mergeFrom(value).buildPartial();
        } else {
          localOriginSuccessRateEjectionThreshold_ = value;
        }
        onChanged();
      } else {
        localOriginSuccessRateEjectionThresholdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    public Builder clearLocalOriginSuccessRateEjectionThreshold() {
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        localOriginSuccessRateEjectionThreshold_ = null;
        onChanged();
      } else {
        localOriginSuccessRateEjectionThreshold_ = null;
        localOriginSuccessRateEjectionThresholdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    public io.envoyproxy.envoy.type.v3.Percent.Builder getLocalOriginSuccessRateEjectionThresholdBuilder() {
      
      onChanged();
      return getLocalOriginSuccessRateEjectionThresholdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    public io.envoyproxy.envoy.type.v3.PercentOrBuilder getLocalOriginSuccessRateEjectionThresholdOrBuilder() {
      if (localOriginSuccessRateEjectionThresholdBuilder_ != null) {
        return localOriginSuccessRateEjectionThresholdBuilder_.getMessageOrBuilder();
      } else {
        return localOriginSuccessRateEjectionThreshold_ == null ?
            io.envoyproxy.envoy.type.v3.Percent.getDefaultInstance() : localOriginSuccessRateEjectionThreshold_;
      }
    }
    /**
     * <pre>
     * The success rate threshold used in the last interval when only locally originated failures were
     * taken into account and externally originated errors were treated as success.
     * This field should be interpreted only when
     * :ref:`outlier_detection.split_external_local_origin_errors&lt;envoy_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors&gt;`
     * is *true*. The threshold is used to eject hosts based on their success rate.
     * See :ref:`Cluster outlier detection &lt;arch_overview_outlier_detection&gt;` documentation for
     * details.
     * Note: this field may be omitted in any of the three following cases:
     * 1. There were not enough hosts with enough request volume to proceed with success rate based
     *    outlier ejection.
     * 2. The threshold is computed to be &lt; 0 because a negative value implies that there was no
     *    threshold for that interval.
     * 3. Outlier detection is not enabled for this cluster.
     * </pre>
     *
     * <code>.envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder> 
        getLocalOriginSuccessRateEjectionThresholdFieldBuilder() {
      if (localOriginSuccessRateEjectionThresholdBuilder_ == null) {
        localOriginSuccessRateEjectionThresholdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.type.v3.Percent, io.envoyproxy.envoy.type.v3.Percent.Builder, io.envoyproxy.envoy.type.v3.PercentOrBuilder>(
                getLocalOriginSuccessRateEjectionThreshold(),
                getParentForChildren(),
                isClean());
        localOriginSuccessRateEjectionThreshold_ = null;
      }
      return localOriginSuccessRateEjectionThresholdBuilder_;
    }

    private io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers circuitBreakers_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers, io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.Builder, io.envoyproxy.envoy.config.cluster.v3.CircuitBreakersOrBuilder> circuitBreakersBuilder_;
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     * @return Whether the circuitBreakers field is set.
     */
    public boolean hasCircuitBreakers() {
      return circuitBreakersBuilder_ != null || circuitBreakers_ != null;
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     * @return The circuitBreakers.
     */
    public io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers getCircuitBreakers() {
      if (circuitBreakersBuilder_ == null) {
        return circuitBreakers_ == null ? io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.getDefaultInstance() : circuitBreakers_;
      } else {
        return circuitBreakersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    public Builder setCircuitBreakers(io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers value) {
      if (circuitBreakersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        circuitBreakers_ = value;
        onChanged();
      } else {
        circuitBreakersBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    public Builder setCircuitBreakers(
        io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.Builder builderForValue) {
      if (circuitBreakersBuilder_ == null) {
        circuitBreakers_ = builderForValue.build();
        onChanged();
      } else {
        circuitBreakersBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    public Builder mergeCircuitBreakers(io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers value) {
      if (circuitBreakersBuilder_ == null) {
        if (circuitBreakers_ != null) {
          circuitBreakers_ =
            io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.newBuilder(circuitBreakers_).mergeFrom(value).buildPartial();
        } else {
          circuitBreakers_ = value;
        }
        onChanged();
      } else {
        circuitBreakersBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    public Builder clearCircuitBreakers() {
      if (circuitBreakersBuilder_ == null) {
        circuitBreakers_ = null;
        onChanged();
      } else {
        circuitBreakers_ = null;
        circuitBreakersBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    public io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.Builder getCircuitBreakersBuilder() {
      
      onChanged();
      return getCircuitBreakersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    public io.envoyproxy.envoy.config.cluster.v3.CircuitBreakersOrBuilder getCircuitBreakersOrBuilder() {
      if (circuitBreakersBuilder_ != null) {
        return circuitBreakersBuilder_.getMessageOrBuilder();
      } else {
        return circuitBreakers_ == null ?
            io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.getDefaultInstance() : circuitBreakers_;
      }
    }
    /**
     * <pre>
     * :ref:`Circuit breaking &lt;arch_overview_circuit_break&gt;` settings of the cluster.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers, io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.Builder, io.envoyproxy.envoy.config.cluster.v3.CircuitBreakersOrBuilder> 
        getCircuitBreakersFieldBuilder() {
      if (circuitBreakersBuilder_ == null) {
        circuitBreakersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers, io.envoyproxy.envoy.config.cluster.v3.CircuitBreakers.Builder, io.envoyproxy.envoy.config.cluster.v3.CircuitBreakersOrBuilder>(
                getCircuitBreakers(),
                getParentForChildren(),
                isClean());
        circuitBreakers_ = null;
      }
      return circuitBreakersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.admin.v3.ClusterStatus)
  }

  // @@protoc_insertion_point(class_scope:envoy.admin.v3.ClusterStatus)
  private static final io.envoyproxy.envoy.admin.v3.ClusterStatus DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.admin.v3.ClusterStatus();
  }

  public static io.envoyproxy.envoy.admin.v3.ClusterStatus getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ClusterStatus>
      PARSER = new com.google.protobuf.AbstractParser<ClusterStatus>() {
    @java.lang.Override
    public ClusterStatus parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ClusterStatus(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ClusterStatus> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ClusterStatus> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.admin.v3.ClusterStatus getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

