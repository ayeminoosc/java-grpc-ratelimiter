// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace.proto

package io.opencensus.proto.trace.v1;

public interface SpanOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A unique identifier for a trace. All spans from the same trace share
   * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
   * is considered invalid.
   * This field is semantically required. Receiver should generate new
   * random trace_id if empty or invalid trace_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes trace_id = 1;</code>
   * @return The traceId.
   */
  com.google.protobuf.ByteString getTraceId();

  /**
   * <pre>
   * A unique identifier for a span within a trace, assigned when the span
   * is created. The ID is an 8-byte array. An ID with all zeroes is considered
   * invalid.
   * This field is semantically required. Receiver should generate new
   * random span_id if empty or invalid span_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes span_id = 2;</code>
   * @return The spanId.
   */
  com.google.protobuf.ByteString getSpanId();

  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   * @return Whether the tracestate field is set.
   */
  boolean hasTracestate();
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   * @return The tracestate.
   */
  io.opencensus.proto.trace.v1.Span.Tracestate getTracestate();
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   */
  io.opencensus.proto.trace.v1.Span.TracestateOrBuilder getTracestateOrBuilder();

  /**
   * <pre>
   * The `span_id` of this span's parent span. If this is a root span, then this
   * field must be empty. The ID is an 8-byte array.
   * </pre>
   *
   * <code>bytes parent_span_id = 3;</code>
   * @return The parentSpanId.
   */
  com.google.protobuf.ByteString getParentSpanId();

  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   * @return The name.
   */
  io.opencensus.proto.trace.v1.TruncatableString getName();
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   */
  io.opencensus.proto.trace.v1.TruncatableStringOrBuilder getNameOrBuilder();

  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   * @return The enum numeric value on the wire for kind.
   */
  int getKindValue();
  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   * @return The kind.
   */
  io.opencensus.proto.trace.v1.Span.SpanKind getKind();

  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   * @return Whether the startTime field is set.
   */
  boolean hasStartTime();
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   * @return The startTime.
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   * @return Whether the endTime field is set.
   */
  boolean hasEndTime();
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   * @return The endTime.
   */
  com.google.protobuf.Timestamp getEndTime();
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   * @return Whether the attributes field is set.
   */
  boolean hasAttributes();
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   * @return The attributes.
   */
  io.opencensus.proto.trace.v1.Span.Attributes getAttributes();
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   */
  io.opencensus.proto.trace.v1.Span.AttributesOrBuilder getAttributesOrBuilder();

  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   * @return Whether the stackTrace field is set.
   */
  boolean hasStackTrace();
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   * @return The stackTrace.
   */
  io.opencensus.proto.trace.v1.StackTrace getStackTrace();
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   */
  io.opencensus.proto.trace.v1.StackTraceOrBuilder getStackTraceOrBuilder();

  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   * @return Whether the timeEvents field is set.
   */
  boolean hasTimeEvents();
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   * @return The timeEvents.
   */
  io.opencensus.proto.trace.v1.Span.TimeEvents getTimeEvents();
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   */
  io.opencensus.proto.trace.v1.Span.TimeEventsOrBuilder getTimeEventsOrBuilder();

  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   * @return Whether the links field is set.
   */
  boolean hasLinks();
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   * @return The links.
   */
  io.opencensus.proto.trace.v1.Span.Links getLinks();
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   */
  io.opencensus.proto.trace.v1.Span.LinksOrBuilder getLinksOrBuilder();

  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   * @return The status.
   */
  io.opencensus.proto.trace.v1.Status getStatus();
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   */
  io.opencensus.proto.trace.v1.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   * @return Whether the resource field is set.
   */
  boolean hasResource();
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   * @return The resource.
   */
  io.opencensus.proto.resource.v1.Resource getResource();
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   */
  io.opencensus.proto.resource.v1.ResourceOrBuilder getResourceOrBuilder();

  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   * @return Whether the sameProcessAsParentSpan field is set.
   */
  boolean hasSameProcessAsParentSpan();
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   * @return The sameProcessAsParentSpan.
   */
  com.google.protobuf.BoolValue getSameProcessAsParentSpan();
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   */
  com.google.protobuf.BoolValueOrBuilder getSameProcessAsParentSpanOrBuilder();

  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   * @return Whether the childSpanCount field is set.
   */
  boolean hasChildSpanCount();
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   * @return The childSpanCount.
   */
  com.google.protobuf.UInt32Value getChildSpanCount();
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getChildSpanCountOrBuilder();
}
