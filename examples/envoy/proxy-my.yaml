admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  clusters:
    - name: java-ratelimit
      type: STRICT_DNS
      connect_timeout: 1s
      lb_policy: ROUND_ROBIN
      protocol_selection: USE_CONFIGURED_PROTOCOL
      http2_protocol_options: { }
      load_assignment:
        cluster_name: java-ratelimit
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 8082
    - name: mock
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: mock
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: envoy-mock
                      port_value: 9999

    - name: service_envoyproxy_io
      connect_timeout: 30s
      type: LOGICAL_DNS
      # Comment out the following line to test on v6 networks
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: service_envoyproxy_io
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: www.envoyproxy.io
                      port_value: 443
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: www.envoyproxy.io

  listeners:
    - name: listener_0
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: 8887
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: [ "*" ]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            host_rewrite_literal: www.envoyproxy.io
                            cluster: service_envoyproxy_io
                http_filters:
                  - name: envoy.filters.http.router

    - name: listener_1
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8889
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress
                http_filters:
                  - name: envoy.filters.http.ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                      domain: rl
                      request_type: external
                      stage: 0
                      rate_limited_as_resource_exhausted: true
                      failure_mode_deny: false
                      rate_limit_service:
                        grpc_service:
                          envoy_grpc:
                            cluster_name: java-ratelimit
                        transport_api_version: V3
                  - name: envoy.filters.http.router
                    typed_config: {}
                route_config:
                  name: route
                  virtual_hosts:
                    - name: backend
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: /test
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - source_cluster: {} # This action's value is populated by the "service-cluster" arg passed in when starting Envoy. In this example, it's "proxy" (see docker-compose-example.yml)
                                  - destination_cluster: {} # This action's value is populated by the value set in the above egress "cluster" field -- "mock"
                        - match:
                            prefix: /header
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - request_headers:
                                      header_name: "foo"
                                      descriptor_key: "foo"
                        - match:
                            prefix: /twoheader
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - request_headers:
                                      header_name: "foo"
                                      descriptor_key: "foo"
                                  - request_headers:
                                      header_name: "bar"
                                      descriptor_key: "bar"
                              - actions:
                                  - request_headers:
                                      header_name: "foo"
                                      descriptor_key: "foo"
                                  - request_headers:
                                      header_name: "baz"
                                      descriptor_key: "baz"