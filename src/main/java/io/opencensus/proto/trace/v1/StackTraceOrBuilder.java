// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace.proto

package io.opencensus.proto.trace.v1;

public interface StackTraceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.StackTrace)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   * @return Whether the stackFrames field is set.
   */
  boolean hasStackFrames();
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   * @return The stackFrames.
   */
  io.opencensus.proto.trace.v1.StackTrace.StackFrames getStackFrames();
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   */
  io.opencensus.proto.trace.v1.StackTrace.StackFramesOrBuilder getStackFramesOrBuilder();

  /**
   * <pre>
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both
   * `stack_frames` and a value in `stack_trace_hash_id`.
   * Subsequent spans within the same request can refer
   * to that stack trace by setting only `stack_trace_hash_id`.
   * TODO: describe how to deal with the case where stack_trace_hash_id is
   * zero because it was not set.
   * </pre>
   *
   * <code>uint64 stack_trace_hash_id = 2;</code>
   * @return The stackTraceHashId.
   */
  long getStackTraceHashId();
}
