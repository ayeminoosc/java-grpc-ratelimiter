// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/stats/v1/stats.proto

package io.opencensus.proto.stats.v1;

public interface DistributionAggregationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencensus.proto.stats.v1.DistributionAggregation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A Distribution may optionally contain a histogram of the values in the
   * population. The bucket boundaries for that histogram are described by
   * `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
   * buckets. The boundaries for bucket index i are:
   * (-infinity, bucket_bounds[i]) for i == 0
   * [bucket_bounds[i-1], bucket_bounds[i]) for 0 &lt; i &lt; N-2
   * [bucket_bounds[i-1], +infinity) for i == N-1
   * i.e. an underflow bucket (number 0), zero or more finite buckets (1
   * through N - 2, and an overflow bucket (N - 1), with inclusive lower
   * bounds and exclusive upper bounds.
   * If `bucket_bounds` has no elements (zero size), then there is no
   * histogram associated with the Distribution. If `bucket_bounds` has only
   * one element, there are no finite buckets, and that single element is the
   * common boundary of the overflow and underflow buckets. The values must
   * be monotonically increasing.
   * </pre>
   *
   * <code>repeated double bucket_bounds = 1;</code>
   * @return A list containing the bucketBounds.
   */
  java.util.List<java.lang.Double> getBucketBoundsList();
  /**
   * <pre>
   * A Distribution may optionally contain a histogram of the values in the
   * population. The bucket boundaries for that histogram are described by
   * `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
   * buckets. The boundaries for bucket index i are:
   * (-infinity, bucket_bounds[i]) for i == 0
   * [bucket_bounds[i-1], bucket_bounds[i]) for 0 &lt; i &lt; N-2
   * [bucket_bounds[i-1], +infinity) for i == N-1
   * i.e. an underflow bucket (number 0), zero or more finite buckets (1
   * through N - 2, and an overflow bucket (N - 1), with inclusive lower
   * bounds and exclusive upper bounds.
   * If `bucket_bounds` has no elements (zero size), then there is no
   * histogram associated with the Distribution. If `bucket_bounds` has only
   * one element, there are no finite buckets, and that single element is the
   * common boundary of the overflow and underflow buckets. The values must
   * be monotonically increasing.
   * </pre>
   *
   * <code>repeated double bucket_bounds = 1;</code>
   * @return The count of bucketBounds.
   */
  int getBucketBoundsCount();
  /**
   * <pre>
   * A Distribution may optionally contain a histogram of the values in the
   * population. The bucket boundaries for that histogram are described by
   * `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
   * buckets. The boundaries for bucket index i are:
   * (-infinity, bucket_bounds[i]) for i == 0
   * [bucket_bounds[i-1], bucket_bounds[i]) for 0 &lt; i &lt; N-2
   * [bucket_bounds[i-1], +infinity) for i == N-1
   * i.e. an underflow bucket (number 0), zero or more finite buckets (1
   * through N - 2, and an overflow bucket (N - 1), with inclusive lower
   * bounds and exclusive upper bounds.
   * If `bucket_bounds` has no elements (zero size), then there is no
   * histogram associated with the Distribution. If `bucket_bounds` has only
   * one element, there are no finite buckets, and that single element is the
   * common boundary of the overflow and underflow buckets. The values must
   * be monotonically increasing.
   * </pre>
   *
   * <code>repeated double bucket_bounds = 1;</code>
   * @param index The index of the element to return.
   * @return The bucketBounds at the given index.
   */
  double getBucketBounds(int index);
}
