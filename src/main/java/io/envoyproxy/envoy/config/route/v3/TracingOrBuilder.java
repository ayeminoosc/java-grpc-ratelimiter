// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/route/v3/route_components.proto

package io.envoyproxy.envoy.config.route.v3;

public interface TracingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.route.v3.Tracing)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
   * &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
   * @return Whether the clientSampling field is set.
   */
  boolean hasClientSampling();
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
   * &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
   * @return The clientSampling.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getClientSampling();
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be force
   * traced if the :ref:`x-client-trace-id &lt;config_http_conn_man_headers_x-client-trace-id&gt;`
   * header is set. This field is a direct analog for the runtime variable
   * 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
   * &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent client_sampling = 1;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getClientSamplingOrBuilder();

  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
   * @return Whether the randomSampling field is set.
   */
  boolean hasRandomSampling();
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
   * @return The randomSampling.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getRandomSampling();
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be randomly
   * selected for trace generation, if not requested by the client or not forced. This field is
   * a direct analog for the runtime variable 'tracing.random_sampling' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent random_sampling = 2;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getRandomSamplingOrBuilder();

  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
   * @return Whether the overallSampling field is set.
   */
  boolean hasOverallSampling();
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
   * @return The overallSampling.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getOverallSampling();
  /**
   * <pre>
   * Target percentage of requests managed by this HTTP connection manager that will be traced
   * after all other sampling checks have been applied (client-directed, force tracing, random
   * sampling). This field functions as an upper limit on the total configured sampling rate. For
   * instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
   * of client requests with the appropriate headers to be force traced. This field is a direct
   * analog for the runtime variable 'tracing.global_enabled' in the
   * :ref:`HTTP Connection Manager &lt;config_http_conn_man_runtime&gt;`.
   * Default: 100%
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent overall_sampling = 3;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getOverallSamplingOrBuilder();

  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  java.util.List<io.envoyproxy.envoy.type.tracing.v3.CustomTag> 
      getCustomTagsList();
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  io.envoyproxy.envoy.type.tracing.v3.CustomTag getCustomTags(int index);
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  int getCustomTagsCount();
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder> 
      getCustomTagsOrBuilderList();
  /**
   * <pre>
   * A list of custom tags with unique tag name to create tags for the active span.
   * It will take effect after merging with the :ref:`corresponding configuration
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags&gt;`
   * configured in the HTTP connection manager. If two tags with the same name are configured
   * each in the HTTP connection manager and the route level, the one configured here takes
   * priority.
   * </pre>
   *
   * <code>repeated .envoy.type.tracing.v3.CustomTag custom_tags = 4;</code>
   */
  io.envoyproxy.envoy.type.tracing.v3.CustomTagOrBuilder getCustomTagsOrBuilder(
      int index);
}
