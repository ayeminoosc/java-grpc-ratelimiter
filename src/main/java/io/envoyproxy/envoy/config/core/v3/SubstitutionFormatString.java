// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/substitution_format_string.proto

package io.envoyproxy.envoy.config.core.v3;

/**
 * <pre>
 * Configuration to use multiple :ref:`command operators &lt;config_access_log_command_operators&gt;`
 * to generate a new string in either plain text or JSON format.
 * [#next-free-field: 6]
 * </pre>
 *
 * Protobuf type {@code envoy.config.core.v3.SubstitutionFormatString}
 */
public final class SubstitutionFormatString extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.core.v3.SubstitutionFormatString)
    SubstitutionFormatStringOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SubstitutionFormatString.newBuilder() to construct.
  private SubstitutionFormatString(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SubstitutionFormatString() {
    contentType_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SubstitutionFormatString();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SubstitutionFormatString(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            formatCase_ = 1;
            format_ = s;
            break;
          }
          case 18: {
            com.google.protobuf.Struct.Builder subBuilder = null;
            if (formatCase_ == 2) {
              subBuilder = ((com.google.protobuf.Struct) format_).toBuilder();
            }
            format_ =
                input.readMessage(com.google.protobuf.Struct.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.google.protobuf.Struct) format_);
              format_ = subBuilder.buildPartial();
            }
            formatCase_ = 2;
            break;
          }
          case 24: {

            omitEmptyValues_ = input.readBool();
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            contentType_ = s;
            break;
          }
          case 42: {
            io.envoyproxy.envoy.config.core.v3.DataSource.Builder subBuilder = null;
            if (formatCase_ == 5) {
              subBuilder = ((io.envoyproxy.envoy.config.core.v3.DataSource) format_).toBuilder();
            }
            format_ =
                input.readMessage(io.envoyproxy.envoy.config.core.v3.DataSource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.config.core.v3.DataSource) format_);
              format_ = subBuilder.buildPartial();
            }
            formatCase_ = 5;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringProto.internal_static_envoy_config_core_v3_SubstitutionFormatString_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringProto.internal_static_envoy_config_core_v3_SubstitutionFormatString_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.class, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder.class);
  }

  private int formatCase_ = 0;
  private java.lang.Object format_;
  public enum FormatCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    @java.lang.Deprecated TEXT_FORMAT(1),
    JSON_FORMAT(2),
    TEXT_FORMAT_SOURCE(5),
    FORMAT_NOT_SET(0);
    private final int value;
    private FormatCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FormatCase valueOf(int value) {
      return forNumber(value);
    }

    public static FormatCase forNumber(int value) {
      switch (value) {
        case 1: return TEXT_FORMAT;
        case 2: return JSON_FORMAT;
        case 5: return TEXT_FORMAT_SOURCE;
        case 0: return FORMAT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public FormatCase
  getFormatCase() {
    return FormatCase.forNumber(
        formatCase_);
  }

  public static final int TEXT_FORMAT_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Specify a format with command operators to form a text string.
   * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
   * For example, setting ``text_format`` like below,
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * generates plain text similar to:
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
   * </pre>
   *
   * <code>string text_format = 1 [deprecated = true];</code>
   * @return Whether the textFormat field is set.
   */
  @java.lang.Deprecated public boolean hasTextFormat() {
    return formatCase_ == 1;
  }
  /**
   * <pre>
   * Specify a format with command operators to form a text string.
   * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
   * For example, setting ``text_format`` like below,
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * generates plain text similar to:
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
   * </pre>
   *
   * <code>string text_format = 1 [deprecated = true];</code>
   * @return The textFormat.
   */
  @java.lang.Deprecated public java.lang.String getTextFormat() {
    java.lang.Object ref = "";
    if (formatCase_ == 1) {
      ref = format_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (formatCase_ == 1) {
        format_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Specify a format with command operators to form a text string.
   * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
   * For example, setting ``text_format`` like below,
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * generates plain text similar to:
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
   * </pre>
   *
   * <code>string text_format = 1 [deprecated = true];</code>
   * @return The bytes for textFormat.
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getTextFormatBytes() {
    java.lang.Object ref = "";
    if (formatCase_ == 1) {
      ref = format_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (formatCase_ == 1) {
        format_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int JSON_FORMAT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Specify a format with command operators to form a JSON string.
   * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
   * Values are rendered as strings, numbers, or boolean values as appropriate.
   * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
   * See the documentation for a specific command operator for details.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   * The following JSON object would be created:
   * .. code-block:: json
   *  {
   *    "status": 500,
   *    "message": "My error message"
   *  }
   * </pre>
   *
   * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the jsonFormat field is set.
   */
  @java.lang.Override
  public boolean hasJsonFormat() {
    return formatCase_ == 2;
  }
  /**
   * <pre>
   * Specify a format with command operators to form a JSON string.
   * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
   * Values are rendered as strings, numbers, or boolean values as appropriate.
   * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
   * See the documentation for a specific command operator for details.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   * The following JSON object would be created:
   * .. code-block:: json
   *  {
   *    "status": 500,
   *    "message": "My error message"
   *  }
   * </pre>
   *
   * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
   * @return The jsonFormat.
   */
  @java.lang.Override
  public com.google.protobuf.Struct getJsonFormat() {
    if (formatCase_ == 2) {
       return (com.google.protobuf.Struct) format_;
    }
    return com.google.protobuf.Struct.getDefaultInstance();
  }
  /**
   * <pre>
   * Specify a format with command operators to form a JSON string.
   * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
   * Values are rendered as strings, numbers, or boolean values as appropriate.
   * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
   * See the documentation for a specific command operator for details.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   * The following JSON object would be created:
   * .. code-block:: json
   *  {
   *    "status": 500,
   *    "message": "My error message"
   *  }
   * </pre>
   *
   * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.StructOrBuilder getJsonFormatOrBuilder() {
    if (formatCase_ == 2) {
       return (com.google.protobuf.Struct) format_;
    }
    return com.google.protobuf.Struct.getDefaultInstance();
  }

  public static final int TEXT_FORMAT_SOURCE_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Specify a format with command operators to form a text string.
   * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
   * For example, setting ``text_format`` like below,
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format_source:
   *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * generates plain text similar to:
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
   * @return Whether the textFormatSource field is set.
   */
  @java.lang.Override
  public boolean hasTextFormatSource() {
    return formatCase_ == 5;
  }
  /**
   * <pre>
   * Specify a format with command operators to form a text string.
   * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
   * For example, setting ``text_format`` like below,
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format_source:
   *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * generates plain text similar to:
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
   * @return The textFormatSource.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSource getTextFormatSource() {
    if (formatCase_ == 5) {
       return (io.envoyproxy.envoy.config.core.v3.DataSource) format_;
    }
    return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
  }
  /**
   * <pre>
   * Specify a format with command operators to form a text string.
   * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
   * For example, setting ``text_format`` like below,
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format_source:
   *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * generates plain text similar to:
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getTextFormatSourceOrBuilder() {
    if (formatCase_ == 5) {
       return (io.envoyproxy.envoy.config.core.v3.DataSource) format_;
    }
    return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
  }

  public static final int OMIT_EMPTY_VALUES_FIELD_NUMBER = 3;
  private boolean omitEmptyValues_;
  /**
   * <pre>
   * If set to true, when command operators are evaluated to null,
   * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
   *   empty string, so that empty values are omitted entirely.
   * * for ``json_format`` the keys with null values are omitted in the output structure.
   * </pre>
   *
   * <code>bool omit_empty_values = 3;</code>
   * @return The omitEmptyValues.
   */
  @java.lang.Override
  public boolean getOmitEmptyValues() {
    return omitEmptyValues_;
  }

  public static final int CONTENT_TYPE_FIELD_NUMBER = 4;
  private volatile java.lang.Object contentType_;
  /**
   * <pre>
   * Specify a *content_type* field.
   * If this field is not set then ``text/plain`` is used for *text_format* and
   * ``application/json`` is used for *json_format*.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   content_type: "text/html; charset=UTF-8"
   * </pre>
   *
   * <code>string content_type = 4;</code>
   * @return The contentType.
   */
  @java.lang.Override
  public java.lang.String getContentType() {
    java.lang.Object ref = contentType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      contentType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specify a *content_type* field.
   * If this field is not set then ``text/plain`` is used for *text_format* and
   * ``application/json`` is used for *json_format*.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   content_type: "text/html; charset=UTF-8"
   * </pre>
   *
   * <code>string content_type = 4;</code>
   * @return The bytes for contentType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getContentTypeBytes() {
    java.lang.Object ref = contentType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      contentType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (formatCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, format_);
    }
    if (formatCase_ == 2) {
      output.writeMessage(2, (com.google.protobuf.Struct) format_);
    }
    if (omitEmptyValues_ != false) {
      output.writeBool(3, omitEmptyValues_);
    }
    if (!getContentTypeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, contentType_);
    }
    if (formatCase_ == 5) {
      output.writeMessage(5, (io.envoyproxy.envoy.config.core.v3.DataSource) format_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (formatCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, format_);
    }
    if (formatCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.google.protobuf.Struct) format_);
    }
    if (omitEmptyValues_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, omitEmptyValues_);
    }
    if (!getContentTypeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, contentType_);
    }
    if (formatCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (io.envoyproxy.envoy.config.core.v3.DataSource) format_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString other = (io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString) obj;

    if (getOmitEmptyValues()
        != other.getOmitEmptyValues()) return false;
    if (!getContentType()
        .equals(other.getContentType())) return false;
    if (!getFormatCase().equals(other.getFormatCase())) return false;
    switch (formatCase_) {
      case 1:
        if (!getTextFormat()
            .equals(other.getTextFormat())) return false;
        break;
      case 2:
        if (!getJsonFormat()
            .equals(other.getJsonFormat())) return false;
        break;
      case 5:
        if (!getTextFormatSource()
            .equals(other.getTextFormatSource())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + OMIT_EMPTY_VALUES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getOmitEmptyValues());
    hash = (37 * hash) + CONTENT_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getContentType().hashCode();
    switch (formatCase_) {
      case 1:
        hash = (37 * hash) + TEXT_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getTextFormat().hashCode();
        break;
      case 2:
        hash = (37 * hash) + JSON_FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + getJsonFormat().hashCode();
        break;
      case 5:
        hash = (37 * hash) + TEXT_FORMAT_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getTextFormatSource().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration to use multiple :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * to generate a new string in either plain text or JSON format.
   * [#next-free-field: 6]
   * </pre>
   *
   * Protobuf type {@code envoy.config.core.v3.SubstitutionFormatString}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.core.v3.SubstitutionFormatString)
      io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringProto.internal_static_envoy_config_core_v3_SubstitutionFormatString_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringProto.internal_static_envoy_config_core_v3_SubstitutionFormatString_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.class, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      omitEmptyValues_ = false;

      contentType_ = "";

      formatCase_ = 0;
      format_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringProto.internal_static_envoy_config_core_v3_SubstitutionFormatString_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString build() {
      io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString buildPartial() {
      io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString result = new io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString(this);
      if (formatCase_ == 1) {
        result.format_ = format_;
      }
      if (formatCase_ == 2) {
        if (jsonFormatBuilder_ == null) {
          result.format_ = format_;
        } else {
          result.format_ = jsonFormatBuilder_.build();
        }
      }
      if (formatCase_ == 5) {
        if (textFormatSourceBuilder_ == null) {
          result.format_ = format_;
        } else {
          result.format_ = textFormatSourceBuilder_.build();
        }
      }
      result.omitEmptyValues_ = omitEmptyValues_;
      result.contentType_ = contentType_;
      result.formatCase_ = formatCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString) {
        return mergeFrom((io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString other) {
      if (other == io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.getDefaultInstance()) return this;
      if (other.getOmitEmptyValues() != false) {
        setOmitEmptyValues(other.getOmitEmptyValues());
      }
      if (!other.getContentType().isEmpty()) {
        contentType_ = other.contentType_;
        onChanged();
      }
      switch (other.getFormatCase()) {
        case TEXT_FORMAT: {
          formatCase_ = 1;
          format_ = other.format_;
          onChanged();
          break;
        }
        case JSON_FORMAT: {
          mergeJsonFormat(other.getJsonFormat());
          break;
        }
        case TEXT_FORMAT_SOURCE: {
          mergeTextFormatSource(other.getTextFormatSource());
          break;
        }
        case FORMAT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int formatCase_ = 0;
    private java.lang.Object format_;
    public FormatCase
        getFormatCase() {
      return FormatCase.forNumber(
          formatCase_);
    }

    public Builder clearFormat() {
      formatCase_ = 0;
      format_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
     * </pre>
     *
     * <code>string text_format = 1 [deprecated = true];</code>
     * @return Whether the textFormat field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasTextFormat() {
      return formatCase_ == 1;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
     * </pre>
     *
     * <code>string text_format = 1 [deprecated = true];</code>
     * @return The textFormat.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.lang.String getTextFormat() {
      java.lang.Object ref = "";
      if (formatCase_ == 1) {
        ref = format_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (formatCase_ == 1) {
          format_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
     * </pre>
     *
     * <code>string text_format = 1 [deprecated = true];</code>
     * @return The bytes for textFormat.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getTextFormatBytes() {
      java.lang.Object ref = "";
      if (formatCase_ == 1) {
        ref = format_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (formatCase_ == 1) {
          format_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
     * </pre>
     *
     * <code>string text_format = 1 [deprecated = true];</code>
     * @param value The textFormat to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setTextFormat(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  formatCase_ = 1;
      format_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
     * </pre>
     *
     * <code>string text_format = 1 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearTextFormat() {
      if (formatCase_ == 1) {
        formatCase_ = 0;
        format_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Deprecated in favor of :ref:`text_format_source &lt;envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source&gt;`. To migrate text format strings, use the :ref:`inline_string &lt;envoy_v3_api_field_config.core.v3.DataSource.inline_string&gt;` field.
     * </pre>
     *
     * <code>string text_format = 1 [deprecated = true];</code>
     * @param value The bytes for textFormat to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setTextFormatBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      formatCase_ = 1;
      format_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> jsonFormatBuilder_;
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the jsonFormat field is set.
     */
    @java.lang.Override
    public boolean hasJsonFormat() {
      return formatCase_ == 2;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     * @return The jsonFormat.
     */
    @java.lang.Override
    public com.google.protobuf.Struct getJsonFormat() {
      if (jsonFormatBuilder_ == null) {
        if (formatCase_ == 2) {
          return (com.google.protobuf.Struct) format_;
        }
        return com.google.protobuf.Struct.getDefaultInstance();
      } else {
        if (formatCase_ == 2) {
          return jsonFormatBuilder_.getMessage();
        }
        return com.google.protobuf.Struct.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setJsonFormat(com.google.protobuf.Struct value) {
      if (jsonFormatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        format_ = value;
        onChanged();
      } else {
        jsonFormatBuilder_.setMessage(value);
      }
      formatCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder setJsonFormat(
        com.google.protobuf.Struct.Builder builderForValue) {
      if (jsonFormatBuilder_ == null) {
        format_ = builderForValue.build();
        onChanged();
      } else {
        jsonFormatBuilder_.setMessage(builderForValue.build());
      }
      formatCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeJsonFormat(com.google.protobuf.Struct value) {
      if (jsonFormatBuilder_ == null) {
        if (formatCase_ == 2 &&
            format_ != com.google.protobuf.Struct.getDefaultInstance()) {
          format_ = com.google.protobuf.Struct.newBuilder((com.google.protobuf.Struct) format_)
              .mergeFrom(value).buildPartial();
        } else {
          format_ = value;
        }
        onChanged();
      } else {
        if (formatCase_ == 2) {
          jsonFormatBuilder_.mergeFrom(value);
        }
        jsonFormatBuilder_.setMessage(value);
      }
      formatCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    public Builder clearJsonFormat() {
      if (jsonFormatBuilder_ == null) {
        if (formatCase_ == 2) {
          formatCase_ = 0;
          format_ = null;
          onChanged();
        }
      } else {
        if (formatCase_ == 2) {
          formatCase_ = 0;
          format_ = null;
        }
        jsonFormatBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Struct.Builder getJsonFormatBuilder() {
      return getJsonFormatFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public com.google.protobuf.StructOrBuilder getJsonFormatOrBuilder() {
      if ((formatCase_ == 2) && (jsonFormatBuilder_ != null)) {
        return jsonFormatBuilder_.getMessageOrBuilder();
      } else {
        if (formatCase_ == 2) {
          return (com.google.protobuf.Struct) format_;
        }
        return com.google.protobuf.Struct.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary&lt;config_access_log_format_dictionaries&gt;`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     * The following JSON object would be created:
     * .. code-block:: json
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     * </pre>
     *
     * <code>.google.protobuf.Struct json_format = 2 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
        getJsonFormatFieldBuilder() {
      if (jsonFormatBuilder_ == null) {
        if (!(formatCase_ == 2)) {
          format_ = com.google.protobuf.Struct.getDefaultInstance();
        }
        jsonFormatBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                (com.google.protobuf.Struct) format_,
                getParentForChildren(),
                isClean());
        format_ = null;
      }
      formatCase_ = 2;
      onChanged();;
      return jsonFormatBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> textFormatSourceBuilder_;
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     * @return Whether the textFormatSource field is set.
     */
    @java.lang.Override
    public boolean hasTextFormatSource() {
      return formatCase_ == 5;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     * @return The textFormatSource.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.DataSource getTextFormatSource() {
      if (textFormatSourceBuilder_ == null) {
        if (formatCase_ == 5) {
          return (io.envoyproxy.envoy.config.core.v3.DataSource) format_;
        }
        return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
      } else {
        if (formatCase_ == 5) {
          return textFormatSourceBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    public Builder setTextFormatSource(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (textFormatSourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        format_ = value;
        onChanged();
      } else {
        textFormatSourceBuilder_.setMessage(value);
      }
      formatCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    public Builder setTextFormatSource(
        io.envoyproxy.envoy.config.core.v3.DataSource.Builder builderForValue) {
      if (textFormatSourceBuilder_ == null) {
        format_ = builderForValue.build();
        onChanged();
      } else {
        textFormatSourceBuilder_.setMessage(builderForValue.build());
      }
      formatCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    public Builder mergeTextFormatSource(io.envoyproxy.envoy.config.core.v3.DataSource value) {
      if (textFormatSourceBuilder_ == null) {
        if (formatCase_ == 5 &&
            format_ != io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance()) {
          format_ = io.envoyproxy.envoy.config.core.v3.DataSource.newBuilder((io.envoyproxy.envoy.config.core.v3.DataSource) format_)
              .mergeFrom(value).buildPartial();
        } else {
          format_ = value;
        }
        onChanged();
      } else {
        if (formatCase_ == 5) {
          textFormatSourceBuilder_.mergeFrom(value);
        }
        textFormatSourceBuilder_.setMessage(value);
      }
      formatCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    public Builder clearTextFormatSource() {
      if (textFormatSourceBuilder_ == null) {
        if (formatCase_ == 5) {
          formatCase_ = 0;
          format_ = null;
          onChanged();
        }
      } else {
        if (formatCase_ == 5) {
          formatCase_ = 0;
          format_ = null;
        }
        textFormatSourceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.DataSource.Builder getTextFormatSourceBuilder() {
      return getTextFormatSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getTextFormatSourceOrBuilder() {
      if ((formatCase_ == 5) && (textFormatSourceBuilder_ != null)) {
        return textFormatSourceBuilder_.getMessageOrBuilder();
      } else {
        if (formatCase_ == 5) {
          return (io.envoyproxy.envoy.config.core.v3.DataSource) format_;
        }
        return io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string&lt;config_access_log_format_strings&gt;`.
     * For example, setting ``text_format`` like below,
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * generates plain text similar to:
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * </pre>
     *
     * <code>.envoy.config.core.v3.DataSource text_format_source = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
        getTextFormatSourceFieldBuilder() {
      if (textFormatSourceBuilder_ == null) {
        if (!(formatCase_ == 5)) {
          format_ = io.envoyproxy.envoy.config.core.v3.DataSource.getDefaultInstance();
        }
        textFormatSourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.DataSource, io.envoyproxy.envoy.config.core.v3.DataSource.Builder, io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder>(
                (io.envoyproxy.envoy.config.core.v3.DataSource) format_,
                getParentForChildren(),
                isClean());
        format_ = null;
      }
      formatCase_ = 5;
      onChanged();;
      return textFormatSourceBuilder_;
    }

    private boolean omitEmptyValues_ ;
    /**
     * <pre>
     * If set to true, when command operators are evaluated to null,
     * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
     *   empty string, so that empty values are omitted entirely.
     * * for ``json_format`` the keys with null values are omitted in the output structure.
     * </pre>
     *
     * <code>bool omit_empty_values = 3;</code>
     * @return The omitEmptyValues.
     */
    @java.lang.Override
    public boolean getOmitEmptyValues() {
      return omitEmptyValues_;
    }
    /**
     * <pre>
     * If set to true, when command operators are evaluated to null,
     * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
     *   empty string, so that empty values are omitted entirely.
     * * for ``json_format`` the keys with null values are omitted in the output structure.
     * </pre>
     *
     * <code>bool omit_empty_values = 3;</code>
     * @param value The omitEmptyValues to set.
     * @return This builder for chaining.
     */
    public Builder setOmitEmptyValues(boolean value) {
      
      omitEmptyValues_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set to true, when command operators are evaluated to null,
     * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
     *   empty string, so that empty values are omitted entirely.
     * * for ``json_format`` the keys with null values are omitted in the output structure.
     * </pre>
     *
     * <code>bool omit_empty_values = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOmitEmptyValues() {
      
      omitEmptyValues_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object contentType_ = "";
    /**
     * <pre>
     * Specify a *content_type* field.
     * If this field is not set then ``text/plain`` is used for *text_format* and
     * ``application/json`` is used for *json_format*.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   content_type: "text/html; charset=UTF-8"
     * </pre>
     *
     * <code>string content_type = 4;</code>
     * @return The contentType.
     */
    public java.lang.String getContentType() {
      java.lang.Object ref = contentType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        contentType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specify a *content_type* field.
     * If this field is not set then ``text/plain`` is used for *text_format* and
     * ``application/json`` is used for *json_format*.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   content_type: "text/html; charset=UTF-8"
     * </pre>
     *
     * <code>string content_type = 4;</code>
     * @return The bytes for contentType.
     */
    public com.google.protobuf.ByteString
        getContentTypeBytes() {
      java.lang.Object ref = contentType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        contentType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specify a *content_type* field.
     * If this field is not set then ``text/plain`` is used for *text_format* and
     * ``application/json`` is used for *json_format*.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   content_type: "text/html; charset=UTF-8"
     * </pre>
     *
     * <code>string content_type = 4;</code>
     * @param value The contentType to set.
     * @return This builder for chaining.
     */
    public Builder setContentType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      contentType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify a *content_type* field.
     * If this field is not set then ``text/plain`` is used for *text_format* and
     * ``application/json`` is used for *json_format*.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   content_type: "text/html; charset=UTF-8"
     * </pre>
     *
     * <code>string content_type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearContentType() {
      
      contentType_ = getDefaultInstance().getContentType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specify a *content_type* field.
     * If this field is not set then ``text/plain`` is used for *text_format* and
     * ``application/json`` is used for *json_format*.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   content_type: "text/html; charset=UTF-8"
     * </pre>
     *
     * <code>string content_type = 4;</code>
     * @param value The bytes for contentType to set.
     * @return This builder for chaining.
     */
    public Builder setContentTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      contentType_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.core.v3.SubstitutionFormatString)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.core.v3.SubstitutionFormatString)
  private static final io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString();
  }

  public static io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SubstitutionFormatString>
      PARSER = new com.google.protobuf.AbstractParser<SubstitutionFormatString>() {
    @java.lang.Override
    public SubstitutionFormatString parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SubstitutionFormatString(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SubstitutionFormatString> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SubstitutionFormatString> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

