// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/protocol.proto

package io.envoyproxy.envoy.config.core.v3;

public interface HttpProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.HttpProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The idle timeout for connections. The idle timeout is defined as the
   * period in which there are no active requests. When the
   * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
   * downstream connection a drain sequence will occur prior to closing the connection, see
   * :ref:`drain_timeout
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout&gt;`.
   * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
   * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * If the :ref:`overload action &lt;config_overload_manager_overload_actions&gt;` "envoy.overload_actions.reduce_timeouts"
   * is configured, this timeout is scaled for downstream connections according to the value for
   * :ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE &lt;envoy_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 1;</code>
   * @return Whether the idleTimeout field is set.
   */
  boolean hasIdleTimeout();
  /**
   * <pre>
   * The idle timeout for connections. The idle timeout is defined as the
   * period in which there are no active requests. When the
   * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
   * downstream connection a drain sequence will occur prior to closing the connection, see
   * :ref:`drain_timeout
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout&gt;`.
   * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
   * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * If the :ref:`overload action &lt;config_overload_manager_overload_actions&gt;` "envoy.overload_actions.reduce_timeouts"
   * is configured, this timeout is scaled for downstream connections according to the value for
   * :ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE &lt;envoy_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 1;</code>
   * @return The idleTimeout.
   */
  com.google.protobuf.Duration getIdleTimeout();
  /**
   * <pre>
   * The idle timeout for connections. The idle timeout is defined as the
   * period in which there are no active requests. When the
   * idle timeout is reached the connection will be closed. If the connection is an HTTP/2
   * downstream connection a drain sequence will occur prior to closing the connection, see
   * :ref:`drain_timeout
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout&gt;`.
   * Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive.
   * If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0.
   * .. warning::
   *   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP
   *   FIN packets, etc.
   * If the :ref:`overload action &lt;config_overload_manager_overload_actions&gt;` "envoy.overload_actions.reduce_timeouts"
   * is configured, this timeout is scaled for downstream connections according to the value for
   * :ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE &lt;envoy_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE&gt;`.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 1;</code>
   */
  com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder();

  /**
   * <pre>
   * The maximum duration of a connection. The duration is defined as a period since a connection
   * was established. If not set, there is no max duration. When max_connection_duration is reached
   * the connection will be closed. Drain sequence will occur prior to closing the connection if
   * if's applicable. See :ref:`drain_timeout
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout&gt;`.
   * Note: not implemented for upstream connections.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
   * @return Whether the maxConnectionDuration field is set.
   */
  boolean hasMaxConnectionDuration();
  /**
   * <pre>
   * The maximum duration of a connection. The duration is defined as a period since a connection
   * was established. If not set, there is no max duration. When max_connection_duration is reached
   * the connection will be closed. Drain sequence will occur prior to closing the connection if
   * if's applicable. See :ref:`drain_timeout
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout&gt;`.
   * Note: not implemented for upstream connections.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
   * @return The maxConnectionDuration.
   */
  com.google.protobuf.Duration getMaxConnectionDuration();
  /**
   * <pre>
   * The maximum duration of a connection. The duration is defined as a period since a connection
   * was established. If not set, there is no max duration. When max_connection_duration is reached
   * the connection will be closed. Drain sequence will occur prior to closing the connection if
   * if's applicable. See :ref:`drain_timeout
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout&gt;`.
   * Note: not implemented for upstream connections.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_connection_duration = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getMaxConnectionDurationOrBuilder();

  /**
   * <pre>
   * The maximum number of headers. If unconfigured, the default
   * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
   * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the maxHeadersCount field is set.
   */
  boolean hasMaxHeadersCount();
  /**
   * <pre>
   * The maximum number of headers. If unconfigured, the default
   * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
   * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
   * @return The maxHeadersCount.
   */
  com.google.protobuf.UInt32Value getMaxHeadersCount();
  /**
   * <pre>
   * The maximum number of headers. If unconfigured, the default
   * maximum number of request headers allowed is 100. Requests that exceed this limit will receive
   * a 431 response for HTTP/1.x and cause a stream reset for HTTP/2.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_headers_count = 2 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxHeadersCountOrBuilder();

  /**
   * <pre>
   * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
   * reset independent of any other timeouts. If not specified, this value is not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
   * @return Whether the maxStreamDuration field is set.
   */
  boolean hasMaxStreamDuration();
  /**
   * <pre>
   * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
   * reset independent of any other timeouts. If not specified, this value is not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
   * @return The maxStreamDuration.
   */
  com.google.protobuf.Duration getMaxStreamDuration();
  /**
   * <pre>
   * Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be
   * reset independent of any other timeouts. If not specified, this value is not set.
   * </pre>
   *
   * <code>.google.protobuf.Duration max_stream_duration = 4;</code>
   */
  com.google.protobuf.DurationOrBuilder getMaxStreamDurationOrBuilder();

  /**
   * <pre>
   * Action to take when a client request with a header name containing underscore characters is received.
   * If this setting is not specified, the value defaults to ALLOW.
   * Note: upstream responses are not affected by this setting.
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
   * @return The enum numeric value on the wire for headersWithUnderscoresAction.
   */
  int getHeadersWithUnderscoresActionValue();
  /**
   * <pre>
   * Action to take when a client request with a header name containing underscore characters is received.
   * If this setting is not specified, the value defaults to ALLOW.
   * Note: upstream responses are not affected by this setting.
   * </pre>
   *
   * <code>.envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;</code>
   * @return The headersWithUnderscoresAction.
   */
  io.envoyproxy.envoy.config.core.v3.HttpProtocolOptions.HeadersWithUnderscoresAction getHeadersWithUnderscoresAction();
}
