// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/core/v3/config_source.proto

package io.envoyproxy.envoy.config.core.v3;

public interface ConfigSourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.core.v3.ConfigSource)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a *ConfigSource* prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  java.util.List<com.github.udpa.xds.core.v3.Authority> 
      getAuthoritiesList();
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a *ConfigSource* prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  com.github.udpa.xds.core.v3.Authority getAuthorities(int index);
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a *ConfigSource* prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  int getAuthoritiesCount();
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a *ConfigSource* prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  java.util.List<? extends com.github.udpa.xds.core.v3.AuthorityOrBuilder> 
      getAuthoritiesOrBuilderList();
  /**
   * <pre>
   * Authorities that this config source may be used for. An authority specified in a xdstp:// URL
   * is resolved to a *ConfigSource* prior to configuration fetch. This field provides the
   * association between authority name and configuration source.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .xds.core.v3.Authority authorities = 7;</code>
   */
  com.github.udpa.xds.core.v3.AuthorityOrBuilder getAuthoritiesOrBuilder(
      int index);

  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for :ref:`secret &lt;envoy_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   Envoy will only watch the file path for *moves.* This is because in general only moves
   *   are atomic. The same method of swapping files as is demonstrated in the
   *   :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be used here also.
   * </pre>
   *
   * <code>string path = 1;</code>
   * @return Whether the path field is set.
   */
  boolean hasPath();
  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for :ref:`secret &lt;envoy_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   Envoy will only watch the file path for *moves.* This is because in general only moves
   *   are atomic. The same method of swapping files as is demonstrated in the
   *   :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be used here also.
   * </pre>
   *
   * <code>string path = 1;</code>
   * @return The path.
   */
  java.lang.String getPath();
  /**
   * <pre>
   * Path on the filesystem to source and watch for configuration updates.
   * When sourcing configuration for :ref:`secret &lt;envoy_api_msg_extensions.transport_sockets.tls.v3.Secret&gt;`,
   * the certificate and key files are also watched for updates.
   * .. note::
   *  The path to the source must exist at config load time.
   * .. note::
   *   Envoy will only watch the file path for *moves.* This is because in general only moves
   *   are atomic. The same method of swapping files as is demonstrated in the
   *   :ref:`runtime documentation &lt;config_runtime_symbolic_link_swap&gt;` can be used here also.
   * </pre>
   *
   * <code>string path = 1;</code>
   * @return The bytes for path.
   */
  com.google.protobuf.ByteString
      getPathBytes();

  /**
   * <pre>
   * API configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
   * @return Whether the apiConfigSource field is set.
   */
  boolean hasApiConfigSource();
  /**
   * <pre>
   * API configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
   * @return The apiConfigSource.
   */
  io.envoyproxy.envoy.config.core.v3.ApiConfigSource getApiConfigSource();
  /**
   * <pre>
   * API configuration source.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiConfigSource api_config_source = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.ApiConfigSourceOrBuilder getApiConfigSourceOrBuilder();

  /**
   * <pre>
   * When set, ADS will be used to fetch resources. The ADS API configuration
   * source in the bootstrap configuration is used.
   * </pre>
   *
   * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
   * @return Whether the ads field is set.
   */
  boolean hasAds();
  /**
   * <pre>
   * When set, ADS will be used to fetch resources. The ADS API configuration
   * source in the bootstrap configuration is used.
   * </pre>
   *
   * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
   * @return The ads.
   */
  io.envoyproxy.envoy.config.core.v3.AggregatedConfigSource getAds();
  /**
   * <pre>
   * When set, ADS will be used to fetch resources. The ADS API configuration
   * source in the bootstrap configuration is used.
   * </pre>
   *
   * <code>.envoy.config.core.v3.AggregatedConfigSource ads = 3;</code>
   */
  io.envoyproxy.envoy.config.core.v3.AggregatedConfigSourceOrBuilder getAdsOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * When set, the client will access the resources from the same server it got the
   * ConfigSource from, although not necessarily from the same stream. This is similar to the
   * :ref:`ads&lt;envoy_api_field.ConfigSource.ads&gt;` field, except that the client may use a
   * different stream to the same server. As a result, this field can be used for things
   * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
   * LDS to RDS on the same server without requiring the management server to know its name
   * or required credentials.
   * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
   * this field can implicitly mean to use the same stream in the case where the ConfigSource
   * is provided via ADS and the specified data can also be obtained via ADS.]
   * </pre>
   *
   * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
   * @return Whether the self field is set.
   */
  boolean hasSelf();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * When set, the client will access the resources from the same server it got the
   * ConfigSource from, although not necessarily from the same stream. This is similar to the
   * :ref:`ads&lt;envoy_api_field.ConfigSource.ads&gt;` field, except that the client may use a
   * different stream to the same server. As a result, this field can be used for things
   * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
   * LDS to RDS on the same server without requiring the management server to know its name
   * or required credentials.
   * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
   * this field can implicitly mean to use the same stream in the case where the ConfigSource
   * is provided via ADS and the specified data can also be obtained via ADS.]
   * </pre>
   *
   * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
   * @return The self.
   */
  io.envoyproxy.envoy.config.core.v3.SelfConfigSource getSelf();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * When set, the client will access the resources from the same server it got the
   * ConfigSource from, although not necessarily from the same stream. This is similar to the
   * :ref:`ads&lt;envoy_api_field.ConfigSource.ads&gt;` field, except that the client may use a
   * different stream to the same server. As a result, this field can be used for things
   * like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.)
   * LDS to RDS on the same server without requiring the management server to know its name
   * or required credentials.
   * [#next-major-version: In xDS v3, consider replacing the ads field with this one, since
   * this field can implicitly mean to use the same stream in the case where the ConfigSource
   * is provided via ADS and the specified data can also be obtained via ADS.]
   * </pre>
   *
   * <code>.envoy.config.core.v3.SelfConfigSource self = 5;</code>
   */
  io.envoyproxy.envoy.config.core.v3.SelfConfigSourceOrBuilder getSelfOrBuilder();

  /**
   * <pre>
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
   * @return Whether the initialFetchTimeout field is set.
   */
  boolean hasInitialFetchTimeout();
  /**
   * <pre>
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
   * @return The initialFetchTimeout.
   */
  com.google.protobuf.Duration getInitialFetchTimeout();
  /**
   * <pre>
   * When this timeout is specified, Envoy will wait no longer than the specified time for first
   * config response on this xDS subscription during the :ref:`initialization process
   * &lt;arch_overview_initialization&gt;`. After reaching the timeout, Envoy will move to the next
   * initialization phase, even if the first config is not delivered yet. The timer is activated
   * when the xDS API subscription starts, and is disarmed on first config update or on error. 0
   * means no timeout - Envoy will wait indefinitely for the first xDS config (unless another
   * timeout applies). The default is 15s.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_fetch_timeout = 4;</code>
   */
  com.google.protobuf.DurationOrBuilder getInitialFetchTimeoutOrBuilder();

  /**
   * <pre>
   * API version for xDS resources. This implies the type URLs that the client
   * will request for resources and the resource type that the client will in
   * turn expect to be delivered.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for resourceApiVersion.
   */
  int getResourceApiVersionValue();
  /**
   * <pre>
   * API version for xDS resources. This implies the type URLs that the client
   * will request for resources and the resource type that the client will in
   * turn expect to be delivered.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion resource_api_version = 6 [(.validate.rules) = { ... }</code>
   * @return The resourceApiVersion.
   */
  io.envoyproxy.envoy.config.core.v3.ApiVersion getResourceApiVersion();

  public io.envoyproxy.envoy.config.core.v3.ConfigSource.ConfigSourceSpecifierCase getConfigSourceSpecifierCase();
}
