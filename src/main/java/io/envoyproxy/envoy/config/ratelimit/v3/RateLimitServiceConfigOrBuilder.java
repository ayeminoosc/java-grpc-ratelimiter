// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/ratelimit/v3/rls.proto

package io.envoyproxy.envoy.config.ratelimit.v3;

public interface RateLimitServiceConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.ratelimit.v3.RateLimitServiceConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the gRPC service that hosts the rate limit service. The client
   * will connect to this cluster when it needs to make rate limit service
   * requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService grpc_service = 2 [(.validate.rules) = { ... }</code>
   * @return Whether the grpcService field is set.
   */
  boolean hasGrpcService();
  /**
   * <pre>
   * Specifies the gRPC service that hosts the rate limit service. The client
   * will connect to this cluster when it needs to make rate limit service
   * requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService grpc_service = 2 [(.validate.rules) = { ... }</code>
   * @return The grpcService.
   */
  io.envoyproxy.envoy.config.core.v3.GrpcService getGrpcService();
  /**
   * <pre>
   * Specifies the gRPC service that hosts the rate limit service. The client
   * will connect to this cluster when it needs to make rate limit service
   * requests.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService grpc_service = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder getGrpcServiceOrBuilder();

  /**
   * <pre>
   * API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
   * version of messages used on the wire.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion transport_api_version = 4 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for transportApiVersion.
   */
  int getTransportApiVersionValue();
  /**
   * <pre>
   * API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
   * version of messages used on the wire.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion transport_api_version = 4 [(.validate.rules) = { ... }</code>
   * @return The transportApiVersion.
   */
  io.envoyproxy.envoy.config.core.v3.ApiVersion getTransportApiVersion();
}
