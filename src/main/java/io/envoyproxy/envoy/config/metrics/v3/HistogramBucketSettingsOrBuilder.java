// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/metrics/v3/stats.proto

package io.envoyproxy.envoy.config.metrics.v3;

public interface HistogramBucketSettingsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.metrics.v3.HistogramBucketSettings)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The stats that this rule applies to. The match is applied to the original stat name
   * before tag-extraction, for example `cluster.exampleclustername.upstream_cx_length_ms`.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.StringMatcher match = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the match field is set.
   */
  boolean hasMatch();
  /**
   * <pre>
   * The stats that this rule applies to. The match is applied to the original stat name
   * before tag-extraction, for example `cluster.exampleclustername.upstream_cx_length_ms`.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.StringMatcher match = 1 [(.validate.rules) = { ... }</code>
   * @return The match.
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcher getMatch();
  /**
   * <pre>
   * The stats that this rule applies to. The match is applied to the original stat name
   * before tag-extraction, for example `cluster.exampleclustername.upstream_cx_length_ms`.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.StringMatcher match = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getMatchOrBuilder();

  /**
   * <pre>
   * Each value is the upper bound of a bucket. Each bucket must be greater than 0 and unique.
   * The order of the buckets does not matter.
   * </pre>
   *
   * <code>repeated double buckets = 2 [(.validate.rules) = { ... }</code>
   * @return A list containing the buckets.
   */
  java.util.List<java.lang.Double> getBucketsList();
  /**
   * <pre>
   * Each value is the upper bound of a bucket. Each bucket must be greater than 0 and unique.
   * The order of the buckets does not matter.
   * </pre>
   *
   * <code>repeated double buckets = 2 [(.validate.rules) = { ... }</code>
   * @return The count of buckets.
   */
  int getBucketsCount();
  /**
   * <pre>
   * Each value is the upper bound of a bucket. Each bucket must be greater than 0 and unique.
   * The order of the buckets does not matter.
   * </pre>
   *
   * <code>repeated double buckets = 2 [(.validate.rules) = { ... }</code>
   * @param index The index of the element to return.
   * @return The buckets at the given index.
   */
  double getBuckets(int index);
}
