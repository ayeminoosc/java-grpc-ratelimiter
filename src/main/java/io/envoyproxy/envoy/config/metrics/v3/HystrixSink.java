// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/metrics/v3/stats.proto

package io.envoyproxy.envoy.config.metrics.v3;

/**
 * <pre>
 * Stats configuration proto schema for built-in *envoy.stat_sinks.hystrix* sink.
 * The sink emits stats in `text/event-stream
 * &lt;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events&gt;`_
 * formatted stream for use by `Hystrix dashboard
 * &lt;https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki&gt;`_.
 * Note that only a single HystrixSink should be configured.
 * Streaming is started through an admin endpoint :http:get:`/hystrix_event_stream`.
 * [#extension: envoy.stat_sinks.hystrix]
 * </pre>
 *
 * Protobuf type {@code envoy.config.metrics.v3.HystrixSink}
 */
public final class HystrixSink extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.config.metrics.v3.HystrixSink)
    HystrixSinkOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HystrixSink.newBuilder() to construct.
  private HystrixSink(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HystrixSink() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new HystrixSink();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private HystrixSink(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            numBuckets_ = input.readInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_HystrixSink_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_HystrixSink_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.config.metrics.v3.HystrixSink.class, io.envoyproxy.envoy.config.metrics.v3.HystrixSink.Builder.class);
  }

  public static final int NUM_BUCKETS_FIELD_NUMBER = 1;
  private long numBuckets_;
  /**
   * <pre>
   * The number of buckets the rolling statistical window is divided into.
   * Each time the sink is flushed, all relevant Envoy statistics are sampled and
   * added to the rolling window (removing the oldest samples in the window
   * in the process). The sink then outputs the aggregate statistics across the
   * current rolling window to the event stream(s).
   * rolling_window(ms) = stats_flush_interval(ms) * num_of_buckets
   * More detailed explanation can be found in `Hystrix wiki
   * &lt;https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#hystrixrollingnumber&gt;`_.
   * </pre>
   *
   * <code>int64 num_buckets = 1;</code>
   * @return The numBuckets.
   */
  @java.lang.Override
  public long getNumBuckets() {
    return numBuckets_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (numBuckets_ != 0L) {
      output.writeInt64(1, numBuckets_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (numBuckets_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, numBuckets_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.config.metrics.v3.HystrixSink)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.config.metrics.v3.HystrixSink other = (io.envoyproxy.envoy.config.metrics.v3.HystrixSink) obj;

    if (getNumBuckets()
        != other.getNumBuckets()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NUM_BUCKETS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getNumBuckets());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.config.metrics.v3.HystrixSink prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Stats configuration proto schema for built-in *envoy.stat_sinks.hystrix* sink.
   * The sink emits stats in `text/event-stream
   * &lt;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events&gt;`_
   * formatted stream for use by `Hystrix dashboard
   * &lt;https://github.com/Netflix-Skunkworks/hystrix-dashboard/wiki&gt;`_.
   * Note that only a single HystrixSink should be configured.
   * Streaming is started through an admin endpoint :http:get:`/hystrix_event_stream`.
   * [#extension: envoy.stat_sinks.hystrix]
   * </pre>
   *
   * Protobuf type {@code envoy.config.metrics.v3.HystrixSink}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.config.metrics.v3.HystrixSink)
      io.envoyproxy.envoy.config.metrics.v3.HystrixSinkOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_HystrixSink_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_HystrixSink_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.config.metrics.v3.HystrixSink.class, io.envoyproxy.envoy.config.metrics.v3.HystrixSink.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.config.metrics.v3.HystrixSink.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      numBuckets_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.config.metrics.v3.StatsProto.internal_static_envoy_config_metrics_v3_HystrixSink_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.metrics.v3.HystrixSink getDefaultInstanceForType() {
      return io.envoyproxy.envoy.config.metrics.v3.HystrixSink.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.metrics.v3.HystrixSink build() {
      io.envoyproxy.envoy.config.metrics.v3.HystrixSink result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.config.metrics.v3.HystrixSink buildPartial() {
      io.envoyproxy.envoy.config.metrics.v3.HystrixSink result = new io.envoyproxy.envoy.config.metrics.v3.HystrixSink(this);
      result.numBuckets_ = numBuckets_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.config.metrics.v3.HystrixSink) {
        return mergeFrom((io.envoyproxy.envoy.config.metrics.v3.HystrixSink)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.config.metrics.v3.HystrixSink other) {
      if (other == io.envoyproxy.envoy.config.metrics.v3.HystrixSink.getDefaultInstance()) return this;
      if (other.getNumBuckets() != 0L) {
        setNumBuckets(other.getNumBuckets());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.config.metrics.v3.HystrixSink parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.config.metrics.v3.HystrixSink) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long numBuckets_ ;
    /**
     * <pre>
     * The number of buckets the rolling statistical window is divided into.
     * Each time the sink is flushed, all relevant Envoy statistics are sampled and
     * added to the rolling window (removing the oldest samples in the window
     * in the process). The sink then outputs the aggregate statistics across the
     * current rolling window to the event stream(s).
     * rolling_window(ms) = stats_flush_interval(ms) * num_of_buckets
     * More detailed explanation can be found in `Hystrix wiki
     * &lt;https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#hystrixrollingnumber&gt;`_.
     * </pre>
     *
     * <code>int64 num_buckets = 1;</code>
     * @return The numBuckets.
     */
    @java.lang.Override
    public long getNumBuckets() {
      return numBuckets_;
    }
    /**
     * <pre>
     * The number of buckets the rolling statistical window is divided into.
     * Each time the sink is flushed, all relevant Envoy statistics are sampled and
     * added to the rolling window (removing the oldest samples in the window
     * in the process). The sink then outputs the aggregate statistics across the
     * current rolling window to the event stream(s).
     * rolling_window(ms) = stats_flush_interval(ms) * num_of_buckets
     * More detailed explanation can be found in `Hystrix wiki
     * &lt;https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#hystrixrollingnumber&gt;`_.
     * </pre>
     *
     * <code>int64 num_buckets = 1;</code>
     * @param value The numBuckets to set.
     * @return This builder for chaining.
     */
    public Builder setNumBuckets(long value) {
      
      numBuckets_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of buckets the rolling statistical window is divided into.
     * Each time the sink is flushed, all relevant Envoy statistics are sampled and
     * added to the rolling window (removing the oldest samples in the window
     * in the process). The sink then outputs the aggregate statistics across the
     * current rolling window to the event stream(s).
     * rolling_window(ms) = stats_flush_interval(ms) * num_of_buckets
     * More detailed explanation can be found in `Hystrix wiki
     * &lt;https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring#hystrixrollingnumber&gt;`_.
     * </pre>
     *
     * <code>int64 num_buckets = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNumBuckets() {
      
      numBuckets_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.config.metrics.v3.HystrixSink)
  }

  // @@protoc_insertion_point(class_scope:envoy.config.metrics.v3.HystrixSink)
  private static final io.envoyproxy.envoy.config.metrics.v3.HystrixSink DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.config.metrics.v3.HystrixSink();
  }

  public static io.envoyproxy.envoy.config.metrics.v3.HystrixSink getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HystrixSink>
      PARSER = new com.google.protobuf.AbstractParser<HystrixSink>() {
    @java.lang.Override
    public HystrixSink parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new HystrixSink(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<HystrixSink> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HystrixSink> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.config.metrics.v3.HystrixSink getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

