// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/metrics/v3/stats.proto

package io.envoyproxy.envoy.config.metrics.v3;

public interface DogStatsdSinkOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.metrics.v3.DogStatsdSink)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The UDP address of a running DogStatsD compliant listener. If specified,
   * statistics will be flushed to this address.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Address address = 1;</code>
   * @return Whether the address field is set.
   */
  boolean hasAddress();
  /**
   * <pre>
   * The UDP address of a running DogStatsD compliant listener. If specified,
   * statistics will be flushed to this address.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Address address = 1;</code>
   * @return The address.
   */
  io.envoyproxy.envoy.config.core.v3.Address getAddress();
  /**
   * <pre>
   * The UDP address of a running DogStatsD compliant listener. If specified,
   * statistics will be flushed to this address.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Address address = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.AddressOrBuilder getAddressOrBuilder();

  /**
   * <pre>
   * Optional custom metric name prefix. See :ref:`StatsdSink's prefix field
   * &lt;envoy_api_field_config.metrics.v3.StatsdSink.prefix&gt;` for more details.
   * </pre>
   *
   * <code>string prefix = 3;</code>
   * @return The prefix.
   */
  java.lang.String getPrefix();
  /**
   * <pre>
   * Optional custom metric name prefix. See :ref:`StatsdSink's prefix field
   * &lt;envoy_api_field_config.metrics.v3.StatsdSink.prefix&gt;` for more details.
   * </pre>
   *
   * <code>string prefix = 3;</code>
   * @return The bytes for prefix.
   */
  com.google.protobuf.ByteString
      getPrefixBytes();

  /**
   * <pre>
   * Optional max datagram size to use when sending UDP messages. By default Envoy
   * will emit one metric per datagram. By specifying a max-size larger than a single
   * metric, Envoy will emit multiple, new-line separated metrics. The max datagram
   * size should not exceed your network's MTU.
   * Note that this value may not be respected if smaller than a single metric.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_bytes_per_datagram = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the maxBytesPerDatagram field is set.
   */
  boolean hasMaxBytesPerDatagram();
  /**
   * <pre>
   * Optional max datagram size to use when sending UDP messages. By default Envoy
   * will emit one metric per datagram. By specifying a max-size larger than a single
   * metric, Envoy will emit multiple, new-line separated metrics. The max datagram
   * size should not exceed your network's MTU.
   * Note that this value may not be respected if smaller than a single metric.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_bytes_per_datagram = 4 [(.validate.rules) = { ... }</code>
   * @return The maxBytesPerDatagram.
   */
  com.google.protobuf.UInt64Value getMaxBytesPerDatagram();
  /**
   * <pre>
   * Optional max datagram size to use when sending UDP messages. By default Envoy
   * will emit one metric per datagram. By specifying a max-size larger than a single
   * metric, Envoy will emit multiple, new-line separated metrics. The max datagram
   * size should not exceed your network's MTU.
   * Note that this value may not be respected if smaller than a single metric.
   * </pre>
   *
   * <code>.google.protobuf.UInt64Value max_bytes_per_datagram = 4 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.UInt64ValueOrBuilder getMaxBytesPerDatagramOrBuilder();

  public io.envoyproxy.envoy.config.metrics.v3.DogStatsdSink.DogStatsdSpecifierCase getDogStatsdSpecifierCase();
}
