// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/rbac/v3/rbac.proto

package io.envoyproxy.envoy.config.rbac.v3;

public interface RBACOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.rbac.v3.RBAC)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The action to take if a policy matches. Every action either allows or denies a request,
   * and can also carry out action-specific operations.
   * Actions:
   *  * ALLOW: Allows the request if and only if there is a policy that matches
   *    the request.
   *  * DENY: Allows the request if and only if there are no policies that
   *    match the request.
   *  * LOG: Allows all requests. If at least one policy matches, the dynamic
   *    metadata key `access_log_hint` is set to the value `true` under the shared
   *    key namespace 'envoy.common'. If no policies match, it is set to `false`.
   *    Other actions do not modify this key.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC.Action action = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for action.
   */
  int getActionValue();
  /**
   * <pre>
   * The action to take if a policy matches. Every action either allows or denies a request,
   * and can also carry out action-specific operations.
   * Actions:
   *  * ALLOW: Allows the request if and only if there is a policy that matches
   *    the request.
   *  * DENY: Allows the request if and only if there are no policies that
   *    match the request.
   *  * LOG: Allows all requests. If at least one policy matches, the dynamic
   *    metadata key `access_log_hint` is set to the value `true` under the shared
   *    key namespace 'envoy.common'. If no policies match, it is set to `false`.
   *    Other actions do not modify this key.
   * </pre>
   *
   * <code>.envoy.config.rbac.v3.RBAC.Action action = 1 [(.validate.rules) = { ... }</code>
   * @return The action.
   */
  io.envoyproxy.envoy.config.rbac.v3.RBAC.Action getAction();

  /**
   * <pre>
   * Maps from policy name to policy. A match occurs when at least one policy matches the request.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.rbac.v3.Policy&gt; policies = 2;</code>
   */
  int getPoliciesCount();
  /**
   * <pre>
   * Maps from policy name to policy. A match occurs when at least one policy matches the request.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.rbac.v3.Policy&gt; policies = 2;</code>
   */
  boolean containsPolicies(
      java.lang.String key);
  /**
   * Use {@link #getPoliciesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.rbac.v3.Policy>
  getPolicies();
  /**
   * <pre>
   * Maps from policy name to policy. A match occurs when at least one policy matches the request.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.rbac.v3.Policy&gt; policies = 2;</code>
   */
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.rbac.v3.Policy>
  getPoliciesMap();
  /**
   * <pre>
   * Maps from policy name to policy. A match occurs when at least one policy matches the request.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.rbac.v3.Policy&gt; policies = 2;</code>
   */

  io.envoyproxy.envoy.config.rbac.v3.Policy getPoliciesOrDefault(
      java.lang.String key,
      io.envoyproxy.envoy.config.rbac.v3.Policy defaultValue);
  /**
   * <pre>
   * Maps from policy name to policy. A match occurs when at least one policy matches the request.
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.rbac.v3.Policy&gt; policies = 2;</code>
   */

  io.envoyproxy.envoy.config.rbac.v3.Policy getPoliciesOrThrow(
      java.lang.String key);
}
