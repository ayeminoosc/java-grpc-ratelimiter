// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/rbac/v3/rbac.proto

package io.envoyproxy.envoy.config.rbac.v3;

public interface PolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.rbac.v3.Policy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The set of permissions that define a role. Each permission is
   * matched with OR semantics. To match all actions for this policy, a single
   * Permission with the `any` field set to true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Permission permissions = 1 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.rbac.v3.Permission> 
      getPermissionsList();
  /**
   * <pre>
   * Required. The set of permissions that define a role. Each permission is
   * matched with OR semantics. To match all actions for this policy, a single
   * Permission with the `any` field set to true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Permission permissions = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.rbac.v3.Permission getPermissions(int index);
  /**
   * <pre>
   * Required. The set of permissions that define a role. Each permission is
   * matched with OR semantics. To match all actions for this policy, a single
   * Permission with the `any` field set to true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Permission permissions = 1 [(.validate.rules) = { ... }</code>
   */
  int getPermissionsCount();
  /**
   * <pre>
   * Required. The set of permissions that define a role. Each permission is
   * matched with OR semantics. To match all actions for this policy, a single
   * Permission with the `any` field set to true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Permission permissions = 1 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.rbac.v3.PermissionOrBuilder> 
      getPermissionsOrBuilderList();
  /**
   * <pre>
   * Required. The set of permissions that define a role. Each permission is
   * matched with OR semantics. To match all actions for this policy, a single
   * Permission with the `any` field set to true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Permission permissions = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.rbac.v3.PermissionOrBuilder getPermissionsOrBuilder(
      int index);

  /**
   * <pre>
   * Required. The set of principals that are assigned/denied the role based on
   * “action”. Each principal is matched with OR semantics. To match all
   * downstreams for this policy, a single Principal with the `any` field set to
   * true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Principal principals = 2 [(.validate.rules) = { ... }</code>
   */
  java.util.List<io.envoyproxy.envoy.config.rbac.v3.Principal> 
      getPrincipalsList();
  /**
   * <pre>
   * Required. The set of principals that are assigned/denied the role based on
   * “action”. Each principal is matched with OR semantics. To match all
   * downstreams for this policy, a single Principal with the `any` field set to
   * true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Principal principals = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.rbac.v3.Principal getPrincipals(int index);
  /**
   * <pre>
   * Required. The set of principals that are assigned/denied the role based on
   * “action”. Each principal is matched with OR semantics. To match all
   * downstreams for this policy, a single Principal with the `any` field set to
   * true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Principal principals = 2 [(.validate.rules) = { ... }</code>
   */
  int getPrincipalsCount();
  /**
   * <pre>
   * Required. The set of principals that are assigned/denied the role based on
   * “action”. Each principal is matched with OR semantics. To match all
   * downstreams for this policy, a single Principal with the `any` field set to
   * true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Principal principals = 2 [(.validate.rules) = { ... }</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.rbac.v3.PrincipalOrBuilder> 
      getPrincipalsOrBuilderList();
  /**
   * <pre>
   * Required. The set of principals that are assigned/denied the role based on
   * “action”. Each principal is matched with OR semantics. To match all
   * downstreams for this policy, a single Principal with the `any` field set to
   * true should be used.
   * </pre>
   *
   * <code>repeated .envoy.config.rbac.v3.Principal principals = 2 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.rbac.v3.PrincipalOrBuilder getPrincipalsOrBuilder(
      int index);

  /**
   * <pre>
   * An optional symbolic expression specifying an access control
   * :ref:`condition &lt;arch_overview_condition&gt;`. The condition is combined
   * with the permissions and the principals as a clause with AND semantics.
   * Only be used when checked_condition is not used.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Expr condition = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return Whether the condition field is set.
   */
  boolean hasCondition();
  /**
   * <pre>
   * An optional symbolic expression specifying an access control
   * :ref:`condition &lt;arch_overview_condition&gt;`. The condition is combined
   * with the permissions and the principals as a clause with AND semantics.
   * Only be used when checked_condition is not used.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Expr condition = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return The condition.
   */
  com.google.api.expr.v1alpha1.Expr getCondition();
  /**
   * <pre>
   * An optional symbolic expression specifying an access control
   * :ref:`condition &lt;arch_overview_condition&gt;`. The condition is combined
   * with the permissions and the principals as a clause with AND semantics.
   * Only be used when checked_condition is not used.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.Expr condition = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
   */
  com.google.api.expr.v1alpha1.ExprOrBuilder getConditionOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * An optional symbolic expression that has been successfully type checked.
   * Only be used when condition is not used.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.CheckedExpr checked_condition = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return Whether the checkedCondition field is set.
   */
  boolean hasCheckedCondition();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * An optional symbolic expression that has been successfully type checked.
   * Only be used when condition is not used.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.CheckedExpr checked_condition = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
   * @return The checkedCondition.
   */
  com.google.api.expr.v1alpha1.CheckedExpr getCheckedCondition();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * An optional symbolic expression that has been successfully type checked.
   * Only be used when condition is not used.
   * </pre>
   *
   * <code>.google.api.expr.v1alpha1.CheckedExpr checked_condition = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
   */
  com.google.api.expr.v1alpha1.CheckedExprOrBuilder getCheckedConditionOrBuilder();
}
