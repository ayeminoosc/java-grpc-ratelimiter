// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/config/listener/v3/quic_config.proto

package io.envoyproxy.envoy.config.listener.v3;

public interface QuicProtocolOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.config.listener.v3.QuicProtocolOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1;</code>
   * @return Whether the maxConcurrentStreams field is set.
   */
  boolean hasMaxConcurrentStreams();
  /**
   * <pre>
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1;</code>
   * @return The maxConcurrentStreams.
   */
  com.google.protobuf.UInt32Value getMaxConcurrentStreams();
  /**
   * <pre>
   * Maximum number of streams that the client can negotiate per connection. 100
   * if not specified.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_concurrent_streams = 1;</code>
   */
  com.google.protobuf.UInt32ValueOrBuilder getMaxConcurrentStreamsOrBuilder();

  /**
   * <pre>
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity. 300000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 2;</code>
   * @return Whether the idleTimeout field is set.
   */
  boolean hasIdleTimeout();
  /**
   * <pre>
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity. 300000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 2;</code>
   * @return The idleTimeout.
   */
  com.google.protobuf.Duration getIdleTimeout();
  /**
   * <pre>
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity. 300000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration idle_timeout = 2;</code>
   */
  com.google.protobuf.DurationOrBuilder getIdleTimeoutOrBuilder();

  /**
   * <pre>
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * 20000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
   * @return Whether the cryptoHandshakeTimeout field is set.
   */
  boolean hasCryptoHandshakeTimeout();
  /**
   * <pre>
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * 20000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
   * @return The cryptoHandshakeTimeout.
   */
  com.google.protobuf.Duration getCryptoHandshakeTimeout();
  /**
   * <pre>
   * Connection timeout in milliseconds before the crypto handshake is finished.
   * 20000ms if not specified.
   * </pre>
   *
   * <code>.google.protobuf.Duration crypto_handshake_timeout = 3;</code>
   */
  com.google.protobuf.DurationOrBuilder getCryptoHandshakeTimeoutOrBuilder();

  /**
   * <pre>
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
   * @return Whether the enabled field is set.
   */
  boolean hasEnabled();
  /**
   * <pre>
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
   * @return The enabled.
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled();
  /**
   * <pre>
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder();
}
