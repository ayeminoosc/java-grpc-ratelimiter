// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto

package io.envoyproxy.envoy.extensions.filters.http.ext_authz.v3;

public interface BufferSettingsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.ext_authz.v3.BufferSettings)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
   * *HTTP 413* and will *not* initiate the authorization process when buffer reaches the number
   * set in this field. Note that this setting will have precedence over :ref:`failure_mode_allow
   * &lt;envoy_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.failure_mode_allow&gt;`.
   * </pre>
   *
   * <code>uint32 max_request_bytes = 1 [(.validate.rules) = { ... }</code>
   * @return The maxRequestBytes.
   */
  int getMaxRequestBytes();

  /**
   * <pre>
   * When this field is true, Envoy will buffer the message until *max_request_bytes* is reached.
   * The authorization request will be dispatched and no 413 HTTP error will be returned by the
   * filter.
   * </pre>
   *
   * <code>bool allow_partial_message = 2;</code>
   * @return The allowPartialMessage.
   */
  boolean getAllowPartialMessage();

  /**
   * <pre>
   * If true, the body sent to the external authorization service is set with raw bytes, it sets
   * the :ref:`raw_body&lt;envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.raw_body&gt;`
   * field of HTTP request attribute context. Otherwise, :ref:`
   * body&lt;envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body&gt;` will be filled
   * with UTF-8 string request body.
   * </pre>
   *
   * <code>bool pack_as_bytes = 3;</code>
   * @return The packAsBytes.
   */
  boolean getPackAsBytes();
}
