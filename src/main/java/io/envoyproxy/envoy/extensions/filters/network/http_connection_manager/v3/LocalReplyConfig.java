// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto

package io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3;

/**
 * <pre>
 * The configuration to customize local reply returned by Envoy.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig}
 */
public final class LocalReplyConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)
    LocalReplyConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LocalReplyConfig.newBuilder() to construct.
  private LocalReplyConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LocalReplyConfig() {
    mappers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LocalReplyConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LocalReplyConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              mappers_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper>();
              mutable_bitField0_ |= 0x00000001;
            }
            mappers_.add(
                input.readMessage(io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.parser(), extensionRegistry));
            break;
          }
          case 18: {
            io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder subBuilder = null;
            if (bodyFormat_ != null) {
              subBuilder = bodyFormat_.toBuilder();
            }
            bodyFormat_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(bodyFormat_);
              bodyFormat_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        mappers_ = java.util.Collections.unmodifiableList(mappers_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagerProto.internal_static_envoy_extensions_filters_network_http_connection_manager_v3_LocalReplyConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagerProto.internal_static_envoy_extensions_filters_network_http_connection_manager_v3_LocalReplyConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.class, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.Builder.class);
  }

  public static final int MAPPERS_FIELD_NUMBER = 1;
  private java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper> mappers_;
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper> getMappersList() {
    return mappers_;
  }
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder> 
      getMappersOrBuilderList() {
    return mappers_;
  }
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  @java.lang.Override
  public int getMappersCount() {
    return mappers_.size();
  }
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper getMappers(int index) {
    return mappers_.get(index);
  }
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder getMappersOrBuilder(
      int index) {
    return mappers_.get(index);
  }

  public static final int BODY_FORMAT_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString bodyFormat_;
  /**
   * <pre>
   * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * and to specify response content type as one of: plain/text or application/json.
   * Example one: "plain/text" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * The following response body in "plain/text" format will be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Example two: "application/json" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   *     path: "%REQ(:path)%"
   * The following response body in "application/json" format would be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: json
   *  {
   *    "status": 503,
   *    "message": "upstream connection error",
   *    "path": "/foo"
   *  }
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
   * @return Whether the bodyFormat field is set.
   */
  @java.lang.Override
  public boolean hasBodyFormat() {
    return bodyFormat_ != null;
  }
  /**
   * <pre>
   * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * and to specify response content type as one of: plain/text or application/json.
   * Example one: "plain/text" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * The following response body in "plain/text" format will be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Example two: "application/json" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   *     path: "%REQ(:path)%"
   * The following response body in "application/json" format would be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: json
   *  {
   *    "status": 503,
   *    "message": "upstream connection error",
   *    "path": "/foo"
   *  }
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
   * @return The bodyFormat.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getBodyFormat() {
    return bodyFormat_ == null ? io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.getDefaultInstance() : bodyFormat_;
  }
  /**
   * <pre>
   * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * and to specify response content type as one of: plain/text or application/json.
   * Example one: "plain/text" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * The following response body in "plain/text" format will be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Example two: "application/json" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   *     path: "%REQ(:path)%"
   * The following response body in "application/json" format would be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: json
   *  {
   *    "status": 503,
   *    "message": "upstream connection error",
   *    "path": "/foo"
   *  }
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder getBodyFormatOrBuilder() {
    return getBodyFormat();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < mappers_.size(); i++) {
      output.writeMessage(1, mappers_.get(i));
    }
    if (bodyFormat_ != null) {
      output.writeMessage(2, getBodyFormat());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < mappers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, mappers_.get(i));
    }
    if (bodyFormat_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getBodyFormat());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig other = (io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig) obj;

    if (!getMappersList()
        .equals(other.getMappersList())) return false;
    if (hasBodyFormat() != other.hasBodyFormat()) return false;
    if (hasBodyFormat()) {
      if (!getBodyFormat()
          .equals(other.getBodyFormat())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getMappersCount() > 0) {
      hash = (37 * hash) + MAPPERS_FIELD_NUMBER;
      hash = (53 * hash) + getMappersList().hashCode();
    }
    if (hasBodyFormat()) {
      hash = (37 * hash) + BODY_FORMAT_FIELD_NUMBER;
      hash = (53 * hash) + getBodyFormat().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The configuration to customize local reply returned by Envoy.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)
      io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagerProto.internal_static_envoy_extensions_filters_network_http_connection_manager_v3_LocalReplyConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagerProto.internal_static_envoy_extensions_filters_network_http_connection_manager_v3_LocalReplyConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.class, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMappersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (mappersBuilder_ == null) {
        mappers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        mappersBuilder_.clear();
      }
      if (bodyFormatBuilder_ == null) {
        bodyFormat_ = null;
      } else {
        bodyFormat_ = null;
        bodyFormatBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManagerProto.internal_static_envoy_extensions_filters_network_http_connection_manager_v3_LocalReplyConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig build() {
      io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig result = new io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig(this);
      int from_bitField0_ = bitField0_;
      if (mappersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          mappers_ = java.util.Collections.unmodifiableList(mappers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.mappers_ = mappers_;
      } else {
        result.mappers_ = mappersBuilder_.build();
      }
      if (bodyFormatBuilder_ == null) {
        result.bodyFormat_ = bodyFormat_;
      } else {
        result.bodyFormat_ = bodyFormatBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig.getDefaultInstance()) return this;
      if (mappersBuilder_ == null) {
        if (!other.mappers_.isEmpty()) {
          if (mappers_.isEmpty()) {
            mappers_ = other.mappers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMappersIsMutable();
            mappers_.addAll(other.mappers_);
          }
          onChanged();
        }
      } else {
        if (!other.mappers_.isEmpty()) {
          if (mappersBuilder_.isEmpty()) {
            mappersBuilder_.dispose();
            mappersBuilder_ = null;
            mappers_ = other.mappers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            mappersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMappersFieldBuilder() : null;
          } else {
            mappersBuilder_.addAllMessages(other.mappers_);
          }
        }
      }
      if (other.hasBodyFormat()) {
        mergeBodyFormat(other.getBodyFormat());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper> mappers_ =
      java.util.Collections.emptyList();
    private void ensureMappersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        mappers_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper>(mappers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder> mappersBuilder_;

    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper> getMappersList() {
      if (mappersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(mappers_);
      } else {
        return mappersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public int getMappersCount() {
      if (mappersBuilder_ == null) {
        return mappers_.size();
      } else {
        return mappersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper getMappers(int index) {
      if (mappersBuilder_ == null) {
        return mappers_.get(index);
      } else {
        return mappersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder setMappers(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper value) {
      if (mappersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMappersIsMutable();
        mappers_.set(index, value);
        onChanged();
      } else {
        mappersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder setMappers(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder builderForValue) {
      if (mappersBuilder_ == null) {
        ensureMappersIsMutable();
        mappers_.set(index, builderForValue.build());
        onChanged();
      } else {
        mappersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder addMappers(io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper value) {
      if (mappersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMappersIsMutable();
        mappers_.add(value);
        onChanged();
      } else {
        mappersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder addMappers(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper value) {
      if (mappersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMappersIsMutable();
        mappers_.add(index, value);
        onChanged();
      } else {
        mappersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder addMappers(
        io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder builderForValue) {
      if (mappersBuilder_ == null) {
        ensureMappersIsMutable();
        mappers_.add(builderForValue.build());
        onChanged();
      } else {
        mappersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder addMappers(
        int index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder builderForValue) {
      if (mappersBuilder_ == null) {
        ensureMappersIsMutable();
        mappers_.add(index, builderForValue.build());
        onChanged();
      } else {
        mappersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder addAllMappers(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper> values) {
      if (mappersBuilder_ == null) {
        ensureMappersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, mappers_);
        onChanged();
      } else {
        mappersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder clearMappers() {
      if (mappersBuilder_ == null) {
        mappers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        mappersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public Builder removeMappers(int index) {
      if (mappersBuilder_ == null) {
        ensureMappersIsMutable();
        mappers_.remove(index);
        onChanged();
      } else {
        mappersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder getMappersBuilder(
        int index) {
      return getMappersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder getMappersOrBuilder(
        int index) {
      if (mappersBuilder_ == null) {
        return mappers_.get(index);  } else {
        return mappersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder> 
         getMappersOrBuilderList() {
      if (mappersBuilder_ != null) {
        return mappersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(mappers_);
      }
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder addMappersBuilder() {
      return getMappersFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder addMappersBuilder(
        int index) {
      return getMappersFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.getDefaultInstance());
    }
    /**
     * <pre>
     * Configuration of list of mappers which allows to filter and change local response.
     * The mappers will be checked by the specified order until one is matched.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder> 
         getMappersBuilderList() {
      return getMappersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder> 
        getMappersFieldBuilder() {
      if (mappersBuilder_ == null) {
        mappersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper.Builder, io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder>(
                mappers_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        mappers_ = null;
      }
      return mappersBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString bodyFormat_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder> bodyFormatBuilder_;
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     * @return Whether the bodyFormat field is set.
     */
    public boolean hasBodyFormat() {
      return bodyFormatBuilder_ != null || bodyFormat_ != null;
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     * @return The bodyFormat.
     */
    public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getBodyFormat() {
      if (bodyFormatBuilder_ == null) {
        return bodyFormat_ == null ? io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.getDefaultInstance() : bodyFormat_;
      } else {
        return bodyFormatBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    public Builder setBodyFormat(io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString value) {
      if (bodyFormatBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        bodyFormat_ = value;
        onChanged();
      } else {
        bodyFormatBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    public Builder setBodyFormat(
        io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder builderForValue) {
      if (bodyFormatBuilder_ == null) {
        bodyFormat_ = builderForValue.build();
        onChanged();
      } else {
        bodyFormatBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    public Builder mergeBodyFormat(io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString value) {
      if (bodyFormatBuilder_ == null) {
        if (bodyFormat_ != null) {
          bodyFormat_ =
            io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.newBuilder(bodyFormat_).mergeFrom(value).buildPartial();
        } else {
          bodyFormat_ = value;
        }
        onChanged();
      } else {
        bodyFormatBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    public Builder clearBodyFormat() {
      if (bodyFormatBuilder_ == null) {
        bodyFormat_ = null;
        onChanged();
      } else {
        bodyFormat_ = null;
        bodyFormatBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder getBodyFormatBuilder() {
      
      onChanged();
      return getBodyFormatFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder getBodyFormatOrBuilder() {
      if (bodyFormatBuilder_ != null) {
        return bodyFormatBuilder_.getMessageOrBuilder();
      } else {
        return bodyFormat_ == null ?
            io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.getDefaultInstance() : bodyFormat_;
      }
    }
    /**
     * <pre>
     * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
     * and to specify response content type as one of: plain/text or application/json.
     * Example one: "plain/text" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
     * The following response body in "plain/text" format will be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: text
     *   upstream connect error:503:path=/foo
     * Example two: "application/json" ``body_format``.
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *     path: "%REQ(:path)%"
     * The following response body in "application/json" format would be generated for a request with
     * local reply body of "upstream connection error", response_code=503 and path=/foo.
     * .. code-block:: json
     *  {
     *    "status": 503,
     *    "message": "upstream connection error",
     *    "path": "/foo"
     *  }
     * </pre>
     *
     * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder> 
        getBodyFormatFieldBuilder() {
      if (bodyFormatBuilder_ == null) {
        bodyFormatBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString.Builder, io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder>(
                getBodyFormat(),
                getParentForChildren(),
                isClean());
        bodyFormat_ = null;
      }
      return bodyFormatBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)
  private static final io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LocalReplyConfig>
      PARSER = new com.google.protobuf.AbstractParser<LocalReplyConfig>() {
    @java.lang.Override
    public LocalReplyConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LocalReplyConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LocalReplyConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LocalReplyConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

