// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto

package io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3;

/**
 * <pre>
 * Per route Configuration for the dynamic forward proxy HTTP filter.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig}
 */
public final class PerRouteConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig)
    PerRouteConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PerRouteConfig.newBuilder() to construct.
  private PerRouteConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PerRouteConfig() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PerRouteConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PerRouteConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            hostRewriteSpecifierCase_ = 1;
            hostRewriteSpecifier_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            hostRewriteSpecifierCase_ = 2;
            hostRewriteSpecifier_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.DynamicForwardProxyProto.internal_static_envoy_extensions_filters_http_dynamic_forward_proxy_v3_PerRouteConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.DynamicForwardProxyProto.internal_static_envoy_extensions_filters_http_dynamic_forward_proxy_v3_PerRouteConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.class, io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.Builder.class);
  }

  private int hostRewriteSpecifierCase_ = 0;
  private java.lang.Object hostRewriteSpecifier_;
  public enum HostRewriteSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    HOST_REWRITE_LITERAL(1),
    HOST_REWRITE_HEADER(2),
    HOSTREWRITESPECIFIER_NOT_SET(0);
    private final int value;
    private HostRewriteSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HostRewriteSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static HostRewriteSpecifierCase forNumber(int value) {
      switch (value) {
        case 1: return HOST_REWRITE_LITERAL;
        case 2: return HOST_REWRITE_HEADER;
        case 0: return HOSTREWRITESPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public HostRewriteSpecifierCase
  getHostRewriteSpecifierCase() {
    return HostRewriteSpecifierCase.forNumber(
        hostRewriteSpecifierCase_);
  }

  public static final int HOST_REWRITE_LITERAL_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Indicates that before DNS lookup, the host header will be swapped with
   * this value. If not set or empty, the original host header value
   * will be used and no rewrite will happen.
   * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
   * value set here would be used for DNS lookups whereas the value set in the HCM would be used
   * for host header forwarding which is not the desired outcome.
   * </pre>
   *
   * <code>string host_rewrite_literal = 1;</code>
   * @return Whether the hostRewriteLiteral field is set.
   */
  public boolean hasHostRewriteLiteral() {
    return hostRewriteSpecifierCase_ == 1;
  }
  /**
   * <pre>
   * Indicates that before DNS lookup, the host header will be swapped with
   * this value. If not set or empty, the original host header value
   * will be used and no rewrite will happen.
   * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
   * value set here would be used for DNS lookups whereas the value set in the HCM would be used
   * for host header forwarding which is not the desired outcome.
   * </pre>
   *
   * <code>string host_rewrite_literal = 1;</code>
   * @return The hostRewriteLiteral.
   */
  public java.lang.String getHostRewriteLiteral() {
    java.lang.Object ref = "";
    if (hostRewriteSpecifierCase_ == 1) {
      ref = hostRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (hostRewriteSpecifierCase_ == 1) {
        hostRewriteSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Indicates that before DNS lookup, the host header will be swapped with
   * this value. If not set or empty, the original host header value
   * will be used and no rewrite will happen.
   * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
   * value set here would be used for DNS lookups whereas the value set in the HCM would be used
   * for host header forwarding which is not the desired outcome.
   * </pre>
   *
   * <code>string host_rewrite_literal = 1;</code>
   * @return The bytes for hostRewriteLiteral.
   */
  public com.google.protobuf.ByteString
      getHostRewriteLiteralBytes() {
    java.lang.Object ref = "";
    if (hostRewriteSpecifierCase_ == 1) {
      ref = hostRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (hostRewriteSpecifierCase_ == 1) {
        hostRewriteSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HOST_REWRITE_HEADER_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Indicates that before DNS lookup, the host header will be swapped with
   * the value of this header. If not set or empty, the original host header
   * value will be used and no rewrite will happen.
   * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
   * given that the value set here would be used for DNS lookups whereas the value set in the HCM
   * would be used for host header forwarding which is not the desired outcome.
   * .. note::
   *   If the header appears multiple times only the first value is used.
   * </pre>
   *
   * <code>string host_rewrite_header = 2;</code>
   * @return Whether the hostRewriteHeader field is set.
   */
  public boolean hasHostRewriteHeader() {
    return hostRewriteSpecifierCase_ == 2;
  }
  /**
   * <pre>
   * Indicates that before DNS lookup, the host header will be swapped with
   * the value of this header. If not set or empty, the original host header
   * value will be used and no rewrite will happen.
   * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
   * given that the value set here would be used for DNS lookups whereas the value set in the HCM
   * would be used for host header forwarding which is not the desired outcome.
   * .. note::
   *   If the header appears multiple times only the first value is used.
   * </pre>
   *
   * <code>string host_rewrite_header = 2;</code>
   * @return The hostRewriteHeader.
   */
  public java.lang.String getHostRewriteHeader() {
    java.lang.Object ref = "";
    if (hostRewriteSpecifierCase_ == 2) {
      ref = hostRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (hostRewriteSpecifierCase_ == 2) {
        hostRewriteSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Indicates that before DNS lookup, the host header will be swapped with
   * the value of this header. If not set or empty, the original host header
   * value will be used and no rewrite will happen.
   * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
   * given that the value set here would be used for DNS lookups whereas the value set in the HCM
   * would be used for host header forwarding which is not the desired outcome.
   * .. note::
   *   If the header appears multiple times only the first value is used.
   * </pre>
   *
   * <code>string host_rewrite_header = 2;</code>
   * @return The bytes for hostRewriteHeader.
   */
  public com.google.protobuf.ByteString
      getHostRewriteHeaderBytes() {
    java.lang.Object ref = "";
    if (hostRewriteSpecifierCase_ == 2) {
      ref = hostRewriteSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (hostRewriteSpecifierCase_ == 2) {
        hostRewriteSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hostRewriteSpecifierCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, hostRewriteSpecifier_);
    }
    if (hostRewriteSpecifierCase_ == 2) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, hostRewriteSpecifier_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (hostRewriteSpecifierCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, hostRewriteSpecifier_);
    }
    if (hostRewriteSpecifierCase_ == 2) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, hostRewriteSpecifier_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig other = (io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig) obj;

    if (!getHostRewriteSpecifierCase().equals(other.getHostRewriteSpecifierCase())) return false;
    switch (hostRewriteSpecifierCase_) {
      case 1:
        if (!getHostRewriteLiteral()
            .equals(other.getHostRewriteLiteral())) return false;
        break;
      case 2:
        if (!getHostRewriteHeader()
            .equals(other.getHostRewriteHeader())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (hostRewriteSpecifierCase_) {
      case 1:
        hash = (37 * hash) + HOST_REWRITE_LITERAL_FIELD_NUMBER;
        hash = (53 * hash) + getHostRewriteLiteral().hashCode();
        break;
      case 2:
        hash = (37 * hash) + HOST_REWRITE_HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHostRewriteHeader().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Per route Configuration for the dynamic forward proxy HTTP filter.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig)
      io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.DynamicForwardProxyProto.internal_static_envoy_extensions_filters_http_dynamic_forward_proxy_v3_PerRouteConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.DynamicForwardProxyProto.internal_static_envoy_extensions_filters_http_dynamic_forward_proxy_v3_PerRouteConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.class, io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      hostRewriteSpecifierCase_ = 0;
      hostRewriteSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.DynamicForwardProxyProto.internal_static_envoy_extensions_filters_http_dynamic_forward_proxy_v3_PerRouteConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig build() {
      io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig result = new io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig(this);
      if (hostRewriteSpecifierCase_ == 1) {
        result.hostRewriteSpecifier_ = hostRewriteSpecifier_;
      }
      if (hostRewriteSpecifierCase_ == 2) {
        result.hostRewriteSpecifier_ = hostRewriteSpecifier_;
      }
      result.hostRewriteSpecifierCase_ = hostRewriteSpecifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig.getDefaultInstance()) return this;
      switch (other.getHostRewriteSpecifierCase()) {
        case HOST_REWRITE_LITERAL: {
          hostRewriteSpecifierCase_ = 1;
          hostRewriteSpecifier_ = other.hostRewriteSpecifier_;
          onChanged();
          break;
        }
        case HOST_REWRITE_HEADER: {
          hostRewriteSpecifierCase_ = 2;
          hostRewriteSpecifier_ = other.hostRewriteSpecifier_;
          onChanged();
          break;
        }
        case HOSTREWRITESPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int hostRewriteSpecifierCase_ = 0;
    private java.lang.Object hostRewriteSpecifier_;
    public HostRewriteSpecifierCase
        getHostRewriteSpecifierCase() {
      return HostRewriteSpecifierCase.forNumber(
          hostRewriteSpecifierCase_);
    }

    public Builder clearHostRewriteSpecifier() {
      hostRewriteSpecifierCase_ = 0;
      hostRewriteSpecifier_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     * </pre>
     *
     * <code>string host_rewrite_literal = 1;</code>
     * @return Whether the hostRewriteLiteral field is set.
     */
    @java.lang.Override
    public boolean hasHostRewriteLiteral() {
      return hostRewriteSpecifierCase_ == 1;
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     * </pre>
     *
     * <code>string host_rewrite_literal = 1;</code>
     * @return The hostRewriteLiteral.
     */
    @java.lang.Override
    public java.lang.String getHostRewriteLiteral() {
      java.lang.Object ref = "";
      if (hostRewriteSpecifierCase_ == 1) {
        ref = hostRewriteSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (hostRewriteSpecifierCase_ == 1) {
          hostRewriteSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     * </pre>
     *
     * <code>string host_rewrite_literal = 1;</code>
     * @return The bytes for hostRewriteLiteral.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHostRewriteLiteralBytes() {
      java.lang.Object ref = "";
      if (hostRewriteSpecifierCase_ == 1) {
        ref = hostRewriteSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (hostRewriteSpecifierCase_ == 1) {
          hostRewriteSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     * </pre>
     *
     * <code>string host_rewrite_literal = 1;</code>
     * @param value The hostRewriteLiteral to set.
     * @return This builder for chaining.
     */
    public Builder setHostRewriteLiteral(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  hostRewriteSpecifierCase_ = 1;
      hostRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     * </pre>
     *
     * <code>string host_rewrite_literal = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHostRewriteLiteral() {
      if (hostRewriteSpecifierCase_ == 1) {
        hostRewriteSpecifierCase_ = 0;
        hostRewriteSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite &lt;envoy_api_field_config.route.v3.RouteAction.host_rewrite_literal&gt;` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     * </pre>
     *
     * <code>string host_rewrite_literal = 1;</code>
     * @param value The bytes for hostRewriteLiteral to set.
     * @return This builder for chaining.
     */
    public Builder setHostRewriteLiteralBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      hostRewriteSpecifierCase_ = 1;
      hostRewriteSpecifier_ = value;
      onChanged();
      return this;
    }

    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     * .. note::
     *   If the header appears multiple times only the first value is used.
     * </pre>
     *
     * <code>string host_rewrite_header = 2;</code>
     * @return Whether the hostRewriteHeader field is set.
     */
    @java.lang.Override
    public boolean hasHostRewriteHeader() {
      return hostRewriteSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     * .. note::
     *   If the header appears multiple times only the first value is used.
     * </pre>
     *
     * <code>string host_rewrite_header = 2;</code>
     * @return The hostRewriteHeader.
     */
    @java.lang.Override
    public java.lang.String getHostRewriteHeader() {
      java.lang.Object ref = "";
      if (hostRewriteSpecifierCase_ == 2) {
        ref = hostRewriteSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (hostRewriteSpecifierCase_ == 2) {
          hostRewriteSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     * .. note::
     *   If the header appears multiple times only the first value is used.
     * </pre>
     *
     * <code>string host_rewrite_header = 2;</code>
     * @return The bytes for hostRewriteHeader.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHostRewriteHeaderBytes() {
      java.lang.Object ref = "";
      if (hostRewriteSpecifierCase_ == 2) {
        ref = hostRewriteSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (hostRewriteSpecifierCase_ == 2) {
          hostRewriteSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     * .. note::
     *   If the header appears multiple times only the first value is used.
     * </pre>
     *
     * <code>string host_rewrite_header = 2;</code>
     * @param value The hostRewriteHeader to set.
     * @return This builder for chaining.
     */
    public Builder setHostRewriteHeader(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  hostRewriteSpecifierCase_ = 2;
      hostRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     * .. note::
     *   If the header appears multiple times only the first value is used.
     * </pre>
     *
     * <code>string host_rewrite_header = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearHostRewriteHeader() {
      if (hostRewriteSpecifierCase_ == 2) {
        hostRewriteSpecifierCase_ = 0;
        hostRewriteSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header &lt;envoy_api_field_config.route.v3.RouteAction.auto_host_rewrite&gt;`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     * .. note::
     *   If the header appears multiple times only the first value is used.
     * </pre>
     *
     * <code>string host_rewrite_header = 2;</code>
     * @param value The bytes for hostRewriteHeader to set.
     * @return This builder for chaining.
     */
    public Builder setHostRewriteHeaderBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      hostRewriteSpecifierCase_ = 2;
      hostRewriteSpecifier_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig)
  private static final io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PerRouteConfig>
      PARSER = new com.google.protobuf.AbstractParser<PerRouteConfig>() {
    @java.lang.Override
    public PerRouteConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PerRouteConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PerRouteConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PerRouteConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

