// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto

package io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3;

public interface LocalReplyConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper> 
      getMappersList();
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper getMappers(int index);
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  int getMappersCount();
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder> 
      getMappersOrBuilderList();
  /**
   * <pre>
   * Configuration of list of mappers which allows to filter and change local response.
   * The mappers will be checked by the specified order until one is matched.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapperOrBuilder getMappersOrBuilder(
      int index);

  /**
   * <pre>
   * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * and to specify response content type as one of: plain/text or application/json.
   * Example one: "plain/text" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * The following response body in "plain/text" format will be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Example two: "application/json" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   *     path: "%REQ(:path)%"
   * The following response body in "application/json" format would be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: json
   *  {
   *    "status": 503,
   *    "message": "upstream connection error",
   *    "path": "/foo"
   *  }
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
   * @return Whether the bodyFormat field is set.
   */
  boolean hasBodyFormat();
  /**
   * <pre>
   * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * and to specify response content type as one of: plain/text or application/json.
   * Example one: "plain/text" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * The following response body in "plain/text" format will be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Example two: "application/json" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   *     path: "%REQ(:path)%"
   * The following response body in "application/json" format would be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: json
   *  {
   *    "status": 503,
   *    "message": "upstream connection error",
   *    "path": "/foo"
   *  }
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
   * @return The bodyFormat.
   */
  io.envoyproxy.envoy.config.core.v3.SubstitutionFormatString getBodyFormat();
  /**
   * <pre>
   * The configuration to form response body from the :ref:`command operators &lt;config_access_log_command_operators&gt;`
   * and to specify response content type as one of: plain/text or application/json.
   * Example one: "plain/text" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%&#92;n"
   * The following response body in "plain/text" format will be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: text
   *   upstream connect error:503:path=/foo
   * Example two: "application/json" ``body_format``.
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *   json_format:
   *     status: "%RESPONSE_CODE%"
   *     message: "%LOCAL_REPLY_BODY%"
   *     path: "%REQ(:path)%"
   * The following response body in "application/json" format would be generated for a request with
   * local reply body of "upstream connection error", response_code=503 and path=/foo.
   * .. code-block:: json
   *  {
   *    "status": 503,
   *    "message": "upstream connection error",
   *    "path": "/foo"
   *  }
   * </pre>
   *
   * <code>.envoy.config.core.v3.SubstitutionFormatString body_format = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.SubstitutionFormatStringOrBuilder getBodyFormatOrBuilder();
}
