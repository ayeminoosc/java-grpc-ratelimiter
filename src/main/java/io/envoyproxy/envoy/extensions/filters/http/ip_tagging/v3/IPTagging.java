// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto

package io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3;

/**
 * Protobuf type {@code envoy.extensions.filters.http.ip_tagging.v3.IPTagging}
 */
public final class IPTagging extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.ip_tagging.v3.IPTagging)
    IPTaggingOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IPTagging.newBuilder() to construct.
  private IPTagging(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IPTagging() {
    requestType_ = 0;
    ipTags_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new IPTagging();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private IPTagging(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            requestType_ = rawValue;
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              ipTags_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag>();
              mutable_bitField0_ |= 0x00000001;
            }
            ipTags_.add(
                input.readMessage(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        ipTags_ = java.util.Collections.unmodifiableList(ipTags_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.class, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.Builder.class);
  }

  /**
   * <pre>
   * The type of requests the filter should apply to. The supported types
   * are internal, external or both. The
   * :ref:`x-forwarded-for&lt;config_http_conn_man_headers_x-forwarded-for_internal_origin&gt;` header is
   * used to determine if a request is internal and will result in
   * :ref:`x-envoy-internal&lt;config_http_conn_man_headers_x-envoy-internal&gt;`
   * being set. The filter defaults to both, and it will apply to all request types.
   * </pre>
   *
   * Protobuf enum {@code envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType}
   */
  public enum RequestType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Both external and internal requests will be tagged. This is the default value.
     * </pre>
     *
     * <code>BOTH = 0;</code>
     */
    BOTH(0),
    /**
     * <pre>
     * Only internal requests will be tagged.
     * </pre>
     *
     * <code>INTERNAL = 1;</code>
     */
    INTERNAL(1),
    /**
     * <pre>
     * Only external requests will be tagged.
     * </pre>
     *
     * <code>EXTERNAL = 2;</code>
     */
    EXTERNAL(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Both external and internal requests will be tagged. This is the default value.
     * </pre>
     *
     * <code>BOTH = 0;</code>
     */
    public static final int BOTH_VALUE = 0;
    /**
     * <pre>
     * Only internal requests will be tagged.
     * </pre>
     *
     * <code>INTERNAL = 1;</code>
     */
    public static final int INTERNAL_VALUE = 1;
    /**
     * <pre>
     * Only external requests will be tagged.
     * </pre>
     *
     * <code>EXTERNAL = 2;</code>
     */
    public static final int EXTERNAL_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RequestType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RequestType forNumber(int value) {
      switch (value) {
        case 0: return BOTH;
        case 1: return INTERNAL;
        case 2: return EXTERNAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RequestType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RequestType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RequestType>() {
            public RequestType findValueByNumber(int number) {
              return RequestType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.getDescriptor().getEnumTypes().get(0);
    }

    private static final RequestType[] VALUES = values();

    public static RequestType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RequestType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType)
  }

  public interface IPTagOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the IP tag name to apply.
     * </pre>
     *
     * <code>string ip_tag_name = 1;</code>
     * @return The ipTagName.
     */
    java.lang.String getIpTagName();
    /**
     * <pre>
     * Specifies the IP tag name to apply.
     * </pre>
     *
     * <code>string ip_tag_name = 1;</code>
     * @return The bytes for ipTagName.
     */
    com.google.protobuf.ByteString
        getIpTagNameBytes();

    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> 
        getIpListList();
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    io.envoyproxy.envoy.config.core.v3.CidrRange getIpList(int index);
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    int getIpListCount();
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
        getIpListOrBuilderList();
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getIpListOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Supplies the IP tag name and the IP address subnets.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag}
   */
  public static final class IPTag extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)
      IPTagOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IPTag.newBuilder() to construct.
    private IPTag(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IPTag() {
      ipTagName_ = "";
      ipList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IPTag();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IPTag(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              ipTagName_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                ipList_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.CidrRange>();
                mutable_bitField0_ |= 0x00000001;
              }
              ipList_.add(
                  input.readMessage(io.envoyproxy.envoy.config.core.v3.CidrRange.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          ipList_ = java.util.Collections.unmodifiableList(ipList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_IPTag_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_IPTag_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.class, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder.class);
    }

    public static final int IP_TAG_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object ipTagName_;
    /**
     * <pre>
     * Specifies the IP tag name to apply.
     * </pre>
     *
     * <code>string ip_tag_name = 1;</code>
     * @return The ipTagName.
     */
    @java.lang.Override
    public java.lang.String getIpTagName() {
      java.lang.Object ref = ipTagName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ipTagName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the IP tag name to apply.
     * </pre>
     *
     * <code>string ip_tag_name = 1;</code>
     * @return The bytes for ipTagName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIpTagNameBytes() {
      java.lang.Object ref = ipTagName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ipTagName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IP_LIST_FIELD_NUMBER = 2;
    private java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> ipList_;
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    @java.lang.Override
    public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> getIpListList() {
      return ipList_;
    }
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
        getIpListOrBuilderList() {
      return ipList_;
    }
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    @java.lang.Override
    public int getIpListCount() {
      return ipList_.size();
    }
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.CidrRange getIpList(int index) {
      return ipList_.get(index);
    }
    /**
     * <pre>
     * A list of IP address subnets that will be tagged with
     * ip_tag_name. Both IPv4 and IPv6 are supported.
     * </pre>
     *
     * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getIpListOrBuilder(
        int index) {
      return ipList_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getIpTagNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, ipTagName_);
      }
      for (int i = 0; i < ipList_.size(); i++) {
        output.writeMessage(2, ipList_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getIpTagNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, ipTagName_);
      }
      for (int i = 0; i < ipList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, ipList_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag other = (io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag) obj;

      if (!getIpTagName()
          .equals(other.getIpTagName())) return false;
      if (!getIpListList()
          .equals(other.getIpListList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IP_TAG_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getIpTagName().hashCode();
      if (getIpListCount() > 0) {
        hash = (37 * hash) + IP_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getIpListList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Supplies the IP tag name and the IP address subnets.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_IPTag_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_IPTag_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.class, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getIpListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        ipTagName_ = "";

        if (ipListBuilder_ == null) {
          ipList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ipListBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_IPTag_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag build() {
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag buildPartial() {
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag result = new io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag(this);
        int from_bitField0_ = bitField0_;
        result.ipTagName_ = ipTagName_;
        if (ipListBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            ipList_ = java.util.Collections.unmodifiableList(ipList_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.ipList_ = ipList_;
        } else {
          result.ipList_ = ipListBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag other) {
        if (other == io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.getDefaultInstance()) return this;
        if (!other.getIpTagName().isEmpty()) {
          ipTagName_ = other.ipTagName_;
          onChanged();
        }
        if (ipListBuilder_ == null) {
          if (!other.ipList_.isEmpty()) {
            if (ipList_.isEmpty()) {
              ipList_ = other.ipList_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureIpListIsMutable();
              ipList_.addAll(other.ipList_);
            }
            onChanged();
          }
        } else {
          if (!other.ipList_.isEmpty()) {
            if (ipListBuilder_.isEmpty()) {
              ipListBuilder_.dispose();
              ipListBuilder_ = null;
              ipList_ = other.ipList_;
              bitField0_ = (bitField0_ & ~0x00000001);
              ipListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getIpListFieldBuilder() : null;
            } else {
              ipListBuilder_.addAllMessages(other.ipList_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object ipTagName_ = "";
      /**
       * <pre>
       * Specifies the IP tag name to apply.
       * </pre>
       *
       * <code>string ip_tag_name = 1;</code>
       * @return The ipTagName.
       */
      public java.lang.String getIpTagName() {
        java.lang.Object ref = ipTagName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ipTagName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the IP tag name to apply.
       * </pre>
       *
       * <code>string ip_tag_name = 1;</code>
       * @return The bytes for ipTagName.
       */
      public com.google.protobuf.ByteString
          getIpTagNameBytes() {
        java.lang.Object ref = ipTagName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ipTagName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the IP tag name to apply.
       * </pre>
       *
       * <code>string ip_tag_name = 1;</code>
       * @param value The ipTagName to set.
       * @return This builder for chaining.
       */
      public Builder setIpTagName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        ipTagName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the IP tag name to apply.
       * </pre>
       *
       * <code>string ip_tag_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIpTagName() {
        
        ipTagName_ = getDefaultInstance().getIpTagName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the IP tag name to apply.
       * </pre>
       *
       * <code>string ip_tag_name = 1;</code>
       * @param value The bytes for ipTagName to set.
       * @return This builder for chaining.
       */
      public Builder setIpTagNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        ipTagName_ = value;
        onChanged();
        return this;
      }

      private java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> ipList_ =
        java.util.Collections.emptyList();
      private void ensureIpListIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          ipList_ = new java.util.ArrayList<io.envoyproxy.envoy.config.core.v3.CidrRange>(ipList_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> ipListBuilder_;

      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange> getIpListList() {
        if (ipListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ipList_);
        } else {
          return ipListBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public int getIpListCount() {
        if (ipListBuilder_ == null) {
          return ipList_.size();
        } else {
          return ipListBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.CidrRange getIpList(int index) {
        if (ipListBuilder_ == null) {
          return ipList_.get(index);
        } else {
          return ipListBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder setIpList(
          int index, io.envoyproxy.envoy.config.core.v3.CidrRange value) {
        if (ipListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIpListIsMutable();
          ipList_.set(index, value);
          onChanged();
        } else {
          ipListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder setIpList(
          int index, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
        if (ipListBuilder_ == null) {
          ensureIpListIsMutable();
          ipList_.set(index, builderForValue.build());
          onChanged();
        } else {
          ipListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder addIpList(io.envoyproxy.envoy.config.core.v3.CidrRange value) {
        if (ipListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIpListIsMutable();
          ipList_.add(value);
          onChanged();
        } else {
          ipListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder addIpList(
          int index, io.envoyproxy.envoy.config.core.v3.CidrRange value) {
        if (ipListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureIpListIsMutable();
          ipList_.add(index, value);
          onChanged();
        } else {
          ipListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder addIpList(
          io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
        if (ipListBuilder_ == null) {
          ensureIpListIsMutable();
          ipList_.add(builderForValue.build());
          onChanged();
        } else {
          ipListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder addIpList(
          int index, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder builderForValue) {
        if (ipListBuilder_ == null) {
          ensureIpListIsMutable();
          ipList_.add(index, builderForValue.build());
          onChanged();
        } else {
          ipListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder addAllIpList(
          java.lang.Iterable<? extends io.envoyproxy.envoy.config.core.v3.CidrRange> values) {
        if (ipListBuilder_ == null) {
          ensureIpListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ipList_);
          onChanged();
        } else {
          ipListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder clearIpList() {
        if (ipListBuilder_ == null) {
          ipList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          ipListBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public Builder removeIpList(int index) {
        if (ipListBuilder_ == null) {
          ensureIpListIsMutable();
          ipList_.remove(index);
          onChanged();
        } else {
          ipListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder getIpListBuilder(
          int index) {
        return getIpListFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder getIpListOrBuilder(
          int index) {
        if (ipListBuilder_ == null) {
          return ipList_.get(index);  } else {
          return ipListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public java.util.List<? extends io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
           getIpListOrBuilderList() {
        if (ipListBuilder_ != null) {
          return ipListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ipList_);
        }
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder addIpListBuilder() {
        return getIpListFieldBuilder().addBuilder(
            io.envoyproxy.envoy.config.core.v3.CidrRange.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.CidrRange.Builder addIpListBuilder(
          int index) {
        return getIpListFieldBuilder().addBuilder(
            index, io.envoyproxy.envoy.config.core.v3.CidrRange.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of IP address subnets that will be tagged with
       * ip_tag_name. Both IPv4 and IPv6 are supported.
       * </pre>
       *
       * <code>repeated .envoy.config.core.v3.CidrRange ip_list = 2;</code>
       */
      public java.util.List<io.envoyproxy.envoy.config.core.v3.CidrRange.Builder> 
           getIpListBuilderList() {
        return getIpListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder> 
          getIpListFieldBuilder() {
        if (ipListBuilder_ == null) {
          ipListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.CidrRange, io.envoyproxy.envoy.config.core.v3.CidrRange.Builder, io.envoyproxy.envoy.config.core.v3.CidrRangeOrBuilder>(
                  ipList_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          ipList_ = null;
        }
        return ipListBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag)
    private static final io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag();
    }

    public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IPTag>
        PARSER = new com.google.protobuf.AbstractParser<IPTag>() {
      @java.lang.Override
      public IPTag parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IPTag(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IPTag> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IPTag> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int REQUEST_TYPE_FIELD_NUMBER = 1;
  private int requestType_;
  /**
   * <pre>
   * The type of request the filter should apply to.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for requestType.
   */
  @java.lang.Override public int getRequestTypeValue() {
    return requestType_;
  }
  /**
   * <pre>
   * The type of request the filter should apply to.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
   * @return The requestType.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType getRequestType() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType result = io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.valueOf(requestType_);
    return result == null ? io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.UNRECOGNIZED : result;
  }

  public static final int IP_TAGS_FIELD_NUMBER = 4;
  private java.util.List<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag> ipTags_;
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag> getIpTagsList() {
    return ipTags_;
  }
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder> 
      getIpTagsOrBuilderList() {
    return ipTags_;
  }
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public int getIpTagsCount() {
    return ipTags_.size();
  }
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag getIpTags(int index) {
    return ipTags_.get(index);
  }
  /**
   * <pre>
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder getIpTagsOrBuilder(
      int index) {
    return ipTags_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (requestType_ != io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.BOTH.getNumber()) {
      output.writeEnum(1, requestType_);
    }
    for (int i = 0; i < ipTags_.size(); i++) {
      output.writeMessage(4, ipTags_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (requestType_ != io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.BOTH.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, requestType_);
    }
    for (int i = 0; i < ipTags_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, ipTags_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging other = (io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging) obj;

    if (requestType_ != other.requestType_) return false;
    if (!getIpTagsList()
        .equals(other.getIpTagsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REQUEST_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + requestType_;
    if (getIpTagsCount() > 0) {
      hash = (37 * hash) + IP_TAGS_FIELD_NUMBER;
      hash = (53 * hash) + getIpTagsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.extensions.filters.http.ip_tagging.v3.IPTagging}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.ip_tagging.v3.IPTagging)
      io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTaggingOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.class, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getIpTagsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      requestType_ = 0;

      if (ipTagsBuilder_ == null) {
        ipTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        ipTagsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IpTaggingProto.internal_static_envoy_extensions_filters_http_ip_tagging_v3_IPTagging_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging build() {
      io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging result = new io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging(this);
      int from_bitField0_ = bitField0_;
      result.requestType_ = requestType_;
      if (ipTagsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          ipTags_ = java.util.Collections.unmodifiableList(ipTags_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.ipTags_ = ipTags_;
      } else {
        result.ipTags_ = ipTagsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.getDefaultInstance()) return this;
      if (other.requestType_ != 0) {
        setRequestTypeValue(other.getRequestTypeValue());
      }
      if (ipTagsBuilder_ == null) {
        if (!other.ipTags_.isEmpty()) {
          if (ipTags_.isEmpty()) {
            ipTags_ = other.ipTags_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureIpTagsIsMutable();
            ipTags_.addAll(other.ipTags_);
          }
          onChanged();
        }
      } else {
        if (!other.ipTags_.isEmpty()) {
          if (ipTagsBuilder_.isEmpty()) {
            ipTagsBuilder_.dispose();
            ipTagsBuilder_ = null;
            ipTags_ = other.ipTags_;
            bitField0_ = (bitField0_ & ~0x00000001);
            ipTagsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getIpTagsFieldBuilder() : null;
          } else {
            ipTagsBuilder_.addAllMessages(other.ipTags_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int requestType_ = 0;
    /**
     * <pre>
     * The type of request the filter should apply to.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for requestType.
     */
    @java.lang.Override public int getRequestTypeValue() {
      return requestType_;
    }
    /**
     * <pre>
     * The type of request the filter should apply to.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for requestType to set.
     * @return This builder for chaining.
     */
    public Builder setRequestTypeValue(int value) {
      
      requestType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of request the filter should apply to.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
     * @return The requestType.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType getRequestType() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType result = io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.valueOf(requestType_);
      return result == null ? io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The type of request the filter should apply to.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
     * @param value The requestType to set.
     * @return This builder for chaining.
     */
    public Builder setRequestType(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      requestType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of request the filter should apply to.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.RequestType request_type = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestType() {
      
      requestType_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag> ipTags_ =
      java.util.Collections.emptyList();
    private void ensureIpTagsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        ipTags_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag>(ipTags_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder> ipTagsBuilder_;

    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag> getIpTagsList() {
      if (ipTagsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(ipTags_);
      } else {
        return ipTagsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public int getIpTagsCount() {
      if (ipTagsBuilder_ == null) {
        return ipTags_.size();
      } else {
        return ipTagsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag getIpTags(int index) {
      if (ipTagsBuilder_ == null) {
        return ipTags_.get(index);
      } else {
        return ipTagsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setIpTags(
        int index, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag value) {
      if (ipTagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIpTagsIsMutable();
        ipTags_.set(index, value);
        onChanged();
      } else {
        ipTagsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setIpTags(
        int index, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder builderForValue) {
      if (ipTagsBuilder_ == null) {
        ensureIpTagsIsMutable();
        ipTags_.set(index, builderForValue.build());
        onChanged();
      } else {
        ipTagsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder addIpTags(io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag value) {
      if (ipTagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIpTagsIsMutable();
        ipTags_.add(value);
        onChanged();
      } else {
        ipTagsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder addIpTags(
        int index, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag value) {
      if (ipTagsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureIpTagsIsMutable();
        ipTags_.add(index, value);
        onChanged();
      } else {
        ipTagsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder addIpTags(
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder builderForValue) {
      if (ipTagsBuilder_ == null) {
        ensureIpTagsIsMutable();
        ipTags_.add(builderForValue.build());
        onChanged();
      } else {
        ipTagsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder addIpTags(
        int index, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder builderForValue) {
      if (ipTagsBuilder_ == null) {
        ensureIpTagsIsMutable();
        ipTags_.add(index, builderForValue.build());
        onChanged();
      } else {
        ipTagsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllIpTags(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag> values) {
      if (ipTagsBuilder_ == null) {
        ensureIpTagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ipTags_);
        onChanged();
      } else {
        ipTagsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearIpTags() {
      if (ipTagsBuilder_ == null) {
        ipTags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        ipTagsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder removeIpTags(int index) {
      if (ipTagsBuilder_ == null) {
        ensureIpTagsIsMutable();
        ipTags_.remove(index);
        onChanged();
      } else {
        ipTagsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder getIpTagsBuilder(
        int index) {
      return getIpTagsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder getIpTagsOrBuilder(
        int index) {
      if (ipTagsBuilder_ == null) {
        return ipTags_.get(index);  } else {
        return ipTagsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder> 
         getIpTagsOrBuilderList() {
      if (ipTagsBuilder_ != null) {
        return ipTagsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(ipTags_);
      }
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder addIpTagsBuilder() {
      return getIpTagsFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.getDefaultInstance());
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder addIpTagsBuilder(
        int index) {
      return getIpTagsFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.getDefaultInstance());
    }
    /**
     * <pre>
     * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
     * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
     * The set of IP tags for the filter.
     * </pre>
     *
     * <code>repeated .envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag ip_tags = 4 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder> 
         getIpTagsBuilderList() {
      return getIpTagsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder> 
        getIpTagsFieldBuilder() {
      if (ipTagsBuilder_ == null) {
        ipTagsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag.Builder, io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTagOrBuilder>(
                ipTags_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        ipTags_ = null;
      }
      return ipTagsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.ip_tagging.v3.IPTagging)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.ip_tagging.v3.IPTagging)
  private static final io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IPTagging>
      PARSER = new com.google.protobuf.AbstractParser<IPTagging>() {
    @java.lang.Override
    public IPTagging parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new IPTagging(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<IPTagging> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IPTagging> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3.IPTagging getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

