// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/lua/v3/lua.proto

package io.envoyproxy.envoy.extensions.filters.http.lua.v3;

public interface LuaOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.lua.v3.Lua)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The Lua code that Envoy will execute. This can be a very small script that
   * further loads code from disk if desired. Note that if JSON configuration is used, the code must
   * be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
   * strings so complex scripts can be easily expressed inline in the configuration.
   * </pre>
   *
   * <code>string inline_code = 1 [(.validate.rules) = { ... }</code>
   * @return The inlineCode.
   */
  java.lang.String getInlineCode();
  /**
   * <pre>
   * The Lua code that Envoy will execute. This can be a very small script that
   * further loads code from disk if desired. Note that if JSON configuration is used, the code must
   * be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
   * strings so complex scripts can be easily expressed inline in the configuration.
   * </pre>
   *
   * <code>string inline_code = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for inlineCode.
   */
  com.google.protobuf.ByteString
      getInlineCodeBytes();

  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  int getSourceCodesCount();
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  boolean containsSourceCodes(
      java.lang.String key);
  /**
   * Use {@link #getSourceCodesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.core.v3.DataSource>
  getSourceCodes();
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */
  java.util.Map<java.lang.String, io.envoyproxy.envoy.config.core.v3.DataSource>
  getSourceCodesMap();
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */

  io.envoyproxy.envoy.config.core.v3.DataSource getSourceCodesOrDefault(
      java.lang.String key,
      io.envoyproxy.envoy.config.core.v3.DataSource defaultValue);
  /**
   * <pre>
   * Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
   * &lt;envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute&gt;`. The Lua source codes can be
   * loaded from inline string or local files.
   * Example:
   * .. code-block:: yaml
   *   source_codes:
   *     hello.lua:
   *       inline_string: |
   *         function envoy_on_response(response_handle)
   *           -- Do something.
   *         end
   *     world.lua:
   *       filename: /etc/lua/world.lua
   * </pre>
   *
   * <code>map&lt;string, .envoy.config.core.v3.DataSource&gt; source_codes = 2;</code>
   */

  io.envoyproxy.envoy.config.core.v3.DataSource getSourceCodesOrThrow(
      java.lang.String key);
}
