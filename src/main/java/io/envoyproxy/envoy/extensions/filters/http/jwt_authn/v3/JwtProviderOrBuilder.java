// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3;

public interface JwtProviderOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.jwt_authn.v3.JwtProvider)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
   * the JWT, usually a URL or an email address.
   * It is optional. If specified, it has to match the *iss* field in JWT.
   * If a JWT has *iss* field and this field is specified, they have to match, otherwise the
   * JWT *iss* field is not checked.
   * Note: *JwtRequirement* :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
   * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
   * are implemented differently than other *JwtRequirements*. Hence the usage of this field
   * is different as follows if *allow_missing* or *allow_missing_or_failed* is used:
   * * If a JWT has *iss* field, it needs to be specified by this field in one of *JwtProviders*.
   * * If a JWT doesn't have *iss* field, one of *JwtProviders* should fill this field empty.
   * * Multiple *JwtProviders* should not have same value in this field.
   * Example: https://securetoken.google.com
   * Example: 1234567-compute&#64;developer.gserviceaccount.com
   * </pre>
   *
   * <code>string issuer = 1;</code>
   * @return The issuer.
   */
  java.lang.String getIssuer();
  /**
   * <pre>
   * Specify the `principal &lt;https://tools.ietf.org/html/rfc7519#section-4.1.1&gt;`_ that issued
   * the JWT, usually a URL or an email address.
   * It is optional. If specified, it has to match the *iss* field in JWT.
   * If a JWT has *iss* field and this field is specified, they have to match, otherwise the
   * JWT *iss* field is not checked.
   * Note: *JwtRequirement* :ref:`allow_missing &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing&gt;`
   * and :ref:`allow_missing_or_failed &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtRequirement.allow_missing_or_failed&gt;`
   * are implemented differently than other *JwtRequirements*. Hence the usage of this field
   * is different as follows if *allow_missing* or *allow_missing_or_failed* is used:
   * * If a JWT has *iss* field, it needs to be specified by this field in one of *JwtProviders*.
   * * If a JWT doesn't have *iss* field, one of *JwtProviders* should fill this field empty.
   * * Multiple *JwtProviders* should not have same value in this field.
   * Example: https://securetoken.google.com
   * Example: 1234567-compute&#64;developer.gserviceaccount.com
   * </pre>
   *
   * <code>string issuer = 1;</code>
   * @return The bytes for issuer.
   */
  com.google.protobuf.ByteString
      getIssuerBytes();

  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @return A list containing the audiences.
   */
  java.util.List<java.lang.String>
      getAudiencesList();
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @return The count of audiences.
   */
  int getAudiencesCount();
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @param index The index of the element to return.
   * @return The audiences at the given index.
   */
  java.lang.String getAudiences(int index);
  /**
   * <pre>
   * The list of JWT `audiences &lt;https://tools.ietf.org/html/rfc7519#section-4.1.3&gt;`_ are
   * allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
   * will not check audiences in the token.
   * Example:
   * .. code-block:: yaml
   *     audiences:
   *     - bookstore_android.apps.googleusercontent.com
   *     - bookstore_web.apps.googleusercontent.com
   * </pre>
   *
   * <code>repeated string audiences = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the audiences at the given index.
   */
  com.google.protobuf.ByteString
      getAudiencesBytes(int index);

  /**
   * <pre>
   * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
   * URI and how the fetched JWKS should be cached.
   * Example:
   * .. code-block:: yaml
   *    remote_jwks:
   *      http_uri:
   *        uri: https://www.googleapis.com/oauth2/v1/certs
   *        cluster: jwt.www.googleapis.com|443
   *        timeout: 1s
   *      cache_duration:
   *        seconds: 300
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
   * @return Whether the remoteJwks field is set.
   */
  boolean hasRemoteJwks();
  /**
   * <pre>
   * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
   * URI and how the fetched JWKS should be cached.
   * Example:
   * .. code-block:: yaml
   *    remote_jwks:
   *      http_uri:
   *        uri: https://www.googleapis.com/oauth2/v1/certs
   *        cluster: jwt.www.googleapis.com|443
   *        timeout: 1s
   *      cache_duration:
   *        seconds: 300
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
   * @return The remoteJwks.
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks getRemoteJwks();
  /**
   * <pre>
   * JWKS can be fetched from remote server via HTTP/HTTPS. This field specifies the remote HTTP
   * URI and how the fetched JWKS should be cached.
   * Example:
   * .. code-block:: yaml
   *    remote_jwks:
   *      http_uri:
   *        uri: https://www.googleapis.com/oauth2/v1/certs
   *        cluster: jwt.www.googleapis.com|443
   *        timeout: 1s
   *      cache_duration:
   *        seconds: 300
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwks remote_jwks = 3;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RemoteJwksOrBuilder getRemoteJwksOrBuilder();

  /**
   * <pre>
   * JWKS is in local data source. It could be either in a local file or embedded in the
   * inline_string.
   * Example: local file
   * .. code-block:: yaml
   *    local_jwks:
   *      filename: /etc/envoy/jwks/jwks1.txt
   * Example: inline_string
   * .. code-block:: yaml
   *    local_jwks:
   *      inline_string: ACADADADADA
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
   * @return Whether the localJwks field is set.
   */
  boolean hasLocalJwks();
  /**
   * <pre>
   * JWKS is in local data source. It could be either in a local file or embedded in the
   * inline_string.
   * Example: local file
   * .. code-block:: yaml
   *    local_jwks:
   *      filename: /etc/envoy/jwks/jwks1.txt
   * Example: inline_string
   * .. code-block:: yaml
   *    local_jwks:
   *      inline_string: ACADADADADA
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
   * @return The localJwks.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getLocalJwks();
  /**
   * <pre>
   * JWKS is in local data source. It could be either in a local file or embedded in the
   * inline_string.
   * Example: local file
   * .. code-block:: yaml
   *    local_jwks:
   *      filename: /etc/envoy/jwks/jwks1.txt
   * Example: inline_string
   * .. code-block:: yaml
   *    local_jwks:
   *      inline_string: ACADADADADA
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource local_jwks = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getLocalJwksOrBuilder();

  /**
   * <pre>
   * If false, the JWT is removed in the request after a success verification. If true, the JWT is
   * not removed in the request. Default value is false.
   * </pre>
   *
   * <code>bool forward = 5;</code>
   * @return The forward.
   */
  boolean getForward();

  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader> 
      getFromHeadersList();
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeader getFromHeaders(int index);
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  int getFromHeadersCount();
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder> 
      getFromHeadersOrBuilderList();
  /**
   * <pre>
   * Two fields below define where to extract the JWT from an HTTP request.
   * If no explicit location is specified, the following default locations are tried in order:
   * 1. The Authorization header using the `Bearer schema
   * &lt;https://tools.ietf.org/html/rfc6750#section-2.1&gt;`_. Example::
   *    Authorization: Bearer &lt;token&gt;.
   * 2. `access_token &lt;https://tools.ietf.org/html/rfc6750#section-2.3&gt;`_ query parameter.
   * Multiple JWTs can be verified for a request. Each JWT has to be extracted from the locations
   * its provider specified or from the default locations.
   * Specify the HTTP headers to extract JWT token. For examples, following config:
   * .. code-block:: yaml
   *   from_headers:
   *   - name: x-goog-iap-jwt-assertion
   * can be used to extract token from header::
   *   ``x-goog-iap-jwt-assertion: &lt;JWT&gt;``.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.http.jwt_authn.v3.JwtHeader from_headers = 6;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtHeaderOrBuilder getFromHeadersOrBuilder(
      int index);

  /**
   * <pre>
   * JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @return A list containing the fromParams.
   */
  java.util.List<java.lang.String>
      getFromParamsList();
  /**
   * <pre>
   * JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @return The count of fromParams.
   */
  int getFromParamsCount();
  /**
   * <pre>
   * JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @param index The index of the element to return.
   * @return The fromParams at the given index.
   */
  java.lang.String getFromParams(int index);
  /**
   * <pre>
   * JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
   * For example, if config is:
   * .. code-block:: yaml
   *   from_params:
   *   - jwt_token
   * The JWT format in query parameter is::
   *    /path?jwt_token=&lt;JWT&gt;
   * </pre>
   *
   * <code>repeated string from_params = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the fromParams at the given index.
   */
  com.google.protobuf.ByteString
      getFromParamsBytes(int index);

  /**
   * <pre>
   * This field specifies the header name to forward a successfully verified JWT payload to the
   * backend. The forwarded data is::
   *    base64url_encoded(jwt_payload_in_JSON)
   * If it is not specified, the payload will not be forwarded.
   * </pre>
   *
   * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
   * @return The forwardPayloadHeader.
   */
  java.lang.String getForwardPayloadHeader();
  /**
   * <pre>
   * This field specifies the header name to forward a successfully verified JWT payload to the
   * backend. The forwarded data is::
   *    base64url_encoded(jwt_payload_in_JSON)
   * If it is not specified, the payload will not be forwarded.
   * </pre>
   *
   * <code>string forward_payload_header = 8 [(.validate.rules) = { ... }</code>
   * @return The bytes for forwardPayloadHeader.
   */
  com.google.protobuf.ByteString
      getForwardPayloadHeaderBytes();

  /**
   * <pre>
   * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
   * in the format as: *namespace* is the jwt_authn filter name as **envoy.filters.http.jwt_authn**
   * The value is the *protobuf::Struct*. The value of this field will be the key for its *fields*
   * and the value is the *protobuf::Struct* converted from JWT JSON payload.
   * For example, if payload_in_metadata is *my_payload*:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_payload:
   *       iss: https://example.com
   *       sub: test&#64;example.com
   *       aud: https://example.com
   *       exp: 1501281058
   * </pre>
   *
   * <code>string payload_in_metadata = 9;</code>
   * @return The payloadInMetadata.
   */
  java.lang.String getPayloadInMetadata();
  /**
   * <pre>
   * If non empty, successfully verified JWT payloads will be written to StreamInfo DynamicMetadata
   * in the format as: *namespace* is the jwt_authn filter name as **envoy.filters.http.jwt_authn**
   * The value is the *protobuf::Struct*. The value of this field will be the key for its *fields*
   * and the value is the *protobuf::Struct* converted from JWT JSON payload.
   * For example, if payload_in_metadata is *my_payload*:
   * .. code-block:: yaml
   *   envoy.filters.http.jwt_authn:
   *     my_payload:
   *       iss: https://example.com
   *       sub: test&#64;example.com
   *       aud: https://example.com
   *       exp: 1501281058
   * </pre>
   *
   * <code>string payload_in_metadata = 9;</code>
   * @return The bytes for payloadInMetadata.
   */
  com.google.protobuf.ByteString
      getPayloadInMetadataBytes();

  /**
   * <pre>
   * Specify the clock skew in seconds when verifying JWT time constraint,
   * such as `exp`, and `nbf`. If not specified, default is 60 seconds.
   * </pre>
   *
   * <code>uint32 clock_skew_seconds = 10;</code>
   * @return The clockSkewSeconds.
   */
  int getClockSkewSeconds();

  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtProvider.JwksSourceSpecifierCase getJwksSourceSpecifierCase();
}
