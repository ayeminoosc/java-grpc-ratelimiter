// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/thrift_proxy/v3/thrift_proxy.proto

package io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3;

public interface ThriftProxyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Supplies the type of transport that the Thrift proxy should use. Defaults to
   * :ref:`AUTO_TRANSPORT&lt;envoy_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for transport.
   */
  int getTransportValue();
  /**
   * <pre>
   * Supplies the type of transport that the Thrift proxy should use. Defaults to
   * :ref:`AUTO_TRANSPORT&lt;envoy_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.TransportType transport = 2 [(.validate.rules) = { ... }</code>
   * @return The transport.
   */
  io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.TransportType getTransport();

  /**
   * <pre>
   * Supplies the type of protocol that the Thrift proxy should use. Defaults to
   * :ref:`AUTO_PROTOCOL&lt;envoy_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol = 3 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for protocol.
   */
  int getProtocolValue();
  /**
   * <pre>
   * Supplies the type of protocol that the Thrift proxy should use. Defaults to
   * :ref:`AUTO_PROTOCOL&lt;envoy_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL&gt;`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType protocol = 3 [(.validate.rules) = { ... }</code>
   * @return The protocol.
   */
  io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.ProtocolType getProtocol();

  /**
   * <pre>
   * The human readable prefix to use when emitting statistics.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * The human readable prefix to use when emitting statistics.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();

  /**
   * <pre>
   * The route table for the connection manager is static and is specified in this property.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration route_config = 4;</code>
   * @return Whether the routeConfig field is set.
   */
  boolean hasRouteConfig();
  /**
   * <pre>
   * The route table for the connection manager is static and is specified in this property.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration route_config = 4;</code>
   * @return The routeConfig.
   */
  io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration getRouteConfig();
  /**
   * <pre>
   * The route table for the connection manager is static and is specified in this property.
   * </pre>
   *
   * <code>.envoy.extensions.filters.network.thrift_proxy.v3.RouteConfiguration route_config = 4;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.RouteConfigurationOrBuilder getRouteConfigOrBuilder();

  /**
   * <pre>
   * A list of individual Thrift filters that make up the filter chain for requests made to the
   * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no thrift_filters are specified, a default Thrift router filter
   * (`envoy.filters.thrift.router`) is used.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter thrift_filters = 5;</code>
   */
  java.util.List<io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter> 
      getThriftFiltersList();
  /**
   * <pre>
   * A list of individual Thrift filters that make up the filter chain for requests made to the
   * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no thrift_filters are specified, a default Thrift router filter
   * (`envoy.filters.thrift.router`) is used.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter thrift_filters = 5;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter getThriftFilters(int index);
  /**
   * <pre>
   * A list of individual Thrift filters that make up the filter chain for requests made to the
   * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no thrift_filters are specified, a default Thrift router filter
   * (`envoy.filters.thrift.router`) is used.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter thrift_filters = 5;</code>
   */
  int getThriftFiltersCount();
  /**
   * <pre>
   * A list of individual Thrift filters that make up the filter chain for requests made to the
   * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no thrift_filters are specified, a default Thrift router filter
   * (`envoy.filters.thrift.router`) is used.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter thrift_filters = 5;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilterOrBuilder> 
      getThriftFiltersOrBuilderList();
  /**
   * <pre>
   * A list of individual Thrift filters that make up the filter chain for requests made to the
   * Thrift proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no thrift_filters are specified, a default Thrift router filter
   * (`envoy.filters.thrift.router`) is used.
   * </pre>
   *
   * <code>repeated .envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilter thrift_filters = 5;</code>
   */
  io.envoyproxy.envoy.extensions.filters.network.thrift_proxy.v3.ThriftFilterOrBuilder getThriftFiltersOrBuilder(
      int index);

  /**
   * <pre>
   * If set to true, Envoy will try to skip decode data after metadata in the Thrift message.
   * This mode will only work if the upstream and downstream protocols are the same and the transport
   * is the same, the transport type is framed and the protocol is not Twitter. Otherwise Envoy will
   * fallback to decode the data.
   * </pre>
   *
   * <code>bool payload_passthrough = 6;</code>
   * @return The payloadPassthrough.
   */
  boolean getPayloadPassthrough();
}
