// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/network/ext_authz/v3/ext_authz.proto

package io.envoyproxy.envoy.extensions.filters.network.ext_authz.v3;

public interface ExtAuthzOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.network.ext_authz.v3.ExtAuthz)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The prefix to use when emitting statistics.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The statPrefix.
   */
  java.lang.String getStatPrefix();
  /**
   * <pre>
   * The prefix to use when emitting statistics.
   * </pre>
   *
   * <code>string stat_prefix = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for statPrefix.
   */
  com.google.protobuf.ByteString
      getStatPrefixBytes();

  /**
   * <pre>
   * The external authorization gRPC service configuration.
   * The default timeout is set to 200ms by this filter.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService grpc_service = 2;</code>
   * @return Whether the grpcService field is set.
   */
  boolean hasGrpcService();
  /**
   * <pre>
   * The external authorization gRPC service configuration.
   * The default timeout is set to 200ms by this filter.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService grpc_service = 2;</code>
   * @return The grpcService.
   */
  io.envoyproxy.envoy.config.core.v3.GrpcService getGrpcService();
  /**
   * <pre>
   * The external authorization gRPC service configuration.
   * The default timeout is set to 200ms by this filter.
   * </pre>
   *
   * <code>.envoy.config.core.v3.GrpcService grpc_service = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.GrpcServiceOrBuilder getGrpcServiceOrBuilder();

  /**
   * <pre>
   * The filter's behaviour in case the external authorization service does
   * not respond back. When it is set to true, Envoy will also allow traffic in case of
   * communication failure between authorization service and the proxy.
   * Defaults to false.
   * </pre>
   *
   * <code>bool failure_mode_allow = 3;</code>
   * @return The failureModeAllow.
   */
  boolean getFailureModeAllow();

  /**
   * <pre>
   * Specifies if the peer certificate is sent to the external service.
   * When this field is true, Envoy will include the peer X.509 certificate, if available, in the
   * :ref:`certificate&lt;envoy_api_field_service.auth.v3.AttributeContext.Peer.certificate&gt;`.
   * </pre>
   *
   * <code>bool include_peer_certificate = 4;</code>
   * @return The includePeerCertificate.
   */
  boolean getIncludePeerCertificate();

  /**
   * <pre>
   * API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
   * version of Check{Request,Response} used on the wire.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion transport_api_version = 5 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for transportApiVersion.
   */
  int getTransportApiVersionValue();
  /**
   * <pre>
   * API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
   * version of Check{Request,Response} used on the wire.
   * </pre>
   *
   * <code>.envoy.config.core.v3.ApiVersion transport_api_version = 5 [(.validate.rules) = { ... }</code>
   * @return The transportApiVersion.
   */
  io.envoyproxy.envoy.config.core.v3.ApiVersion getTransportApiVersion();

  /**
   * <pre>
   * Specifies if the filter is enabled with metadata matcher.
   * If this field is not specified, the filter will be enabled for all requests.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata = 6;</code>
   * @return Whether the filterEnabledMetadata field is set.
   */
  boolean hasFilterEnabledMetadata();
  /**
   * <pre>
   * Specifies if the filter is enabled with metadata matcher.
   * If this field is not specified, the filter will be enabled for all requests.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata = 6;</code>
   * @return The filterEnabledMetadata.
   */
  io.envoyproxy.envoy.type.matcher.v3.MetadataMatcher getFilterEnabledMetadata();
  /**
   * <pre>
   * Specifies if the filter is enabled with metadata matcher.
   * If this field is not specified, the filter will be enabled for all requests.
   * </pre>
   *
   * <code>.envoy.type.matcher.v3.MetadataMatcher filter_enabled_metadata = 6;</code>
   */
  io.envoyproxy.envoy.type.matcher.v3.MetadataMatcherOrBuilder getFilterEnabledMetadataOrBuilder();
}
