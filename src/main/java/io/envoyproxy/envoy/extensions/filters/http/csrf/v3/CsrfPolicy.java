// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/csrf/v3/csrf.proto

package io.envoyproxy.envoy.extensions.filters.http.csrf.v3;

/**
 * <pre>
 * CSRF filter config.
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.csrf.v3.CsrfPolicy}
 */
public final class CsrfPolicy extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.csrf.v3.CsrfPolicy)
    CsrfPolicyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CsrfPolicy.newBuilder() to construct.
  private CsrfPolicy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CsrfPolicy() {
    additionalOrigins_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CsrfPolicy();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CsrfPolicy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder subBuilder = null;
            if (filterEnabled_ != null) {
              subBuilder = filterEnabled_.toBuilder();
            }
            filterEnabled_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(filterEnabled_);
              filterEnabled_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder subBuilder = null;
            if (shadowEnabled_ != null) {
              subBuilder = shadowEnabled_.toBuilder();
            }
            shadowEnabled_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(shadowEnabled_);
              shadowEnabled_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              additionalOrigins_ = new java.util.ArrayList<io.envoyproxy.envoy.type.matcher.v3.StringMatcher>();
              mutable_bitField0_ |= 0x00000001;
            }
            additionalOrigins_.add(
                input.readMessage(io.envoyproxy.envoy.type.matcher.v3.StringMatcher.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        additionalOrigins_ = java.util.Collections.unmodifiableList(additionalOrigins_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfProto.internal_static_envoy_extensions_filters_http_csrf_v3_CsrfPolicy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfProto.internal_static_envoy_extensions_filters_http_csrf_v3_CsrfPolicy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.class, io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.Builder.class);
  }

  public static final int FILTER_ENABLED_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent filterEnabled_;
  /**
   * <pre>
   * Specifies the % of requests for which the CSRF filter is enabled.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   * .. note::
   *   This field defaults to 100/:ref:`HUNDRED
   *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the filterEnabled field is set.
   */
  @java.lang.Override
  public boolean hasFilterEnabled() {
    return filterEnabled_ != null;
  }
  /**
   * <pre>
   * Specifies the % of requests for which the CSRF filter is enabled.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   * .. note::
   *   This field defaults to 100/:ref:`HUNDRED
   *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
   * @return The filterEnabled.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnabled() {
    return filterEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
  }
  /**
   * <pre>
   * Specifies the % of requests for which the CSRF filter is enabled.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   * .. note::
   *   This field defaults to 100/:ref:`HUNDRED
   *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnabledOrBuilder() {
    return getFilterEnabled();
  }

  public static final int SHADOW_ENABLED_FIELD_NUMBER = 2;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent shadowEnabled_;
  /**
   * <pre>
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
   * @return Whether the shadowEnabled field is set.
   */
  @java.lang.Override
  public boolean hasShadowEnabled() {
    return shadowEnabled_ != null;
  }
  /**
   * <pre>
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
   * @return The shadowEnabled.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getShadowEnabled() {
    return shadowEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : shadowEnabled_;
  }
  /**
   * <pre>
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
   * enforce any policies.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getShadowEnabledOrBuilder() {
    return getShadowEnabled();
  }

  public static final int ADDITIONAL_ORIGINS_FIELD_NUMBER = 3;
  private java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> additionalOrigins_;
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> getAdditionalOriginsList() {
    return additionalOrigins_;
  }
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> 
      getAdditionalOriginsOrBuilderList() {
    return additionalOrigins_;
  }
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
   */
  @java.lang.Override
  public int getAdditionalOriginsCount() {
    return additionalOrigins_.size();
  }
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.StringMatcher getAdditionalOrigins(int index) {
    return additionalOrigins_.get(index);
  }
  /**
   * <pre>
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   * More information on how this can be configured via runtime can be found
   * :ref:`here &lt;csrf-configuration&gt;`.
   * </pre>
   *
   * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getAdditionalOriginsOrBuilder(
      int index) {
    return additionalOrigins_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (filterEnabled_ != null) {
      output.writeMessage(1, getFilterEnabled());
    }
    if (shadowEnabled_ != null) {
      output.writeMessage(2, getShadowEnabled());
    }
    for (int i = 0; i < additionalOrigins_.size(); i++) {
      output.writeMessage(3, additionalOrigins_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (filterEnabled_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getFilterEnabled());
    }
    if (shadowEnabled_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getShadowEnabled());
    }
    for (int i = 0; i < additionalOrigins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, additionalOrigins_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy other = (io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy) obj;

    if (hasFilterEnabled() != other.hasFilterEnabled()) return false;
    if (hasFilterEnabled()) {
      if (!getFilterEnabled()
          .equals(other.getFilterEnabled())) return false;
    }
    if (hasShadowEnabled() != other.hasShadowEnabled()) return false;
    if (hasShadowEnabled()) {
      if (!getShadowEnabled()
          .equals(other.getShadowEnabled())) return false;
    }
    if (!getAdditionalOriginsList()
        .equals(other.getAdditionalOriginsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasFilterEnabled()) {
      hash = (37 * hash) + FILTER_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + getFilterEnabled().hashCode();
    }
    if (hasShadowEnabled()) {
      hash = (37 * hash) + SHADOW_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + getShadowEnabled().hashCode();
    }
    if (getAdditionalOriginsCount() > 0) {
      hash = (37 * hash) + ADDITIONAL_ORIGINS_FIELD_NUMBER;
      hash = (53 * hash) + getAdditionalOriginsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CSRF filter config.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.csrf.v3.CsrfPolicy}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.csrf.v3.CsrfPolicy)
      io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfProto.internal_static_envoy_extensions_filters_http_csrf_v3_CsrfPolicy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfProto.internal_static_envoy_extensions_filters_http_csrf_v3_CsrfPolicy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.class, io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAdditionalOriginsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (filterEnabledBuilder_ == null) {
        filterEnabled_ = null;
      } else {
        filterEnabled_ = null;
        filterEnabledBuilder_ = null;
      }
      if (shadowEnabledBuilder_ == null) {
        shadowEnabled_ = null;
      } else {
        shadowEnabled_ = null;
        shadowEnabledBuilder_ = null;
      }
      if (additionalOriginsBuilder_ == null) {
        additionalOrigins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        additionalOriginsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfProto.internal_static_envoy_extensions_filters_http_csrf_v3_CsrfPolicy_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy build() {
      io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy result = new io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy(this);
      int from_bitField0_ = bitField0_;
      if (filterEnabledBuilder_ == null) {
        result.filterEnabled_ = filterEnabled_;
      } else {
        result.filterEnabled_ = filterEnabledBuilder_.build();
      }
      if (shadowEnabledBuilder_ == null) {
        result.shadowEnabled_ = shadowEnabled_;
      } else {
        result.shadowEnabled_ = shadowEnabledBuilder_.build();
      }
      if (additionalOriginsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          additionalOrigins_ = java.util.Collections.unmodifiableList(additionalOrigins_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.additionalOrigins_ = additionalOrigins_;
      } else {
        result.additionalOrigins_ = additionalOriginsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy.getDefaultInstance()) return this;
      if (other.hasFilterEnabled()) {
        mergeFilterEnabled(other.getFilterEnabled());
      }
      if (other.hasShadowEnabled()) {
        mergeShadowEnabled(other.getShadowEnabled());
      }
      if (additionalOriginsBuilder_ == null) {
        if (!other.additionalOrigins_.isEmpty()) {
          if (additionalOrigins_.isEmpty()) {
            additionalOrigins_ = other.additionalOrigins_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAdditionalOriginsIsMutable();
            additionalOrigins_.addAll(other.additionalOrigins_);
          }
          onChanged();
        }
      } else {
        if (!other.additionalOrigins_.isEmpty()) {
          if (additionalOriginsBuilder_.isEmpty()) {
            additionalOriginsBuilder_.dispose();
            additionalOriginsBuilder_ = null;
            additionalOrigins_ = other.additionalOrigins_;
            bitField0_ = (bitField0_ & ~0x00000001);
            additionalOriginsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAdditionalOriginsFieldBuilder() : null;
          } else {
            additionalOriginsBuilder_.addAllMessages(other.additionalOrigins_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent filterEnabled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> filterEnabledBuilder_;
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the filterEnabled field is set.
     */
    public boolean hasFilterEnabled() {
      return filterEnabledBuilder_ != null || filterEnabled_ != null;
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     * @return The filterEnabled.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getFilterEnabled() {
      if (filterEnabledBuilder_ == null) {
        return filterEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
      } else {
        return filterEnabledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setFilterEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (filterEnabledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filterEnabled_ = value;
        onChanged();
      } else {
        filterEnabledBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder setFilterEnabled(
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
      if (filterEnabledBuilder_ == null) {
        filterEnabled_ = builderForValue.build();
        onChanged();
      } else {
        filterEnabledBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeFilterEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (filterEnabledBuilder_ == null) {
        if (filterEnabled_ != null) {
          filterEnabled_ =
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.newBuilder(filterEnabled_).mergeFrom(value).buildPartial();
        } else {
          filterEnabled_ = value;
        }
        onChanged();
      } else {
        filterEnabledBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    public Builder clearFilterEnabled() {
      if (filterEnabledBuilder_ == null) {
        filterEnabled_ = null;
        onChanged();
      } else {
        filterEnabled_ = null;
        filterEnabledBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getFilterEnabledBuilder() {
      
      onChanged();
      return getFilterEnabledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getFilterEnabledOrBuilder() {
      if (filterEnabledBuilder_ != null) {
        return filterEnabledBuilder_.getMessageOrBuilder();
      } else {
        return filterEnabled_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : filterEnabled_;
      }
    }
    /**
     * <pre>
     * Specifies the % of requests for which the CSRF filter is enabled.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests to filter.
     * .. note::
     *   This field defaults to 100/:ref:`HUNDRED
     *   &lt;envoy_api_enum_type.v3.FractionalPercent.DenominatorType&gt;`.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent filter_enabled = 1 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
        getFilterEnabledFieldBuilder() {
      if (filterEnabledBuilder_ == null) {
        filterEnabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                getFilterEnabled(),
                getParentForChildren(),
                isClean());
        filterEnabled_ = null;
      }
      return filterEnabledBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent shadowEnabled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> shadowEnabledBuilder_;
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     * @return Whether the shadowEnabled field is set.
     */
    public boolean hasShadowEnabled() {
      return shadowEnabledBuilder_ != null || shadowEnabled_ != null;
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     * @return The shadowEnabled.
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent getShadowEnabled() {
      if (shadowEnabledBuilder_ == null) {
        return shadowEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : shadowEnabled_;
      } else {
        return shadowEnabledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    public Builder setShadowEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (shadowEnabledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        shadowEnabled_ = value;
        onChanged();
      } else {
        shadowEnabledBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    public Builder setShadowEnabled(
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder builderForValue) {
      if (shadowEnabledBuilder_ == null) {
        shadowEnabled_ = builderForValue.build();
        onChanged();
      } else {
        shadowEnabledBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    public Builder mergeShadowEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent value) {
      if (shadowEnabledBuilder_ == null) {
        if (shadowEnabled_ != null) {
          shadowEnabled_ =
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.newBuilder(shadowEnabled_).mergeFrom(value).buildPartial();
        } else {
          shadowEnabled_ = value;
        }
        onChanged();
      } else {
        shadowEnabledBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    public Builder clearShadowEnabled() {
      if (shadowEnabledBuilder_ == null) {
        shadowEnabled_ = null;
        onChanged();
      } else {
        shadowEnabled_ = null;
        shadowEnabledBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder getShadowEnabledBuilder() {
      
      onChanged();
      return getShadowEnabledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder getShadowEnabledOrBuilder() {
      if (shadowEnabledBuilder_ != null) {
        return shadowEnabledBuilder_.getMessageOrBuilder();
      } else {
        return shadowEnabled_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.getDefaultInstance() : shadowEnabled_;
      }
    }
    /**
     * <pre>
     * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
     * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
     * If :ref:`runtime_key &lt;envoy_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key&gt;` is specified,
     * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
     * and track the request's *Origin* and *Destination* to determine if it's valid, but will not
     * enforce any policies.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder> 
        getShadowEnabledFieldBuilder() {
      if (shadowEnabledBuilder_ == null) {
        shadowEnabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercent.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFractionalPercentOrBuilder>(
                getShadowEnabled(),
                getParentForChildren(),
                isClean());
        shadowEnabled_ = null;
      }
      return shadowEnabledBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> additionalOrigins_ =
      java.util.Collections.emptyList();
    private void ensureAdditionalOriginsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        additionalOrigins_ = new java.util.ArrayList<io.envoyproxy.envoy.type.matcher.v3.StringMatcher>(additionalOrigins_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.StringMatcher, io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> additionalOriginsBuilder_;

    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher> getAdditionalOriginsList() {
      if (additionalOriginsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(additionalOrigins_);
      } else {
        return additionalOriginsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public int getAdditionalOriginsCount() {
      if (additionalOriginsBuilder_ == null) {
        return additionalOrigins_.size();
      } else {
        return additionalOriginsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.StringMatcher getAdditionalOrigins(int index) {
      if (additionalOriginsBuilder_ == null) {
        return additionalOrigins_.get(index);
      } else {
        return additionalOriginsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder setAdditionalOrigins(
        int index, io.envoyproxy.envoy.type.matcher.v3.StringMatcher value) {
      if (additionalOriginsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.set(index, value);
        onChanged();
      } else {
        additionalOriginsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder setAdditionalOrigins(
        int index, io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder builderForValue) {
      if (additionalOriginsBuilder_ == null) {
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.set(index, builderForValue.build());
        onChanged();
      } else {
        additionalOriginsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder addAdditionalOrigins(io.envoyproxy.envoy.type.matcher.v3.StringMatcher value) {
      if (additionalOriginsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.add(value);
        onChanged();
      } else {
        additionalOriginsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder addAdditionalOrigins(
        int index, io.envoyproxy.envoy.type.matcher.v3.StringMatcher value) {
      if (additionalOriginsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.add(index, value);
        onChanged();
      } else {
        additionalOriginsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder addAdditionalOrigins(
        io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder builderForValue) {
      if (additionalOriginsBuilder_ == null) {
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.add(builderForValue.build());
        onChanged();
      } else {
        additionalOriginsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder addAdditionalOrigins(
        int index, io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder builderForValue) {
      if (additionalOriginsBuilder_ == null) {
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.add(index, builderForValue.build());
        onChanged();
      } else {
        additionalOriginsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder addAllAdditionalOrigins(
        java.lang.Iterable<? extends io.envoyproxy.envoy.type.matcher.v3.StringMatcher> values) {
      if (additionalOriginsBuilder_ == null) {
        ensureAdditionalOriginsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, additionalOrigins_);
        onChanged();
      } else {
        additionalOriginsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder clearAdditionalOrigins() {
      if (additionalOriginsBuilder_ == null) {
        additionalOrigins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        additionalOriginsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public Builder removeAdditionalOrigins(int index) {
      if (additionalOriginsBuilder_ == null) {
        ensureAdditionalOriginsIsMutable();
        additionalOrigins_.remove(index);
        onChanged();
      } else {
        additionalOriginsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder getAdditionalOriginsBuilder(
        int index) {
      return getAdditionalOriginsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder getAdditionalOriginsOrBuilder(
        int index) {
      if (additionalOriginsBuilder_ == null) {
        return additionalOrigins_.get(index);  } else {
        return additionalOriginsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> 
         getAdditionalOriginsOrBuilderList() {
      if (additionalOriginsBuilder_ != null) {
        return additionalOriginsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(additionalOrigins_);
      }
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder addAdditionalOriginsBuilder() {
      return getAdditionalOriginsFieldBuilder().addBuilder(
          io.envoyproxy.envoy.type.matcher.v3.StringMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder addAdditionalOriginsBuilder(
        int index) {
      return getAdditionalOriginsFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.type.matcher.v3.StringMatcher.getDefaultInstance());
    }
    /**
     * <pre>
     * Specifies additional source origins that will be allowed in addition to
     * the destination origin.
     * More information on how this can be configured via runtime can be found
     * :ref:`here &lt;csrf-configuration&gt;`.
     * </pre>
     *
     * <code>repeated .envoy.type.matcher.v3.StringMatcher additional_origins = 3;</code>
     */
    public java.util.List<io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder> 
         getAdditionalOriginsBuilderList() {
      return getAdditionalOriginsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.type.matcher.v3.StringMatcher, io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder> 
        getAdditionalOriginsFieldBuilder() {
      if (additionalOriginsBuilder_ == null) {
        additionalOriginsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.type.matcher.v3.StringMatcher, io.envoyproxy.envoy.type.matcher.v3.StringMatcher.Builder, io.envoyproxy.envoy.type.matcher.v3.StringMatcherOrBuilder>(
                additionalOrigins_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        additionalOrigins_ = null;
      }
      return additionalOriginsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.csrf.v3.CsrfPolicy)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.csrf.v3.CsrfPolicy)
  private static final io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CsrfPolicy>
      PARSER = new com.google.protobuf.AbstractParser<CsrfPolicy>() {
    @java.lang.Override
    public CsrfPolicy parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CsrfPolicy(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CsrfPolicy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CsrfPolicy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.csrf.v3.CsrfPolicy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

