// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/compressor/v3/compressor.proto

package io.envoyproxy.envoy.extensions.filters.http.compressor.v3;

/**
 * <pre>
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor}
 */
public final class Compressor extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.compressor.v3.Compressor)
    CompressorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Compressor.newBuilder() to construct.
  private Compressor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Compressor() {
    contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Compressor();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Compressor(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (contentLength_ != null) {
              subBuilder = contentLength_.toBuilder();
            }
            contentLength_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(contentLength_);
              contentLength_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              contentType_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            contentType_.add(s);
            break;
          }
          case 24: {

            disableOnEtagHeader_ = input.readBool();
            break;
          }
          case 32: {

            removeAcceptEncodingHeader_ = input.readBool();
            break;
          }
          case 42: {
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder subBuilder = null;
            if (runtimeEnabled_ != null) {
              subBuilder = runtimeEnabled_.toBuilder();
            }
            runtimeEnabled_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(runtimeEnabled_);
              runtimeEnabled_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder subBuilder = null;
            if (compressorLibrary_ != null) {
              subBuilder = compressorLibrary_.toBuilder();
            }
            compressorLibrary_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(compressorLibrary_);
              compressorLibrary_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder subBuilder = null;
            if (requestDirectionConfig_ != null) {
              subBuilder = requestDirectionConfig_.toBuilder();
            }
            requestDirectionConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(requestDirectionConfig_);
              requestDirectionConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder subBuilder = null;
            if (responseDirectionConfig_ != null) {
              subBuilder = responseDirectionConfig_.toBuilder();
            }
            responseDirectionConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(responseDirectionConfig_);
              responseDirectionConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        contentType_ = contentType_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.Builder.class);
  }

  public interface CommonDirectionConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Runtime flag that controls whether compression is enabled or not for the direction this
     * common config is put in. If set to false, the filter will operate as a pass-through filter
     * in the chosen direction. If the field is omitted, the filter will be enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
     * @return Whether the enabled field is set.
     */
    boolean hasEnabled();
    /**
     * <pre>
     * Runtime flag that controls whether compression is enabled or not for the direction this
     * common config is put in. If set to false, the filter will operate as a pass-through filter
     * in the chosen direction. If the field is omitted, the filter will be enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
     * @return The enabled.
     */
    io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled();
    /**
     * <pre>
     * Runtime flag that controls whether compression is enabled or not for the direction this
     * common config is put in. If set to false, the filter will operate as a pass-through filter
     * in the chosen direction. If the field is omitted, the filter will be enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
     */
    io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder();

    /**
     * <pre>
     * Minimum value of Content-Length header of request or response messages (depending on the direction
     * this common config is put in), in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
     * @return Whether the minContentLength field is set.
     */
    boolean hasMinContentLength();
    /**
     * <pre>
     * Minimum value of Content-Length header of request or response messages (depending on the direction
     * this common config is put in), in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
     * @return The minContentLength.
     */
    com.google.protobuf.UInt32Value getMinContentLength();
    /**
     * <pre>
     * Minimum value of Content-Length header of request or response messages (depending on the direction
     * this common config is put in), in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
     */
    com.google.protobuf.UInt32ValueOrBuilder getMinContentLengthOrBuilder();

    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @return A list containing the contentType.
     */
    java.util.List<java.lang.String>
        getContentTypeList();
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @return The count of contentType.
     */
    int getContentTypeCount();
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @param index The index of the element to return.
     * @return The contentType at the given index.
     */
    java.lang.String getContentType(int index);
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the contentType at the given index.
     */
    com.google.protobuf.ByteString
        getContentTypeBytes(int index);
  }
  /**
   * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig}
   */
  public static final class CommonDirectionConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)
      CommonDirectionConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CommonDirectionConfig.newBuilder() to construct.
    private CommonDirectionConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommonDirectionConfig() {
      contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CommonDirectionConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CommonDirectionConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder subBuilder = null;
              if (enabled_ != null) {
                subBuilder = enabled_.toBuilder();
              }
              enabled_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(enabled_);
                enabled_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.google.protobuf.UInt32Value.Builder subBuilder = null;
              if (minContentLength_ != null) {
                subBuilder = minContentLength_.toBuilder();
              }
              minContentLength_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minContentLength_);
                minContentLength_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                contentType_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              contentType_.add(s);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          contentType_ = contentType_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_CommonDirectionConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_CommonDirectionConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder.class);
    }

    public static final int ENABLED_FIELD_NUMBER = 1;
    private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag enabled_;
    /**
     * <pre>
     * Runtime flag that controls whether compression is enabled or not for the direction this
     * common config is put in. If set to false, the filter will operate as a pass-through filter
     * in the chosen direction. If the field is omitted, the filter will be enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
     * @return Whether the enabled field is set.
     */
    @java.lang.Override
    public boolean hasEnabled() {
      return enabled_ != null;
    }
    /**
     * <pre>
     * Runtime flag that controls whether compression is enabled or not for the direction this
     * common config is put in. If set to false, the filter will operate as a pass-through filter
     * in the chosen direction. If the field is omitted, the filter will be enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
     * @return The enabled.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled() {
      return enabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : enabled_;
    }
    /**
     * <pre>
     * Runtime flag that controls whether compression is enabled or not for the direction this
     * common config is put in. If set to false, the filter will operate as a pass-through filter
     * in the chosen direction. If the field is omitted, the filter will be enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder() {
      return getEnabled();
    }

    public static final int MIN_CONTENT_LENGTH_FIELD_NUMBER = 2;
    private com.google.protobuf.UInt32Value minContentLength_;
    /**
     * <pre>
     * Minimum value of Content-Length header of request or response messages (depending on the direction
     * this common config is put in), in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
     * @return Whether the minContentLength field is set.
     */
    @java.lang.Override
    public boolean hasMinContentLength() {
      return minContentLength_ != null;
    }
    /**
     * <pre>
     * Minimum value of Content-Length header of request or response messages (depending on the direction
     * this common config is put in), in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
     * @return The minContentLength.
     */
    @java.lang.Override
    public com.google.protobuf.UInt32Value getMinContentLength() {
      return minContentLength_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : minContentLength_;
    }
    /**
     * <pre>
     * Minimum value of Content-Length header of request or response messages (depending on the direction
     * this common config is put in), in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.UInt32ValueOrBuilder getMinContentLengthOrBuilder() {
      return getMinContentLength();
    }

    public static final int CONTENT_TYPE_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList contentType_;
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @return A list containing the contentType.
     */
    public com.google.protobuf.ProtocolStringList
        getContentTypeList() {
      return contentType_;
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @return The count of contentType.
     */
    public int getContentTypeCount() {
      return contentType_.size();
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @param index The index of the element to return.
     * @return The contentType at the given index.
     */
    public java.lang.String getContentType(int index) {
      return contentType_.get(index);
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the contentType at the given index.
     */
    public com.google.protobuf.ByteString
        getContentTypeBytes(int index) {
      return contentType_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (enabled_ != null) {
        output.writeMessage(1, getEnabled());
      }
      if (minContentLength_ != null) {
        output.writeMessage(2, getMinContentLength());
      }
      for (int i = 0; i < contentType_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, contentType_.getRaw(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (enabled_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEnabled());
      }
      if (minContentLength_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMinContentLength());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < contentType_.size(); i++) {
          dataSize += computeStringSizeNoTag(contentType_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getContentTypeList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig other = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig) obj;

      if (hasEnabled() != other.hasEnabled()) return false;
      if (hasEnabled()) {
        if (!getEnabled()
            .equals(other.getEnabled())) return false;
      }
      if (hasMinContentLength() != other.hasMinContentLength()) return false;
      if (hasMinContentLength()) {
        if (!getMinContentLength()
            .equals(other.getMinContentLength())) return false;
      }
      if (!getContentTypeList()
          .equals(other.getContentTypeList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEnabled()) {
        hash = (37 * hash) + ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + getEnabled().hashCode();
      }
      if (hasMinContentLength()) {
        hash = (37 * hash) + MIN_CONTENT_LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getMinContentLength().hashCode();
      }
      if (getContentTypeCount() > 0) {
        hash = (37 * hash) + CONTENT_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getContentTypeList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_CommonDirectionConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_CommonDirectionConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (enabledBuilder_ == null) {
          enabled_ = null;
        } else {
          enabled_ = null;
          enabledBuilder_ = null;
        }
        if (minContentLengthBuilder_ == null) {
          minContentLength_ = null;
        } else {
          minContentLength_ = null;
          minContentLengthBuilder_ = null;
        }
        contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_CommonDirectionConfig_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig build() {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig buildPartial() {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig result = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig(this);
        int from_bitField0_ = bitField0_;
        if (enabledBuilder_ == null) {
          result.enabled_ = enabled_;
        } else {
          result.enabled_ = enabledBuilder_.build();
        }
        if (minContentLengthBuilder_ == null) {
          result.minContentLength_ = minContentLength_;
        } else {
          result.minContentLength_ = minContentLengthBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          contentType_ = contentType_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.contentType_ = contentType_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig other) {
        if (other == io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance()) return this;
        if (other.hasEnabled()) {
          mergeEnabled(other.getEnabled());
        }
        if (other.hasMinContentLength()) {
          mergeMinContentLength(other.getMinContentLength());
        }
        if (!other.contentType_.isEmpty()) {
          if (contentType_.isEmpty()) {
            contentType_ = other.contentType_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureContentTypeIsMutable();
            contentType_.addAll(other.contentType_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag enabled_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> enabledBuilder_;
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       * @return Whether the enabled field is set.
       */
      public boolean hasEnabled() {
        return enabledBuilder_ != null || enabled_ != null;
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       * @return The enabled.
       */
      public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getEnabled() {
        if (enabledBuilder_ == null) {
          return enabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : enabled_;
        } else {
          return enabledBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      public Builder setEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
        if (enabledBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          enabled_ = value;
          onChanged();
        } else {
          enabledBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      public Builder setEnabled(
          io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder builderForValue) {
        if (enabledBuilder_ == null) {
          enabled_ = builderForValue.build();
          onChanged();
        } else {
          enabledBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      public Builder mergeEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
        if (enabledBuilder_ == null) {
          if (enabled_ != null) {
            enabled_ =
              io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.newBuilder(enabled_).mergeFrom(value).buildPartial();
          } else {
            enabled_ = value;
          }
          onChanged();
        } else {
          enabledBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      public Builder clearEnabled() {
        if (enabledBuilder_ == null) {
          enabled_ = null;
          onChanged();
        } else {
          enabled_ = null;
          enabledBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder getEnabledBuilder() {
        
        onChanged();
        return getEnabledFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getEnabledOrBuilder() {
        if (enabledBuilder_ != null) {
          return enabledBuilder_.getMessageOrBuilder();
        } else {
          return enabled_ == null ?
              io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : enabled_;
        }
      }
      /**
       * <pre>
       * Runtime flag that controls whether compression is enabled or not for the direction this
       * common config is put in. If set to false, the filter will operate as a pass-through filter
       * in the chosen direction. If the field is omitted, the filter will be enabled.
       * </pre>
       *
       * <code>.envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> 
          getEnabledFieldBuilder() {
        if (enabledBuilder_ == null) {
          enabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder>(
                  getEnabled(),
                  getParentForChildren(),
                  isClean());
          enabled_ = null;
        }
        return enabledBuilder_;
      }

      private com.google.protobuf.UInt32Value minContentLength_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> minContentLengthBuilder_;
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       * @return Whether the minContentLength field is set.
       */
      public boolean hasMinContentLength() {
        return minContentLengthBuilder_ != null || minContentLength_ != null;
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       * @return The minContentLength.
       */
      public com.google.protobuf.UInt32Value getMinContentLength() {
        if (minContentLengthBuilder_ == null) {
          return minContentLength_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : minContentLength_;
        } else {
          return minContentLengthBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      public Builder setMinContentLength(com.google.protobuf.UInt32Value value) {
        if (minContentLengthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minContentLength_ = value;
          onChanged();
        } else {
          minContentLengthBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      public Builder setMinContentLength(
          com.google.protobuf.UInt32Value.Builder builderForValue) {
        if (minContentLengthBuilder_ == null) {
          minContentLength_ = builderForValue.build();
          onChanged();
        } else {
          minContentLengthBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      public Builder mergeMinContentLength(com.google.protobuf.UInt32Value value) {
        if (minContentLengthBuilder_ == null) {
          if (minContentLength_ != null) {
            minContentLength_ =
              com.google.protobuf.UInt32Value.newBuilder(minContentLength_).mergeFrom(value).buildPartial();
          } else {
            minContentLength_ = value;
          }
          onChanged();
        } else {
          minContentLengthBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      public Builder clearMinContentLength() {
        if (minContentLengthBuilder_ == null) {
          minContentLength_ = null;
          onChanged();
        } else {
          minContentLength_ = null;
          minContentLengthBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      public com.google.protobuf.UInt32Value.Builder getMinContentLengthBuilder() {
        
        onChanged();
        return getMinContentLengthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      public com.google.protobuf.UInt32ValueOrBuilder getMinContentLengthOrBuilder() {
        if (minContentLengthBuilder_ != null) {
          return minContentLengthBuilder_.getMessageOrBuilder();
        } else {
          return minContentLength_ == null ?
              com.google.protobuf.UInt32Value.getDefaultInstance() : minContentLength_;
        }
      }
      /**
       * <pre>
       * Minimum value of Content-Length header of request or response messages (depending on the direction
       * this common config is put in), in bytes, which will trigger compression. The default value is 30.
       * </pre>
       *
       * <code>.google.protobuf.UInt32Value min_content_length = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
          getMinContentLengthFieldBuilder() {
        if (minContentLengthBuilder_ == null) {
          minContentLengthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                  getMinContentLength(),
                  getParentForChildren(),
                  isClean());
          minContentLength_ = null;
        }
        return minContentLengthBuilder_;
      }

      private com.google.protobuf.LazyStringList contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureContentTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          contentType_ = new com.google.protobuf.LazyStringArrayList(contentType_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @return A list containing the contentType.
       */
      public com.google.protobuf.ProtocolStringList
          getContentTypeList() {
        return contentType_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @return The count of contentType.
       */
      public int getContentTypeCount() {
        return contentType_.size();
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @param index The index of the element to return.
       * @return The contentType at the given index.
       */
      public java.lang.String getContentType(int index) {
        return contentType_.get(index);
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the contentType at the given index.
       */
      public com.google.protobuf.ByteString
          getContentTypeBytes(int index) {
        return contentType_.getByteString(index);
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @param index The index to set the value at.
       * @param value The contentType to set.
       * @return This builder for chaining.
       */
      public Builder setContentType(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureContentTypeIsMutable();
        contentType_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @param value The contentType to add.
       * @return This builder for chaining.
       */
      public Builder addContentType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureContentTypeIsMutable();
        contentType_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @param values The contentType to add.
       * @return This builder for chaining.
       */
      public Builder addAllContentType(
          java.lang.Iterable<java.lang.String> values) {
        ensureContentTypeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, contentType_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentType() {
        contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of strings that allows specifying which mime-types yield compression; e.g.,
       * application/json, text/html, etc. When this field is not defined, compression will be applied
       * to the following mime-types: "application/javascript", "application/json",
       * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
       * and their synonyms.
       * </pre>
       *
       * <code>repeated string content_type = 3;</code>
       * @param value The bytes of the contentType to add.
       * @return This builder for chaining.
       */
      public Builder addContentTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureContentTypeIsMutable();
        contentType_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig)
    private static final io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig();
    }

    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CommonDirectionConfig>
        PARSER = new com.google.protobuf.AbstractParser<CommonDirectionConfig>() {
      @java.lang.Override
      public CommonDirectionConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommonDirectionConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CommonDirectionConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommonDirectionConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RequestDirectionConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return Whether the commonConfig field is set.
     */
    boolean hasCommonConfig();
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return The commonConfig.
     */
    io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getCommonConfig();
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     */
    io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder getCommonConfigOrBuilder();
  }
  /**
   * <pre>
   * Configuration for filter behavior on the request direction.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig}
   */
  public static final class RequestDirectionConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)
      RequestDirectionConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RequestDirectionConfig.newBuilder() to construct.
    private RequestDirectionConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RequestDirectionConfig() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RequestDirectionConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RequestDirectionConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder subBuilder = null;
              if (commonConfig_ != null) {
                subBuilder = commonConfig_.toBuilder();
              }
              commonConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commonConfig_);
                commonConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_RequestDirectionConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_RequestDirectionConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder.class);
    }

    public static final int COMMON_CONFIG_FIELD_NUMBER = 1;
    private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig commonConfig_;
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return Whether the commonConfig field is set.
     */
    @java.lang.Override
    public boolean hasCommonConfig() {
      return commonConfig_ != null;
    }
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return The commonConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getCommonConfig() {
      return commonConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance() : commonConfig_;
    }
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder getCommonConfigOrBuilder() {
      return getCommonConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (commonConfig_ != null) {
        output.writeMessage(1, getCommonConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (commonConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCommonConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig other = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig) obj;

      if (hasCommonConfig() != other.hasCommonConfig()) return false;
      if (hasCommonConfig()) {
        if (!getCommonConfig()
            .equals(other.getCommonConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCommonConfig()) {
        hash = (37 * hash) + COMMON_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getCommonConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration for filter behavior on the request direction.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_RequestDirectionConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_RequestDirectionConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (commonConfigBuilder_ == null) {
          commonConfig_ = null;
        } else {
          commonConfig_ = null;
          commonConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_RequestDirectionConfig_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig build() {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig buildPartial() {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig result = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig(this);
        if (commonConfigBuilder_ == null) {
          result.commonConfig_ = commonConfig_;
        } else {
          result.commonConfig_ = commonConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig other) {
        if (other == io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.getDefaultInstance()) return this;
        if (other.hasCommonConfig()) {
          mergeCommonConfig(other.getCommonConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig commonConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder> commonConfigBuilder_;
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       * @return Whether the commonConfig field is set.
       */
      public boolean hasCommonConfig() {
        return commonConfigBuilder_ != null || commonConfig_ != null;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       * @return The commonConfig.
       */
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getCommonConfig() {
        if (commonConfigBuilder_ == null) {
          return commonConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance() : commonConfig_;
        } else {
          return commonConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder setCommonConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig value) {
        if (commonConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commonConfig_ = value;
          onChanged();
        } else {
          commonConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder setCommonConfig(
          io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder builderForValue) {
        if (commonConfigBuilder_ == null) {
          commonConfig_ = builderForValue.build();
          onChanged();
        } else {
          commonConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder mergeCommonConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig value) {
        if (commonConfigBuilder_ == null) {
          if (commonConfig_ != null) {
            commonConfig_ =
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.newBuilder(commonConfig_).mergeFrom(value).buildPartial();
          } else {
            commonConfig_ = value;
          }
          onChanged();
        } else {
          commonConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder clearCommonConfig() {
        if (commonConfigBuilder_ == null) {
          commonConfig_ = null;
          onChanged();
        } else {
          commonConfig_ = null;
          commonConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder getCommonConfigBuilder() {
        
        onChanged();
        return getCommonConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder getCommonConfigOrBuilder() {
        if (commonConfigBuilder_ != null) {
          return commonConfigBuilder_.getMessageOrBuilder();
        } else {
          return commonConfig_ == null ?
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance() : commonConfig_;
        }
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder> 
          getCommonConfigFieldBuilder() {
        if (commonConfigBuilder_ == null) {
          commonConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder>(
                  getCommonConfig(),
                  getParentForChildren(),
                  isClean());
          commonConfig_ = null;
        }
        return commonConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig)
    private static final io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig();
    }

    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RequestDirectionConfig>
        PARSER = new com.google.protobuf.AbstractParser<RequestDirectionConfig>() {
      @java.lang.Override
      public RequestDirectionConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RequestDirectionConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RequestDirectionConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RequestDirectionConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseDirectionConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return Whether the commonConfig field is set.
     */
    boolean hasCommonConfig();
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return The commonConfig.
     */
    io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getCommonConfig();
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     */
    io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder getCommonConfigOrBuilder();

    /**
     * <pre>
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     * </pre>
     *
     * <code>bool disable_on_etag_header = 2;</code>
     * @return The disableOnEtagHeader.
     */
    boolean getDisableOnEtagHeader();

    /**
     * <pre>
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention::
     *    To avoid interfering with other compression filters in the same chain use this option in
     *    the filter closest to the upstream.
     * </pre>
     *
     * <code>bool remove_accept_encoding_header = 3;</code>
     * @return The removeAcceptEncodingHeader.
     */
    boolean getRemoveAcceptEncodingHeader();
  }
  /**
   * <pre>
   * Configuration for filter behavior on the response direction.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig}
   */
  public static final class ResponseDirectionConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)
      ResponseDirectionConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ResponseDirectionConfig.newBuilder() to construct.
    private ResponseDirectionConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ResponseDirectionConfig() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ResponseDirectionConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ResponseDirectionConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder subBuilder = null;
              if (commonConfig_ != null) {
                subBuilder = commonConfig_.toBuilder();
              }
              commonConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(commonConfig_);
                commonConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              disableOnEtagHeader_ = input.readBool();
              break;
            }
            case 24: {

              removeAcceptEncodingHeader_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_ResponseDirectionConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_ResponseDirectionConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder.class);
    }

    public static final int COMMON_CONFIG_FIELD_NUMBER = 1;
    private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig commonConfig_;
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return Whether the commonConfig field is set.
     */
    @java.lang.Override
    public boolean hasCommonConfig() {
      return commonConfig_ != null;
    }
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     * @return The commonConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getCommonConfig() {
      return commonConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance() : commonConfig_;
    }
    /**
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder getCommonConfigOrBuilder() {
      return getCommonConfig();
    }

    public static final int DISABLE_ON_ETAG_HEADER_FIELD_NUMBER = 2;
    private boolean disableOnEtagHeader_;
    /**
     * <pre>
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     * </pre>
     *
     * <code>bool disable_on_etag_header = 2;</code>
     * @return The disableOnEtagHeader.
     */
    @java.lang.Override
    public boolean getDisableOnEtagHeader() {
      return disableOnEtagHeader_;
    }

    public static final int REMOVE_ACCEPT_ENCODING_HEADER_FIELD_NUMBER = 3;
    private boolean removeAcceptEncodingHeader_;
    /**
     * <pre>
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention::
     *    To avoid interfering with other compression filters in the same chain use this option in
     *    the filter closest to the upstream.
     * </pre>
     *
     * <code>bool remove_accept_encoding_header = 3;</code>
     * @return The removeAcceptEncodingHeader.
     */
    @java.lang.Override
    public boolean getRemoveAcceptEncodingHeader() {
      return removeAcceptEncodingHeader_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (commonConfig_ != null) {
        output.writeMessage(1, getCommonConfig());
      }
      if (disableOnEtagHeader_ != false) {
        output.writeBool(2, disableOnEtagHeader_);
      }
      if (removeAcceptEncodingHeader_ != false) {
        output.writeBool(3, removeAcceptEncodingHeader_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (commonConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCommonConfig());
      }
      if (disableOnEtagHeader_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, disableOnEtagHeader_);
      }
      if (removeAcceptEncodingHeader_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, removeAcceptEncodingHeader_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig other = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig) obj;

      if (hasCommonConfig() != other.hasCommonConfig()) return false;
      if (hasCommonConfig()) {
        if (!getCommonConfig()
            .equals(other.getCommonConfig())) return false;
      }
      if (getDisableOnEtagHeader()
          != other.getDisableOnEtagHeader()) return false;
      if (getRemoveAcceptEncodingHeader()
          != other.getRemoveAcceptEncodingHeader()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCommonConfig()) {
        hash = (37 * hash) + COMMON_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getCommonConfig().hashCode();
      }
      hash = (37 * hash) + DISABLE_ON_ETAG_HEADER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisableOnEtagHeader());
      hash = (37 * hash) + REMOVE_ACCEPT_ENCODING_HEADER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRemoveAcceptEncodingHeader());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration for filter behavior on the response direction.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_ResponseDirectionConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_ResponseDirectionConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (commonConfigBuilder_ == null) {
          commonConfig_ = null;
        } else {
          commonConfig_ = null;
          commonConfigBuilder_ = null;
        }
        disableOnEtagHeader_ = false;

        removeAcceptEncodingHeader_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_ResponseDirectionConfig_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig build() {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig buildPartial() {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig result = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig(this);
        if (commonConfigBuilder_ == null) {
          result.commonConfig_ = commonConfig_;
        } else {
          result.commonConfig_ = commonConfigBuilder_.build();
        }
        result.disableOnEtagHeader_ = disableOnEtagHeader_;
        result.removeAcceptEncodingHeader_ = removeAcceptEncodingHeader_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig) {
          return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig other) {
        if (other == io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.getDefaultInstance()) return this;
        if (other.hasCommonConfig()) {
          mergeCommonConfig(other.getCommonConfig());
        }
        if (other.getDisableOnEtagHeader() != false) {
          setDisableOnEtagHeader(other.getDisableOnEtagHeader());
        }
        if (other.getRemoveAcceptEncodingHeader() != false) {
          setRemoveAcceptEncodingHeader(other.getRemoveAcceptEncodingHeader());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig commonConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder> commonConfigBuilder_;
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       * @return Whether the commonConfig field is set.
       */
      public boolean hasCommonConfig() {
        return commonConfigBuilder_ != null || commonConfig_ != null;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       * @return The commonConfig.
       */
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig getCommonConfig() {
        if (commonConfigBuilder_ == null) {
          return commonConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance() : commonConfig_;
        } else {
          return commonConfigBuilder_.getMessage();
        }
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder setCommonConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig value) {
        if (commonConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          commonConfig_ = value;
          onChanged();
        } else {
          commonConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder setCommonConfig(
          io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder builderForValue) {
        if (commonConfigBuilder_ == null) {
          commonConfig_ = builderForValue.build();
          onChanged();
        } else {
          commonConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder mergeCommonConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig value) {
        if (commonConfigBuilder_ == null) {
          if (commonConfig_ != null) {
            commonConfig_ =
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.newBuilder(commonConfig_).mergeFrom(value).buildPartial();
          } else {
            commonConfig_ = value;
          }
          onChanged();
        } else {
          commonConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public Builder clearCommonConfig() {
        if (commonConfigBuilder_ == null) {
          commonConfig_ = null;
          onChanged();
        } else {
          commonConfig_ = null;
          commonConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder getCommonConfigBuilder() {
        
        onChanged();
        return getCommonConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder getCommonConfigOrBuilder() {
        if (commonConfigBuilder_ != null) {
          return commonConfigBuilder_.getMessageOrBuilder();
        } else {
          return commonConfig_ == null ?
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.getDefaultInstance() : commonConfig_;
        }
      }
      /**
       * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig common_config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder> 
          getCommonConfigFieldBuilder() {
        if (commonConfigBuilder_ == null) {
          commonConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigOrBuilder>(
                  getCommonConfig(),
                  getParentForChildren(),
                  isClean());
          commonConfig_ = null;
        }
        return commonConfigBuilder_;
      }

      private boolean disableOnEtagHeader_ ;
      /**
       * <pre>
       * If true, disables compression when the response contains an etag header. When it is false, the
       * filter will preserve weak etags and remove the ones that require strong validation.
       * </pre>
       *
       * <code>bool disable_on_etag_header = 2;</code>
       * @return The disableOnEtagHeader.
       */
      @java.lang.Override
      public boolean getDisableOnEtagHeader() {
        return disableOnEtagHeader_;
      }
      /**
       * <pre>
       * If true, disables compression when the response contains an etag header. When it is false, the
       * filter will preserve weak etags and remove the ones that require strong validation.
       * </pre>
       *
       * <code>bool disable_on_etag_header = 2;</code>
       * @param value The disableOnEtagHeader to set.
       * @return This builder for chaining.
       */
      public Builder setDisableOnEtagHeader(boolean value) {
        
        disableOnEtagHeader_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, disables compression when the response contains an etag header. When it is false, the
       * filter will preserve weak etags and remove the ones that require strong validation.
       * </pre>
       *
       * <code>bool disable_on_etag_header = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableOnEtagHeader() {
        
        disableOnEtagHeader_ = false;
        onChanged();
        return this;
      }

      private boolean removeAcceptEncodingHeader_ ;
      /**
       * <pre>
       * If true, removes accept-encoding from the request headers before dispatching it to the upstream
       * so that responses do not get compressed before reaching the filter.
       * .. attention::
       *    To avoid interfering with other compression filters in the same chain use this option in
       *    the filter closest to the upstream.
       * </pre>
       *
       * <code>bool remove_accept_encoding_header = 3;</code>
       * @return The removeAcceptEncodingHeader.
       */
      @java.lang.Override
      public boolean getRemoveAcceptEncodingHeader() {
        return removeAcceptEncodingHeader_;
      }
      /**
       * <pre>
       * If true, removes accept-encoding from the request headers before dispatching it to the upstream
       * so that responses do not get compressed before reaching the filter.
       * .. attention::
       *    To avoid interfering with other compression filters in the same chain use this option in
       *    the filter closest to the upstream.
       * </pre>
       *
       * <code>bool remove_accept_encoding_header = 3;</code>
       * @param value The removeAcceptEncodingHeader to set.
       * @return This builder for chaining.
       */
      public Builder setRemoveAcceptEncodingHeader(boolean value) {
        
        removeAcceptEncodingHeader_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, removes accept-encoding from the request headers before dispatching it to the upstream
       * so that responses do not get compressed before reaching the filter.
       * .. attention::
       *    To avoid interfering with other compression filters in the same chain use this option in
       *    the filter closest to the upstream.
       * </pre>
       *
       * <code>bool remove_accept_encoding_header = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRemoveAcceptEncodingHeader() {
        
        removeAcceptEncodingHeader_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig)
    private static final io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig();
    }

    public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ResponseDirectionConfig>
        PARSER = new com.google.protobuf.AbstractParser<ResponseDirectionConfig>() {
      @java.lang.Override
      public ResponseDirectionConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ResponseDirectionConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ResponseDirectionConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ResponseDirectionConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int CONTENT_LENGTH_FIELD_NUMBER = 1;
  private com.google.protobuf.UInt32Value contentLength_;
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
   * @return Whether the contentLength field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasContentLength() {
    return contentLength_ != null;
  }
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
   * @return The contentLength.
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.protobuf.UInt32Value getContentLength() {
    return contentLength_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : contentLength_;
  }
  /**
   * <pre>
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.protobuf.UInt32ValueOrBuilder getContentLengthOrBuilder() {
    return getContentLength();
  }

  public static final int CONTENT_TYPE_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList contentType_;
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true];</code>
   * @return A list containing the contentType.
   */
  @java.lang.Deprecated public com.google.protobuf.ProtocolStringList
      getContentTypeList() {
    return contentType_;
  }
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true];</code>
   * @return The count of contentType.
   */
  @java.lang.Deprecated public int getContentTypeCount() {
    return contentType_.size();
  }
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true];</code>
   * @param index The index of the element to return.
   * @return The contentType at the given index.
   */
  @java.lang.Deprecated public java.lang.String getContentType(int index) {
    return contentType_.get(index);
  }
  /**
   * <pre>
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   * </pre>
   *
   * <code>repeated string content_type = 2 [deprecated = true];</code>
   * @param index The index of the value to return.
   * @return The bytes of the contentType at the given index.
   */
  @java.lang.Deprecated public com.google.protobuf.ByteString
      getContentTypeBytes(int index) {
    return contentType_.getByteString(index);
  }

  public static final int DISABLE_ON_ETAG_HEADER_FIELD_NUMBER = 3;
  private boolean disableOnEtagHeader_;
  /**
   * <pre>
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   * </pre>
   *
   * <code>bool disable_on_etag_header = 3 [deprecated = true];</code>
   * @return The disableOnEtagHeader.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean getDisableOnEtagHeader() {
    return disableOnEtagHeader_;
  }

  public static final int REMOVE_ACCEPT_ENCODING_HEADER_FIELD_NUMBER = 4;
  private boolean removeAcceptEncodingHeader_;
  /**
   * <pre>
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   * .. attention::
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   * </pre>
   *
   * <code>bool remove_accept_encoding_header = 4 [deprecated = true];</code>
   * @return The removeAcceptEncodingHeader.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean getRemoveAcceptEncodingHeader() {
    return removeAcceptEncodingHeader_;
  }

  public static final int RUNTIME_ENABLED_FIELD_NUMBER = 5;
  private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag runtimeEnabled_;
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
   * @return Whether the runtimeEnabled field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasRuntimeEnabled() {
    return runtimeEnabled_ != null;
  }
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
   * @return The runtimeEnabled.
   */
  @java.lang.Override
  @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getRuntimeEnabled() {
    return runtimeEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
  }
  /**
   * <pre>
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   * </pre>
   *
   * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getRuntimeEnabledOrBuilder() {
    return getRuntimeEnabled();
  }

  public static final int COMPRESSOR_LIBRARY_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig compressorLibrary_;
  /**
   * <pre>
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
   * is included in Envoy.
   * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
   * @return Whether the compressorLibrary field is set.
   */
  @java.lang.Override
  public boolean hasCompressorLibrary() {
    return compressorLibrary_ != null;
  }
  /**
   * <pre>
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
   * is included in Envoy.
   * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
   * @return The compressorLibrary.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCompressorLibrary() {
    return compressorLibrary_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : compressorLibrary_;
  }
  /**
   * <pre>
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
   * is included in Envoy.
   * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCompressorLibraryOrBuilder() {
    return getCompressorLibrary();
  }

  public static final int REQUEST_DIRECTION_CONFIG_FIELD_NUMBER = 7;
  private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig requestDirectionConfig_;
  /**
   * <pre>
   * Configuration for request compression. Compression is disabled by default if left empty.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
   * @return Whether the requestDirectionConfig field is set.
   */
  @java.lang.Override
  public boolean hasRequestDirectionConfig() {
    return requestDirectionConfig_ != null;
  }
  /**
   * <pre>
   * Configuration for request compression. Compression is disabled by default if left empty.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
   * @return The requestDirectionConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig getRequestDirectionConfig() {
    return requestDirectionConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.getDefaultInstance() : requestDirectionConfig_;
  }
  /**
   * <pre>
   * Configuration for request compression. Compression is disabled by default if left empty.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder getRequestDirectionConfigOrBuilder() {
    return getRequestDirectionConfig();
  }

  public static final int RESPONSE_DIRECTION_CONFIG_FIELD_NUMBER = 8;
  private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig responseDirectionConfig_;
  /**
   * <pre>
   * Configuration for response compression. Compression is enabled by default if left empty.
   * .. attention::
   *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
   *    such as `content_length`, `content_type`, `disable_on_etag_header`,
   *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
   *    Also all the statistics related to response compression will be rooted in
   *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
   *    instead of
   *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
   * @return Whether the responseDirectionConfig field is set.
   */
  @java.lang.Override
  public boolean hasResponseDirectionConfig() {
    return responseDirectionConfig_ != null;
  }
  /**
   * <pre>
   * Configuration for response compression. Compression is enabled by default if left empty.
   * .. attention::
   *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
   *    such as `content_length`, `content_type`, `disable_on_etag_header`,
   *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
   *    Also all the statistics related to response compression will be rooted in
   *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
   *    instead of
   *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
   * @return The responseDirectionConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig getResponseDirectionConfig() {
    return responseDirectionConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.getDefaultInstance() : responseDirectionConfig_;
  }
  /**
   * <pre>
   * Configuration for response compression. Compression is enabled by default if left empty.
   * .. attention::
   *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
   *    such as `content_length`, `content_type`, `disable_on_etag_header`,
   *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
   *    Also all the statistics related to response compression will be rooted in
   *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
   *    instead of
   *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder getResponseDirectionConfigOrBuilder() {
    return getResponseDirectionConfig();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (contentLength_ != null) {
      output.writeMessage(1, getContentLength());
    }
    for (int i = 0; i < contentType_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, contentType_.getRaw(i));
    }
    if (disableOnEtagHeader_ != false) {
      output.writeBool(3, disableOnEtagHeader_);
    }
    if (removeAcceptEncodingHeader_ != false) {
      output.writeBool(4, removeAcceptEncodingHeader_);
    }
    if (runtimeEnabled_ != null) {
      output.writeMessage(5, getRuntimeEnabled());
    }
    if (compressorLibrary_ != null) {
      output.writeMessage(6, getCompressorLibrary());
    }
    if (requestDirectionConfig_ != null) {
      output.writeMessage(7, getRequestDirectionConfig());
    }
    if (responseDirectionConfig_ != null) {
      output.writeMessage(8, getResponseDirectionConfig());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (contentLength_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getContentLength());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < contentType_.size(); i++) {
        dataSize += computeStringSizeNoTag(contentType_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getContentTypeList().size();
    }
    if (disableOnEtagHeader_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, disableOnEtagHeader_);
    }
    if (removeAcceptEncodingHeader_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, removeAcceptEncodingHeader_);
    }
    if (runtimeEnabled_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getRuntimeEnabled());
    }
    if (compressorLibrary_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getCompressorLibrary());
    }
    if (requestDirectionConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getRequestDirectionConfig());
    }
    if (responseDirectionConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getResponseDirectionConfig());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor other = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor) obj;

    if (hasContentLength() != other.hasContentLength()) return false;
    if (hasContentLength()) {
      if (!getContentLength()
          .equals(other.getContentLength())) return false;
    }
    if (!getContentTypeList()
        .equals(other.getContentTypeList())) return false;
    if (getDisableOnEtagHeader()
        != other.getDisableOnEtagHeader()) return false;
    if (getRemoveAcceptEncodingHeader()
        != other.getRemoveAcceptEncodingHeader()) return false;
    if (hasRuntimeEnabled() != other.hasRuntimeEnabled()) return false;
    if (hasRuntimeEnabled()) {
      if (!getRuntimeEnabled()
          .equals(other.getRuntimeEnabled())) return false;
    }
    if (hasCompressorLibrary() != other.hasCompressorLibrary()) return false;
    if (hasCompressorLibrary()) {
      if (!getCompressorLibrary()
          .equals(other.getCompressorLibrary())) return false;
    }
    if (hasRequestDirectionConfig() != other.hasRequestDirectionConfig()) return false;
    if (hasRequestDirectionConfig()) {
      if (!getRequestDirectionConfig()
          .equals(other.getRequestDirectionConfig())) return false;
    }
    if (hasResponseDirectionConfig() != other.hasResponseDirectionConfig()) return false;
    if (hasResponseDirectionConfig()) {
      if (!getResponseDirectionConfig()
          .equals(other.getResponseDirectionConfig())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasContentLength()) {
      hash = (37 * hash) + CONTENT_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getContentLength().hashCode();
    }
    if (getContentTypeCount() > 0) {
      hash = (37 * hash) + CONTENT_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getContentTypeList().hashCode();
    }
    hash = (37 * hash) + DISABLE_ON_ETAG_HEADER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDisableOnEtagHeader());
    hash = (37 * hash) + REMOVE_ACCEPT_ENCODING_HEADER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRemoveAcceptEncodingHeader());
    if (hasRuntimeEnabled()) {
      hash = (37 * hash) + RUNTIME_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + getRuntimeEnabled().hashCode();
    }
    if (hasCompressorLibrary()) {
      hash = (37 * hash) + COMPRESSOR_LIBRARY_FIELD_NUMBER;
      hash = (53 * hash) + getCompressorLibrary().hashCode();
    }
    if (hasRequestDirectionConfig()) {
      hash = (37 * hash) + REQUEST_DIRECTION_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getRequestDirectionConfig().hashCode();
    }
    if (hasResponseDirectionConfig()) {
      hash = (37 * hash) + RESPONSE_DIRECTION_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getResponseDirectionConfig().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.filters.http.compressor.v3.Compressor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.filters.http.compressor.v3.Compressor)
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.class, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (contentLengthBuilder_ == null) {
        contentLength_ = null;
      } else {
        contentLength_ = null;
        contentLengthBuilder_ = null;
      }
      contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      disableOnEtagHeader_ = false;

      removeAcceptEncodingHeader_ = false;

      if (runtimeEnabledBuilder_ == null) {
        runtimeEnabled_ = null;
      } else {
        runtimeEnabled_ = null;
        runtimeEnabledBuilder_ = null;
      }
      if (compressorLibraryBuilder_ == null) {
        compressorLibrary_ = null;
      } else {
        compressorLibrary_ = null;
        compressorLibraryBuilder_ = null;
      }
      if (requestDirectionConfigBuilder_ == null) {
        requestDirectionConfig_ = null;
      } else {
        requestDirectionConfig_ = null;
        requestDirectionConfigBuilder_ = null;
      }
      if (responseDirectionConfigBuilder_ == null) {
        responseDirectionConfig_ = null;
      } else {
        responseDirectionConfig_ = null;
        responseDirectionConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.CompressorProto.internal_static_envoy_extensions_filters_http_compressor_v3_Compressor_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor build() {
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor buildPartial() {
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor result = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor(this);
      int from_bitField0_ = bitField0_;
      if (contentLengthBuilder_ == null) {
        result.contentLength_ = contentLength_;
      } else {
        result.contentLength_ = contentLengthBuilder_.build();
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        contentType_ = contentType_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.contentType_ = contentType_;
      result.disableOnEtagHeader_ = disableOnEtagHeader_;
      result.removeAcceptEncodingHeader_ = removeAcceptEncodingHeader_;
      if (runtimeEnabledBuilder_ == null) {
        result.runtimeEnabled_ = runtimeEnabled_;
      } else {
        result.runtimeEnabled_ = runtimeEnabledBuilder_.build();
      }
      if (compressorLibraryBuilder_ == null) {
        result.compressorLibrary_ = compressorLibrary_;
      } else {
        result.compressorLibrary_ = compressorLibraryBuilder_.build();
      }
      if (requestDirectionConfigBuilder_ == null) {
        result.requestDirectionConfig_ = requestDirectionConfig_;
      } else {
        result.requestDirectionConfig_ = requestDirectionConfigBuilder_.build();
      }
      if (responseDirectionConfigBuilder_ == null) {
        result.responseDirectionConfig_ = responseDirectionConfig_;
      } else {
        result.responseDirectionConfig_ = responseDirectionConfigBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor) {
        return mergeFrom((io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor other) {
      if (other == io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.getDefaultInstance()) return this;
      if (other.hasContentLength()) {
        mergeContentLength(other.getContentLength());
      }
      if (!other.contentType_.isEmpty()) {
        if (contentType_.isEmpty()) {
          contentType_ = other.contentType_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureContentTypeIsMutable();
          contentType_.addAll(other.contentType_);
        }
        onChanged();
      }
      if (other.getDisableOnEtagHeader() != false) {
        setDisableOnEtagHeader(other.getDisableOnEtagHeader());
      }
      if (other.getRemoveAcceptEncodingHeader() != false) {
        setRemoveAcceptEncodingHeader(other.getRemoveAcceptEncodingHeader());
      }
      if (other.hasRuntimeEnabled()) {
        mergeRuntimeEnabled(other.getRuntimeEnabled());
      }
      if (other.hasCompressorLibrary()) {
        mergeCompressorLibrary(other.getCompressorLibrary());
      }
      if (other.hasRequestDirectionConfig()) {
        mergeRequestDirectionConfig(other.getRequestDirectionConfig());
      }
      if (other.hasResponseDirectionConfig()) {
        mergeResponseDirectionConfig(other.getResponseDirectionConfig());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.UInt32Value contentLength_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> contentLengthBuilder_;
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     * @return Whether the contentLength field is set.
     */
    @java.lang.Deprecated public boolean hasContentLength() {
      return contentLengthBuilder_ != null || contentLength_ != null;
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     * @return The contentLength.
     */
    @java.lang.Deprecated public com.google.protobuf.UInt32Value getContentLength() {
      if (contentLengthBuilder_ == null) {
        return contentLength_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : contentLength_;
      } else {
        return contentLengthBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setContentLength(com.google.protobuf.UInt32Value value) {
      if (contentLengthBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        contentLength_ = value;
        onChanged();
      } else {
        contentLengthBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setContentLength(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (contentLengthBuilder_ == null) {
        contentLength_ = builderForValue.build();
        onChanged();
      } else {
        contentLengthBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder mergeContentLength(com.google.protobuf.UInt32Value value) {
      if (contentLengthBuilder_ == null) {
        if (contentLength_ != null) {
          contentLength_ =
            com.google.protobuf.UInt32Value.newBuilder(contentLength_).mergeFrom(value).buildPartial();
        } else {
          contentLength_ = value;
        }
        onChanged();
      } else {
        contentLengthBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearContentLength() {
      if (contentLengthBuilder_ == null) {
        contentLength_ = null;
        onChanged();
      } else {
        contentLength_ = null;
        contentLengthBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.UInt32Value.Builder getContentLengthBuilder() {
      
      onChanged();
      return getContentLengthFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.UInt32ValueOrBuilder getContentLengthOrBuilder() {
      if (contentLengthBuilder_ != null) {
        return contentLengthBuilder_.getMessageOrBuilder();
      } else {
        return contentLength_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : contentLength_;
      }
    }
    /**
     * <pre>
     * Minimum response length, in bytes, which will trigger compression. The default value is 30.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value content_length = 1 [deprecated = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getContentLengthFieldBuilder() {
      if (contentLengthBuilder_ == null) {
        contentLengthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getContentLength(),
                getParentForChildren(),
                isClean());
        contentLength_ = null;
      }
      return contentLengthBuilder_;
    }

    private com.google.protobuf.LazyStringList contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureContentTypeIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        contentType_ = new com.google.protobuf.LazyStringArrayList(contentType_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @return A list containing the contentType.
     */
    @java.lang.Deprecated public com.google.protobuf.ProtocolStringList
        getContentTypeList() {
      return contentType_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @return The count of contentType.
     */
    @java.lang.Deprecated public int getContentTypeCount() {
      return contentType_.size();
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @param index The index of the element to return.
     * @return The contentType at the given index.
     */
    @java.lang.Deprecated public java.lang.String getContentType(int index) {
      return contentType_.get(index);
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @param index The index of the value to return.
     * @return The bytes of the contentType at the given index.
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getContentTypeBytes(int index) {
      return contentType_.getByteString(index);
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @param index The index to set the value at.
     * @param value The contentType to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setContentType(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureContentTypeIsMutable();
      contentType_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @param value The contentType to add.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder addContentType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureContentTypeIsMutable();
      contentType_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @param values The contentType to add.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder addAllContentType(
        java.lang.Iterable<java.lang.String> values) {
      ensureContentTypeIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, contentType_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearContentType() {
      contentType_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Set of strings that allows specifying which mime-types yield compression; e.g.,
     * application/json, text/html, etc. When this field is not defined, compression will be applied
     * to the following mime-types: "application/javascript", "application/json",
     * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
     * and their synonyms.
     * </pre>
     *
     * <code>repeated string content_type = 2 [deprecated = true];</code>
     * @param value The bytes of the contentType to add.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder addContentTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureContentTypeIsMutable();
      contentType_.add(value);
      onChanged();
      return this;
    }

    private boolean disableOnEtagHeader_ ;
    /**
     * <pre>
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     * </pre>
     *
     * <code>bool disable_on_etag_header = 3 [deprecated = true];</code>
     * @return The disableOnEtagHeader.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getDisableOnEtagHeader() {
      return disableOnEtagHeader_;
    }
    /**
     * <pre>
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     * </pre>
     *
     * <code>bool disable_on_etag_header = 3 [deprecated = true];</code>
     * @param value The disableOnEtagHeader to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setDisableOnEtagHeader(boolean value) {
      
      disableOnEtagHeader_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, disables compression when the response contains an etag header. When it is false, the
     * filter will preserve weak etags and remove the ones that require strong validation.
     * </pre>
     *
     * <code>bool disable_on_etag_header = 3 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearDisableOnEtagHeader() {
      
      disableOnEtagHeader_ = false;
      onChanged();
      return this;
    }

    private boolean removeAcceptEncodingHeader_ ;
    /**
     * <pre>
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention::
     *    To avoid interfering with other compression filters in the same chain use this option in
     *    the filter closest to the upstream.
     * </pre>
     *
     * <code>bool remove_accept_encoding_header = 4 [deprecated = true];</code>
     * @return The removeAcceptEncodingHeader.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getRemoveAcceptEncodingHeader() {
      return removeAcceptEncodingHeader_;
    }
    /**
     * <pre>
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention::
     *    To avoid interfering with other compression filters in the same chain use this option in
     *    the filter closest to the upstream.
     * </pre>
     *
     * <code>bool remove_accept_encoding_header = 4 [deprecated = true];</code>
     * @param value The removeAcceptEncodingHeader to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setRemoveAcceptEncodingHeader(boolean value) {
      
      removeAcceptEncodingHeader_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If true, removes accept-encoding from the request headers before dispatching it to the upstream
     * so that responses do not get compressed before reaching the filter.
     * .. attention::
     *    To avoid interfering with other compression filters in the same chain use this option in
     *    the filter closest to the upstream.
     * </pre>
     *
     * <code>bool remove_accept_encoding_header = 4 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearRemoveAcceptEncodingHeader() {
      
      removeAcceptEncodingHeader_ = false;
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag runtimeEnabled_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> runtimeEnabledBuilder_;
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     * @return Whether the runtimeEnabled field is set.
     */
    @java.lang.Deprecated public boolean hasRuntimeEnabled() {
      return runtimeEnabledBuilder_ != null || runtimeEnabled_ != null;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     * @return The runtimeEnabled.
     */
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag getRuntimeEnabled() {
      if (runtimeEnabledBuilder_ == null) {
        return runtimeEnabled_ == null ? io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
      } else {
        return runtimeEnabledBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setRuntimeEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
      if (runtimeEnabledBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        runtimeEnabled_ = value;
        onChanged();
      } else {
        runtimeEnabledBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setRuntimeEnabled(
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder builderForValue) {
      if (runtimeEnabledBuilder_ == null) {
        runtimeEnabled_ = builderForValue.build();
        onChanged();
      } else {
        runtimeEnabledBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder mergeRuntimeEnabled(io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag value) {
      if (runtimeEnabledBuilder_ == null) {
        if (runtimeEnabled_ != null) {
          runtimeEnabled_ =
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.newBuilder(runtimeEnabled_).mergeFrom(value).buildPartial();
        } else {
          runtimeEnabled_ = value;
        }
        onChanged();
      } else {
        runtimeEnabledBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearRuntimeEnabled() {
      if (runtimeEnabledBuilder_ == null) {
        runtimeEnabled_ = null;
        onChanged();
      } else {
        runtimeEnabled_ = null;
        runtimeEnabledBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder getRuntimeEnabledBuilder() {
      
      onChanged();
      return getRuntimeEnabledFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    @java.lang.Deprecated public io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder getRuntimeEnabledOrBuilder() {
      if (runtimeEnabledBuilder_ != null) {
        return runtimeEnabledBuilder_.getMessageOrBuilder();
      } else {
        return runtimeEnabled_ == null ?
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.getDefaultInstance() : runtimeEnabled_;
      }
    }
    /**
     * <pre>
     * Runtime flag that controls whether the filter is enabled or not. If set to false, the
     * filter will operate as a pass-through filter. If not specified, defaults to enabled.
     * </pre>
     *
     * <code>.envoy.config.core.v3.RuntimeFeatureFlag runtime_enabled = 5 [deprecated = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder> 
        getRuntimeEnabledFieldBuilder() {
      if (runtimeEnabledBuilder_ == null) {
        runtimeEnabledBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlag.Builder, io.envoyproxy.envoy.config.core.v3.RuntimeFeatureFlagOrBuilder>(
                getRuntimeEnabled(),
                getParentForChildren(),
                isClean());
        runtimeEnabled_ = null;
      }
      return runtimeEnabledBuilder_;
    }

    private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig compressorLibrary_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> compressorLibraryBuilder_;
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     * @return Whether the compressorLibrary field is set.
     */
    public boolean hasCompressorLibrary() {
      return compressorLibraryBuilder_ != null || compressorLibrary_ != null;
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     * @return The compressorLibrary.
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCompressorLibrary() {
      if (compressorLibraryBuilder_ == null) {
        return compressorLibrary_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : compressorLibrary_;
      } else {
        return compressorLibraryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    public Builder setCompressorLibrary(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (compressorLibraryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        compressorLibrary_ = value;
        onChanged();
      } else {
        compressorLibraryBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    public Builder setCompressorLibrary(
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
      if (compressorLibraryBuilder_ == null) {
        compressorLibrary_ = builderForValue.build();
        onChanged();
      } else {
        compressorLibraryBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    public Builder mergeCompressorLibrary(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (compressorLibraryBuilder_ == null) {
        if (compressorLibrary_ != null) {
          compressorLibrary_ =
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder(compressorLibrary_).mergeFrom(value).buildPartial();
        } else {
          compressorLibrary_ = value;
        }
        onChanged();
      } else {
        compressorLibraryBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    public Builder clearCompressorLibrary() {
      if (compressorLibraryBuilder_ == null) {
        compressorLibrary_ = null;
        onChanged();
      } else {
        compressorLibrary_ = null;
        compressorLibraryBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getCompressorLibraryBuilder() {
      
      onChanged();
      return getCompressorLibraryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCompressorLibraryOrBuilder() {
      if (compressorLibraryBuilder_ != null) {
        return compressorLibraryBuilder_.getMessageOrBuilder();
      } else {
        return compressorLibrary_ == null ?
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : compressorLibrary_;
      }
    }
    /**
     * <pre>
     * A compressor library to use for compression. Currently only
     * :ref:`envoy.compression.gzip.compressor&lt;envoy_api_msg_extensions.compression.gzip.compressor.v3.Gzip&gt;`
     * is included in Envoy.
     * This field is ignored if used in the context of the gzip http-filter, but is mandatory otherwise.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig compressor_library = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
        getCompressorLibraryFieldBuilder() {
      if (compressorLibraryBuilder_ == null) {
        compressorLibraryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                getCompressorLibrary(),
                getParentForChildren(),
                isClean());
        compressorLibrary_ = null;
      }
      return compressorLibraryBuilder_;
    }

    private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig requestDirectionConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder> requestDirectionConfigBuilder_;
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     * @return Whether the requestDirectionConfig field is set.
     */
    public boolean hasRequestDirectionConfig() {
      return requestDirectionConfigBuilder_ != null || requestDirectionConfig_ != null;
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     * @return The requestDirectionConfig.
     */
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig getRequestDirectionConfig() {
      if (requestDirectionConfigBuilder_ == null) {
        return requestDirectionConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.getDefaultInstance() : requestDirectionConfig_;
      } else {
        return requestDirectionConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    public Builder setRequestDirectionConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig value) {
      if (requestDirectionConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        requestDirectionConfig_ = value;
        onChanged();
      } else {
        requestDirectionConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    public Builder setRequestDirectionConfig(
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder builderForValue) {
      if (requestDirectionConfigBuilder_ == null) {
        requestDirectionConfig_ = builderForValue.build();
        onChanged();
      } else {
        requestDirectionConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    public Builder mergeRequestDirectionConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig value) {
      if (requestDirectionConfigBuilder_ == null) {
        if (requestDirectionConfig_ != null) {
          requestDirectionConfig_ =
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.newBuilder(requestDirectionConfig_).mergeFrom(value).buildPartial();
        } else {
          requestDirectionConfig_ = value;
        }
        onChanged();
      } else {
        requestDirectionConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    public Builder clearRequestDirectionConfig() {
      if (requestDirectionConfigBuilder_ == null) {
        requestDirectionConfig_ = null;
        onChanged();
      } else {
        requestDirectionConfig_ = null;
        requestDirectionConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder getRequestDirectionConfigBuilder() {
      
      onChanged();
      return getRequestDirectionConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder getRequestDirectionConfigOrBuilder() {
      if (requestDirectionConfigBuilder_ != null) {
        return requestDirectionConfigBuilder_.getMessageOrBuilder();
      } else {
        return requestDirectionConfig_ == null ?
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.getDefaultInstance() : requestDirectionConfig_;
      }
    }
    /**
     * <pre>
     * Configuration for request compression. Compression is disabled by default if left empty.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig request_direction_config = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder> 
        getRequestDirectionConfigFieldBuilder() {
      if (requestDirectionConfigBuilder_ == null) {
        requestDirectionConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigOrBuilder>(
                getRequestDirectionConfig(),
                getParentForChildren(),
                isClean());
        requestDirectionConfig_ = null;
      }
      return requestDirectionConfigBuilder_;
    }

    private io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig responseDirectionConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder> responseDirectionConfigBuilder_;
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     * @return Whether the responseDirectionConfig field is set.
     */
    public boolean hasResponseDirectionConfig() {
      return responseDirectionConfigBuilder_ != null || responseDirectionConfig_ != null;
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     * @return The responseDirectionConfig.
     */
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig getResponseDirectionConfig() {
      if (responseDirectionConfigBuilder_ == null) {
        return responseDirectionConfig_ == null ? io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.getDefaultInstance() : responseDirectionConfig_;
      } else {
        return responseDirectionConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    public Builder setResponseDirectionConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig value) {
      if (responseDirectionConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        responseDirectionConfig_ = value;
        onChanged();
      } else {
        responseDirectionConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    public Builder setResponseDirectionConfig(
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder builderForValue) {
      if (responseDirectionConfigBuilder_ == null) {
        responseDirectionConfig_ = builderForValue.build();
        onChanged();
      } else {
        responseDirectionConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    public Builder mergeResponseDirectionConfig(io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig value) {
      if (responseDirectionConfigBuilder_ == null) {
        if (responseDirectionConfig_ != null) {
          responseDirectionConfig_ =
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.newBuilder(responseDirectionConfig_).mergeFrom(value).buildPartial();
        } else {
          responseDirectionConfig_ = value;
        }
        onChanged();
      } else {
        responseDirectionConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    public Builder clearResponseDirectionConfig() {
      if (responseDirectionConfigBuilder_ == null) {
        responseDirectionConfig_ = null;
        onChanged();
      } else {
        responseDirectionConfig_ = null;
        responseDirectionConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder getResponseDirectionConfigBuilder() {
      
      onChanged();
      return getResponseDirectionConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder getResponseDirectionConfigOrBuilder() {
      if (responseDirectionConfigBuilder_ != null) {
        return responseDirectionConfigBuilder_.getMessageOrBuilder();
      } else {
        return responseDirectionConfig_ == null ?
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.getDefaultInstance() : responseDirectionConfig_;
      }
    }
    /**
     * <pre>
     * Configuration for response compression. Compression is enabled by default if left empty.
     * .. attention::
     *    If the field is not empty then the duplicate deprecated fields of the `Compressor` message,
     *    such as `content_length`, `content_type`, `disable_on_etag_header`,
     *    `remove_accept_encoding_header` and `runtime_enabled`, are ignored.
     *    Also all the statistics related to response compression will be rooted in
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.response.*`
     *    instead of
     *    `&lt;stat_prefix&gt;.compressor.&lt;compressor_library.name&gt;.&lt;compressor_library_stat_prefix&gt;.*`.
     * </pre>
     *
     * <code>.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig response_direction_config = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder> 
        getResponseDirectionConfigFieldBuilder() {
      if (responseDirectionConfigBuilder_ == null) {
        responseDirectionConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.Builder, io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigOrBuilder>(
                getResponseDirectionConfig(),
                getParentForChildren(),
                isClean());
        responseDirectionConfig_ = null;
      }
      return responseDirectionConfigBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.filters.http.compressor.v3.Compressor)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.filters.http.compressor.v3.Compressor)
  private static final io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor();
  }

  public static io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Compressor>
      PARSER = new com.google.protobuf.AbstractParser<Compressor>() {
    @java.lang.Override
    public Compressor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Compressor(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Compressor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Compressor> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.filters.http.compressor.v3.Compressor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

