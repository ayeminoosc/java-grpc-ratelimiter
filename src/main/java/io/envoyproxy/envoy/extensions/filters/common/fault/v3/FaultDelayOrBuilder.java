// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/common/fault/v3/fault.proto

package io.envoyproxy.envoy.extensions.filters.common.fault.v3;

public interface FaultDelayOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.common.fault.v3.FaultDelay)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Add a fixed delay before forwarding the operation upstream. See
   * https://developers.google.com/protocol-buffers/docs/proto3#json for
   * the JSON/YAML Duration mapping. For HTTP/Mongo/Redis, the specified
   * delay will be injected before a new request/operation. For TCP
   * connections, the proxying of the connection upstream will be delayed
   * for the specified period. This is required if type is FIXED.
   * </pre>
   *
   * <code>.google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the fixedDelay field is set.
   */
  boolean hasFixedDelay();
  /**
   * <pre>
   * Add a fixed delay before forwarding the operation upstream. See
   * https://developers.google.com/protocol-buffers/docs/proto3#json for
   * the JSON/YAML Duration mapping. For HTTP/Mongo/Redis, the specified
   * delay will be injected before a new request/operation. For TCP
   * connections, the proxying of the connection upstream will be delayed
   * for the specified period. This is required if type is FIXED.
   * </pre>
   *
   * <code>.google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = { ... }</code>
   * @return The fixedDelay.
   */
  com.google.protobuf.Duration getFixedDelay();
  /**
   * <pre>
   * Add a fixed delay before forwarding the operation upstream. See
   * https://developers.google.com/protocol-buffers/docs/proto3#json for
   * the JSON/YAML Duration mapping. For HTTP/Mongo/Redis, the specified
   * delay will be injected before a new request/operation. For TCP
   * connections, the proxying of the connection upstream will be delayed
   * for the specified period. This is required if type is FIXED.
   * </pre>
   *
   * <code>.google.protobuf.Duration fixed_delay = 3 [(.validate.rules) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getFixedDelayOrBuilder();

  /**
   * <pre>
   * Fault delays are controlled via an HTTP header (if applicable).
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelay header_delay = 5;</code>
   * @return Whether the headerDelay field is set.
   */
  boolean hasHeaderDelay();
  /**
   * <pre>
   * Fault delays are controlled via an HTTP header (if applicable).
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelay header_delay = 5;</code>
   * @return The headerDelay.
   */
  io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelay getHeaderDelay();
  /**
   * <pre>
   * Fault delays are controlled via an HTTP header (if applicable).
   * </pre>
   *
   * <code>.envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelay header_delay = 5;</code>
   */
  io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelayOrBuilder getHeaderDelayOrBuilder();

  /**
   * <pre>
   * The percentage of operations/connections/requests on which the delay will be injected.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percentage = 4;</code>
   * @return Whether the percentage field is set.
   */
  boolean hasPercentage();
  /**
   * <pre>
   * The percentage of operations/connections/requests on which the delay will be injected.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percentage = 4;</code>
   * @return The percentage.
   */
  io.envoyproxy.envoy.type.v3.FractionalPercent getPercentage();
  /**
   * <pre>
   * The percentage of operations/connections/requests on which the delay will be injected.
   * </pre>
   *
   * <code>.envoy.type.v3.FractionalPercent percentage = 4;</code>
   */
  io.envoyproxy.envoy.type.v3.FractionalPercentOrBuilder getPercentageOrBuilder();

  public io.envoyproxy.envoy.extensions.filters.common.fault.v3.FaultDelay.FaultDelaySecifierCase getFaultDelaySecifierCase();
}
