// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/filters/http/jwt_authn/v3/config.proto

package io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3;

public interface RequirementRuleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.filters.http.jwt_authn.v3.RequirementRule)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The route matching parameter. Only when the match is satisfied, the "requires" field will
   * apply.
   * For example: following match will match all requests.
   * .. code-block:: yaml
   *    match:
   *      prefix: /
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch match = 1 [(.validate.rules) = { ... }</code>
   * @return Whether the match field is set.
   */
  boolean hasMatch();
  /**
   * <pre>
   * The route matching parameter. Only when the match is satisfied, the "requires" field will
   * apply.
   * For example: following match will match all requests.
   * .. code-block:: yaml
   *    match:
   *      prefix: /
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch match = 1 [(.validate.rules) = { ... }</code>
   * @return The match.
   */
  io.envoyproxy.envoy.config.route.v3.RouteMatch getMatch();
  /**
   * <pre>
   * The route matching parameter. Only when the match is satisfied, the "requires" field will
   * apply.
   * For example: following match will match all requests.
   * .. code-block:: yaml
   *    match:
   *      prefix: /
   * </pre>
   *
   * <code>.envoy.config.route.v3.RouteMatch match = 1 [(.validate.rules) = { ... }</code>
   */
  io.envoyproxy.envoy.config.route.v3.RouteMatchOrBuilder getMatchOrBuilder();

  /**
   * <pre>
   * Specify a Jwt requirement. Please see detail comment in message JwtRequirement.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement requires = 2;</code>
   * @return Whether the requires field is set.
   */
  boolean hasRequires();
  /**
   * <pre>
   * Specify a Jwt requirement. Please see detail comment in message JwtRequirement.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement requires = 2;</code>
   * @return The requires.
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement getRequires();
  /**
   * <pre>
   * Specify a Jwt requirement. Please see detail comment in message JwtRequirement.
   * </pre>
   *
   * <code>.envoy.extensions.filters.http.jwt_authn.v3.JwtRequirement requires = 2;</code>
   */
  io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.JwtRequirementOrBuilder getRequiresOrBuilder();

  /**
   * <pre>
   * Use requirement_name to specify a Jwt requirement.
   * This requirement_name MUST be specified at the
   * :ref:`requirement_map &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtAuthentication.requirement_map&gt;`
   * in `JwtAuthentication`.
   * </pre>
   *
   * <code>string requirement_name = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the requirementName field is set.
   */
  boolean hasRequirementName();
  /**
   * <pre>
   * Use requirement_name to specify a Jwt requirement.
   * This requirement_name MUST be specified at the
   * :ref:`requirement_map &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtAuthentication.requirement_map&gt;`
   * in `JwtAuthentication`.
   * </pre>
   *
   * <code>string requirement_name = 3 [(.validate.rules) = { ... }</code>
   * @return The requirementName.
   */
  java.lang.String getRequirementName();
  /**
   * <pre>
   * Use requirement_name to specify a Jwt requirement.
   * This requirement_name MUST be specified at the
   * :ref:`requirement_map &lt;envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtAuthentication.requirement_map&gt;`
   * in `JwtAuthentication`.
   * </pre>
   *
   * <code>string requirement_name = 3 [(.validate.rules) = { ... }</code>
   * @return The bytes for requirementName.
   */
  com.google.protobuf.ByteString
      getRequirementNameBytes();

  public io.envoyproxy.envoy.extensions.filters.http.jwt_authn.v3.RequirementRule.RequirementTypeCase getRequirementTypeCase();
}
