// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto

package io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3;

/**
 * <pre>
 * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
 * &lt;arch_overview_http_dynamic_forward_proxy&gt;` for more information.
 * [#next-free-field: 9]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig}
 */
public final class DnsCacheConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
    DnsCacheConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DnsCacheConfig.newBuilder() to construct.
  private DnsCacheConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DnsCacheConfig() {
    name_ = "";
    dnsLookupFamily_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DnsCacheConfig();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DnsCacheConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            dnsLookupFamily_ = rawValue;
            break;
          }
          case 26: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (dnsRefreshRate_ != null) {
              subBuilder = dnsRefreshRate_.toBuilder();
            }
            dnsRefreshRate_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(dnsRefreshRate_);
              dnsRefreshRate_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (hostTtl_ != null) {
              subBuilder = hostTtl_.toBuilder();
            }
            hostTtl_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(hostTtl_);
              hostTtl_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (maxHosts_ != null) {
              subBuilder = maxHosts_.toBuilder();
            }
            maxHosts_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(maxHosts_);
              maxHosts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder subBuilder = null;
            if (dnsFailureRefreshRate_ != null) {
              subBuilder = dnsFailureRefreshRate_.toBuilder();
            }
            dnsFailureRefreshRate_ = input.readMessage(io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(dnsFailureRefreshRate_);
              dnsFailureRefreshRate_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder subBuilder = null;
            if (dnsCacheCircuitBreaker_ != null) {
              subBuilder = dnsCacheCircuitBreaker_.toBuilder();
            }
            dnsCacheCircuitBreaker_ = input.readMessage(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(dnsCacheCircuitBreaker_);
              dnsCacheCircuitBreaker_ = subBuilder.buildPartial();
            }

            break;
          }
          case 64: {

            useTcpForDnsLookups_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.class, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The name of the cache. Multiple named caches allow independent dynamic forward proxy
   * configurations to operate within a single Envoy process using different configurations. All
   * configurations with the same name *must* otherwise have the same settings when referenced
   * from different configuration components. Configuration will fail to load if this is not
   * the case.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the cache. Multiple named caches allow independent dynamic forward proxy
   * configurations to operate within a single Envoy process using different configurations. All
   * configurations with the same name *must* otherwise have the same settings when referenced
   * from different configuration components. Configuration will fail to load if this is not
   * the case.
   * </pre>
   *
   * <code>string name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DNS_LOOKUP_FAMILY_FIELD_NUMBER = 2;
  private int dnsLookupFamily_;
  /**
   * <pre>
   * The DNS lookup family to use during resolution.
   * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
   * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
   * then configures a host to have a primary and fall back address. With this, we could very
   * likely build a "happy eyeballs" connection pool which would race the primary / fall back
   * address and return the one that wins. This same method could potentially also be used for
   * QUIC to TCP fall back.]
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for dnsLookupFamily.
   */
  @java.lang.Override public int getDnsLookupFamilyValue() {
    return dnsLookupFamily_;
  }
  /**
   * <pre>
   * The DNS lookup family to use during resolution.
   * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
   * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
   * then configures a host to have a primary and fall back address. With this, we could very
   * likely build a "happy eyeballs" connection pool which would race the primary / fall back
   * address and return the one that wins. This same method could potentially also be used for
   * QUIC to TCP fall back.]
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
   * @return The dnsLookupFamily.
   */
  @java.lang.Override public io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily getDnsLookupFamily() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily result = io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.valueOf(dnsLookupFamily_);
    return result == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.UNRECOGNIZED : result;
  }

  public static final int DNS_REFRESH_RATE_FIELD_NUMBER = 3;
  private com.google.protobuf.Duration dnsRefreshRate_;
  /**
   * <pre>
   * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
   * .. note:
   *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
   *  added in a future change.
   * .. note:
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
   * @return Whether the dnsRefreshRate field is set.
   */
  @java.lang.Override
  public boolean hasDnsRefreshRate() {
    return dnsRefreshRate_ != null;
  }
  /**
   * <pre>
   * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
   * .. note:
   *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
   *  added in a future change.
   * .. note:
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
   * @return The dnsRefreshRate.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getDnsRefreshRate() {
    return dnsRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
  }
  /**
   * <pre>
   * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
   * .. note:
   *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
   *  added in a future change.
   * .. note:
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   * </pre>
   *
   * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getDnsRefreshRateOrBuilder() {
    return getDnsRefreshRate();
  }

  public static final int HOST_TTL_FIELD_NUMBER = 4;
  private com.google.protobuf.Duration hostTtl_;
  /**
   * <pre>
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   * .. note:
   *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *  .. note:
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   * </pre>
   *
   * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
   * @return Whether the hostTtl field is set.
   */
  @java.lang.Override
  public boolean hasHostTtl() {
    return hostTtl_ != null;
  }
  /**
   * <pre>
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   * .. note:
   *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *  .. note:
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   * </pre>
   *
   * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
   * @return The hostTtl.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getHostTtl() {
    return hostTtl_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
  }
  /**
   * <pre>
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   * .. note:
   *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *  .. note:
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   * </pre>
   *
   * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getHostTtlOrBuilder() {
    return getHostTtl();
  }

  public static final int MAX_HOSTS_FIELD_NUMBER = 5;
  private com.google.protobuf.UInt32Value maxHosts_;
  /**
   * <pre>
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
   * @return Whether the maxHosts field is set.
   */
  @java.lang.Override
  public boolean hasMaxHosts() {
    return maxHosts_ != null;
  }
  /**
   * <pre>
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
   * @return The maxHosts.
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getMaxHosts() {
    return maxHosts_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
  }
  /**
   * <pre>
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   * .. note:
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32ValueOrBuilder getMaxHostsOrBuilder() {
    return getMaxHosts();
  }

  public static final int DNS_FAILURE_REFRESH_RATE_FIELD_NUMBER = 6;
  private io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate dnsFailureRefreshRate_;
  /**
   * <pre>
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
   * @return Whether the dnsFailureRefreshRate field is set.
   */
  @java.lang.Override
  public boolean hasDnsFailureRefreshRate() {
    return dnsFailureRefreshRate_ != null;
  }
  /**
   * <pre>
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
   * @return The dnsFailureRefreshRate.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate getDnsFailureRefreshRate() {
    return dnsFailureRefreshRate_ == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
  }
  /**
   * <pre>
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   * </pre>
   *
   * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder getDnsFailureRefreshRateOrBuilder() {
    return getDnsFailureRefreshRate();
  }

  public static final int DNS_CACHE_CIRCUIT_BREAKER_FIELD_NUMBER = 7;
  private io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dnsCacheCircuitBreaker_;
  /**
   * <pre>
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
   * envoy will use dns cache circuit breakers with default settings even if this value is not set.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
   * @return Whether the dnsCacheCircuitBreaker field is set.
   */
  @java.lang.Override
  public boolean hasDnsCacheCircuitBreaker() {
    return dnsCacheCircuitBreaker_ != null;
  }
  /**
   * <pre>
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
   * envoy will use dns cache circuit breakers with default settings even if this value is not set.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
   * @return The dnsCacheCircuitBreaker.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers getDnsCacheCircuitBreaker() {
    return dnsCacheCircuitBreaker_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
  }
  /**
   * <pre>
   * The config of circuit breakers for resolver. It provides a configurable threshold.
   * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
   * envoy will use dns cache circuit breakers with default settings even if this value is not set.
   * </pre>
   *
   * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder getDnsCacheCircuitBreakerOrBuilder() {
    return getDnsCacheCircuitBreaker();
  }

  public static final int USE_TCP_FOR_DNS_LOOKUPS_FIELD_NUMBER = 8;
  private boolean useTcpForDnsLookups_;
  /**
   * <pre>
   * [#next-major-version: Reconcile DNS options in a single message.]
   * Always use TCP queries instead of UDP queries for DNS lookups.
   * Setting this value causes failure if the
   * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
   * server startup. Apple' API only uses UDP for DNS resolution.
   * </pre>
   *
   * <code>bool use_tcp_for_dns_lookups = 8;</code>
   * @return The useTcpForDnsLookups.
   */
  @java.lang.Override
  public boolean getUseTcpForDnsLookups() {
    return useTcpForDnsLookups_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (dnsLookupFamily_ != io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.AUTO.getNumber()) {
      output.writeEnum(2, dnsLookupFamily_);
    }
    if (dnsRefreshRate_ != null) {
      output.writeMessage(3, getDnsRefreshRate());
    }
    if (hostTtl_ != null) {
      output.writeMessage(4, getHostTtl());
    }
    if (maxHosts_ != null) {
      output.writeMessage(5, getMaxHosts());
    }
    if (dnsFailureRefreshRate_ != null) {
      output.writeMessage(6, getDnsFailureRefreshRate());
    }
    if (dnsCacheCircuitBreaker_ != null) {
      output.writeMessage(7, getDnsCacheCircuitBreaker());
    }
    if (useTcpForDnsLookups_ != false) {
      output.writeBool(8, useTcpForDnsLookups_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (dnsLookupFamily_ != io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, dnsLookupFamily_);
    }
    if (dnsRefreshRate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDnsRefreshRate());
    }
    if (hostTtl_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getHostTtl());
    }
    if (maxHosts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getMaxHosts());
    }
    if (dnsFailureRefreshRate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getDnsFailureRefreshRate());
    }
    if (dnsCacheCircuitBreaker_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getDnsCacheCircuitBreaker());
    }
    if (useTcpForDnsLookups_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, useTcpForDnsLookups_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig other = (io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (dnsLookupFamily_ != other.dnsLookupFamily_) return false;
    if (hasDnsRefreshRate() != other.hasDnsRefreshRate()) return false;
    if (hasDnsRefreshRate()) {
      if (!getDnsRefreshRate()
          .equals(other.getDnsRefreshRate())) return false;
    }
    if (hasHostTtl() != other.hasHostTtl()) return false;
    if (hasHostTtl()) {
      if (!getHostTtl()
          .equals(other.getHostTtl())) return false;
    }
    if (hasMaxHosts() != other.hasMaxHosts()) return false;
    if (hasMaxHosts()) {
      if (!getMaxHosts()
          .equals(other.getMaxHosts())) return false;
    }
    if (hasDnsFailureRefreshRate() != other.hasDnsFailureRefreshRate()) return false;
    if (hasDnsFailureRefreshRate()) {
      if (!getDnsFailureRefreshRate()
          .equals(other.getDnsFailureRefreshRate())) return false;
    }
    if (hasDnsCacheCircuitBreaker() != other.hasDnsCacheCircuitBreaker()) return false;
    if (hasDnsCacheCircuitBreaker()) {
      if (!getDnsCacheCircuitBreaker()
          .equals(other.getDnsCacheCircuitBreaker())) return false;
    }
    if (getUseTcpForDnsLookups()
        != other.getUseTcpForDnsLookups()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + DNS_LOOKUP_FAMILY_FIELD_NUMBER;
    hash = (53 * hash) + dnsLookupFamily_;
    if (hasDnsRefreshRate()) {
      hash = (37 * hash) + DNS_REFRESH_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getDnsRefreshRate().hashCode();
    }
    if (hasHostTtl()) {
      hash = (37 * hash) + HOST_TTL_FIELD_NUMBER;
      hash = (53 * hash) + getHostTtl().hashCode();
    }
    if (hasMaxHosts()) {
      hash = (37 * hash) + MAX_HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + getMaxHosts().hashCode();
    }
    if (hasDnsFailureRefreshRate()) {
      hash = (37 * hash) + DNS_FAILURE_REFRESH_RATE_FIELD_NUMBER;
      hash = (53 * hash) + getDnsFailureRefreshRate().hashCode();
    }
    if (hasDnsCacheCircuitBreaker()) {
      hash = (37 * hash) + DNS_CACHE_CIRCUIT_BREAKER_FIELD_NUMBER;
      hash = (53 * hash) + getDnsCacheCircuitBreaker().hashCode();
    }
    hash = (37 * hash) + USE_TCP_FOR_DNS_LOOKUPS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getUseTcpForDnsLookups());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
   * &lt;arch_overview_http_dynamic_forward_proxy&gt;` for more information.
   * [#next-free-field: 9]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.class, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      dnsLookupFamily_ = 0;

      if (dnsRefreshRateBuilder_ == null) {
        dnsRefreshRate_ = null;
      } else {
        dnsRefreshRate_ = null;
        dnsRefreshRateBuilder_ = null;
      }
      if (hostTtlBuilder_ == null) {
        hostTtl_ = null;
      } else {
        hostTtl_ = null;
        hostTtlBuilder_ = null;
      }
      if (maxHostsBuilder_ == null) {
        maxHosts_ = null;
      } else {
        maxHosts_ = null;
        maxHostsBuilder_ = null;
      }
      if (dnsFailureRefreshRateBuilder_ == null) {
        dnsFailureRefreshRate_ = null;
      } else {
        dnsFailureRefreshRate_ = null;
        dnsFailureRefreshRateBuilder_ = null;
      }
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        dnsCacheCircuitBreaker_ = null;
      } else {
        dnsCacheCircuitBreaker_ = null;
        dnsCacheCircuitBreakerBuilder_ = null;
      }
      useTcpForDnsLookups_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheProto.internal_static_envoy_extensions_common_dynamic_forward_proxy_v3_DnsCacheConfig_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig build() {
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig buildPartial() {
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig result = new io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig(this);
      result.name_ = name_;
      result.dnsLookupFamily_ = dnsLookupFamily_;
      if (dnsRefreshRateBuilder_ == null) {
        result.dnsRefreshRate_ = dnsRefreshRate_;
      } else {
        result.dnsRefreshRate_ = dnsRefreshRateBuilder_.build();
      }
      if (hostTtlBuilder_ == null) {
        result.hostTtl_ = hostTtl_;
      } else {
        result.hostTtl_ = hostTtlBuilder_.build();
      }
      if (maxHostsBuilder_ == null) {
        result.maxHosts_ = maxHosts_;
      } else {
        result.maxHosts_ = maxHostsBuilder_.build();
      }
      if (dnsFailureRefreshRateBuilder_ == null) {
        result.dnsFailureRefreshRate_ = dnsFailureRefreshRate_;
      } else {
        result.dnsFailureRefreshRate_ = dnsFailureRefreshRateBuilder_.build();
      }
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        result.dnsCacheCircuitBreaker_ = dnsCacheCircuitBreaker_;
      } else {
        result.dnsCacheCircuitBreaker_ = dnsCacheCircuitBreakerBuilder_.build();
      }
      result.useTcpForDnsLookups_ = useTcpForDnsLookups_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig) {
        return mergeFrom((io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig other) {
      if (other == io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.dnsLookupFamily_ != 0) {
        setDnsLookupFamilyValue(other.getDnsLookupFamilyValue());
      }
      if (other.hasDnsRefreshRate()) {
        mergeDnsRefreshRate(other.getDnsRefreshRate());
      }
      if (other.hasHostTtl()) {
        mergeHostTtl(other.getHostTtl());
      }
      if (other.hasMaxHosts()) {
        mergeMaxHosts(other.getMaxHosts());
      }
      if (other.hasDnsFailureRefreshRate()) {
        mergeDnsFailureRefreshRate(other.getDnsFailureRefreshRate());
      }
      if (other.hasDnsCacheCircuitBreaker()) {
        mergeDnsCacheCircuitBreaker(other.getDnsCacheCircuitBreaker());
      }
      if (other.getUseTcpForDnsLookups() != false) {
        setUseTcpForDnsLookups(other.getUseTcpForDnsLookups());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the cache. Multiple named caches allow independent dynamic forward proxy
     * configurations to operate within a single Envoy process using different configurations. All
     * configurations with the same name *must* otherwise have the same settings when referenced
     * from different configuration components. Configuration will fail to load if this is not
     * the case.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private int dnsLookupFamily_ = 0;
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for dnsLookupFamily.
     */
    @java.lang.Override public int getDnsLookupFamilyValue() {
      return dnsLookupFamily_;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for dnsLookupFamily to set.
     * @return This builder for chaining.
     */
    public Builder setDnsLookupFamilyValue(int value) {
      
      dnsLookupFamily_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @return The dnsLookupFamily.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily getDnsLookupFamily() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily result = io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.valueOf(dnsLookupFamily_);
      return result == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @param value The dnsLookupFamily to set.
     * @return This builder for chaining.
     */
    public Builder setDnsLookupFamily(io.envoyproxy.envoy.config.cluster.v3.Cluster.DnsLookupFamily value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      dnsLookupFamily_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The DNS lookup family to use during resolution.
     * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
     * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
     * then configures a host to have a primary and fall back address. With this, we could very
     * likely build a "happy eyeballs" connection pool which would race the primary / fall back
     * address and return the one that wins. This same method could potentially also be used for
     * QUIC to TCP fall back.]
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearDnsLookupFamily() {
      
      dnsLookupFamily_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Duration dnsRefreshRate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> dnsRefreshRateBuilder_;
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     * @return Whether the dnsRefreshRate field is set.
     */
    public boolean hasDnsRefreshRate() {
      return dnsRefreshRateBuilder_ != null || dnsRefreshRate_ != null;
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     * @return The dnsRefreshRate.
     */
    public com.google.protobuf.Duration getDnsRefreshRate() {
      if (dnsRefreshRateBuilder_ == null) {
        return dnsRefreshRate_ == null ? com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
      } else {
        return dnsRefreshRateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsRefreshRate(com.google.protobuf.Duration value) {
      if (dnsRefreshRateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsRefreshRate_ = value;
        onChanged();
      } else {
        dnsRefreshRateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder setDnsRefreshRate(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (dnsRefreshRateBuilder_ == null) {
        dnsRefreshRate_ = builderForValue.build();
        onChanged();
      } else {
        dnsRefreshRateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeDnsRefreshRate(com.google.protobuf.Duration value) {
      if (dnsRefreshRateBuilder_ == null) {
        if (dnsRefreshRate_ != null) {
          dnsRefreshRate_ =
            com.google.protobuf.Duration.newBuilder(dnsRefreshRate_).mergeFrom(value).buildPartial();
        } else {
          dnsRefreshRate_ = value;
        }
        onChanged();
      } else {
        dnsRefreshRateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public Builder clearDnsRefreshRate() {
      if (dnsRefreshRateBuilder_ == null) {
        dnsRefreshRate_ = null;
        onChanged();
      } else {
        dnsRefreshRate_ = null;
        dnsRefreshRateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getDnsRefreshRateBuilder() {
      
      onChanged();
      return getDnsRefreshRateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getDnsRefreshRateOrBuilder() {
      if (dnsRefreshRateBuilder_ != null) {
        return dnsRefreshRateBuilder_.getMessageOrBuilder();
      } else {
        return dnsRefreshRate_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : dnsRefreshRate_;
      }
    }
    /**
     * <pre>
     * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     * .. note:
     *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
     *  added in a future change.
     * .. note:
     * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
     * </pre>
     *
     * <code>.google.protobuf.Duration dns_refresh_rate = 3 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getDnsRefreshRateFieldBuilder() {
      if (dnsRefreshRateBuilder_ == null) {
        dnsRefreshRateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getDnsRefreshRate(),
                getParentForChildren(),
                isClean());
        dnsRefreshRate_ = null;
      }
      return dnsRefreshRateBuilder_;
    }

    private com.google.protobuf.Duration hostTtl_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> hostTtlBuilder_;
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     * @return Whether the hostTtl field is set.
     */
    public boolean hasHostTtl() {
      return hostTtlBuilder_ != null || hostTtl_ != null;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     * @return The hostTtl.
     */
    public com.google.protobuf.Duration getHostTtl() {
      if (hostTtlBuilder_ == null) {
        return hostTtl_ == null ? com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
      } else {
        return hostTtlBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setHostTtl(com.google.protobuf.Duration value) {
      if (hostTtlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hostTtl_ = value;
        onChanged();
      } else {
        hostTtlBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder setHostTtl(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (hostTtlBuilder_ == null) {
        hostTtl_ = builderForValue.build();
        onChanged();
      } else {
        hostTtlBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeHostTtl(com.google.protobuf.Duration value) {
      if (hostTtlBuilder_ == null) {
        if (hostTtl_ != null) {
          hostTtl_ =
            com.google.protobuf.Duration.newBuilder(hostTtl_).mergeFrom(value).buildPartial();
        } else {
          hostTtl_ = value;
        }
        onChanged();
      } else {
        hostTtlBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public Builder clearHostTtl() {
      if (hostTtlBuilder_ == null) {
        hostTtl_ = null;
        onChanged();
      } else {
        hostTtl_ = null;
        hostTtlBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getHostTtlBuilder() {
      
      onChanged();
      return getHostTtlFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getHostTtlOrBuilder() {
      if (hostTtlBuilder_ != null) {
        return hostTtlBuilder_.getMessageOrBuilder();
      } else {
        return hostTtl_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : hostTtl_;
      }
    }
    /**
     * <pre>
     * The TTL for hosts that are unused. Hosts that have not been used in the configured time
     * interval will be purged. If not specified defaults to 5m.
     * .. note:
     *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
     *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
     *   immediately.
     *  .. note:
     *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
     * </pre>
     *
     * <code>.google.protobuf.Duration host_ttl = 4 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getHostTtlFieldBuilder() {
      if (hostTtlBuilder_ == null) {
        hostTtlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getHostTtl(),
                getParentForChildren(),
                isClean());
        hostTtl_ = null;
      }
      return hostTtlBuilder_;
    }

    private com.google.protobuf.UInt32Value maxHosts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> maxHostsBuilder_;
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     * @return Whether the maxHosts field is set.
     */
    public boolean hasMaxHosts() {
      return maxHostsBuilder_ != null || maxHosts_ != null;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     * @return The maxHosts.
     */
    public com.google.protobuf.UInt32Value getMaxHosts() {
      if (maxHostsBuilder_ == null) {
        return maxHosts_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
      } else {
        return maxHostsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxHosts(com.google.protobuf.UInt32Value value) {
      if (maxHostsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxHosts_ = value;
        onChanged();
      } else {
        maxHostsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder setMaxHosts(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (maxHostsBuilder_ == null) {
        maxHosts_ = builderForValue.build();
        onChanged();
      } else {
        maxHostsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder mergeMaxHosts(com.google.protobuf.UInt32Value value) {
      if (maxHostsBuilder_ == null) {
        if (maxHosts_ != null) {
          maxHosts_ =
            com.google.protobuf.UInt32Value.newBuilder(maxHosts_).mergeFrom(value).buildPartial();
        } else {
          maxHosts_ = value;
        }
        onChanged();
      } else {
        maxHostsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public Builder clearMaxHosts() {
      if (maxHostsBuilder_ == null) {
        maxHosts_ = null;
        onChanged();
      } else {
        maxHosts_ = null;
        maxHostsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32Value.Builder getMaxHostsBuilder() {
      
      onChanged();
      return getMaxHostsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    public com.google.protobuf.UInt32ValueOrBuilder getMaxHostsOrBuilder() {
      if (maxHostsBuilder_ != null) {
        return maxHostsBuilder_.getMessageOrBuilder();
      } else {
        return maxHosts_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : maxHosts_;
      }
    }
    /**
     * <pre>
     * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
     * .. note:
     *   The implementation is approximate and enforced independently on each worker thread, thus
     *   it is possible for the maximum hosts in the cache to go slightly above the configured
     *   value depending on timing. This is similar to how other circuit breakers work.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value max_hosts = 5 [(.validate.rules) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMaxHostsFieldBuilder() {
      if (maxHostsBuilder_ == null) {
        maxHostsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMaxHosts(),
                getParentForChildren(),
                isClean());
        maxHosts_ = null;
      }
      return maxHostsBuilder_;
    }

    private io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate dnsFailureRefreshRate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder> dnsFailureRefreshRateBuilder_;
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     * @return Whether the dnsFailureRefreshRate field is set.
     */
    public boolean hasDnsFailureRefreshRate() {
      return dnsFailureRefreshRateBuilder_ != null || dnsFailureRefreshRate_ != null;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     * @return The dnsFailureRefreshRate.
     */
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate getDnsFailureRefreshRate() {
      if (dnsFailureRefreshRateBuilder_ == null) {
        return dnsFailureRefreshRate_ == null ? io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
      } else {
        return dnsFailureRefreshRateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder setDnsFailureRefreshRate(io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate value) {
      if (dnsFailureRefreshRateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsFailureRefreshRate_ = value;
        onChanged();
      } else {
        dnsFailureRefreshRateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder setDnsFailureRefreshRate(
        io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder builderForValue) {
      if (dnsFailureRefreshRateBuilder_ == null) {
        dnsFailureRefreshRate_ = builderForValue.build();
        onChanged();
      } else {
        dnsFailureRefreshRateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder mergeDnsFailureRefreshRate(io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate value) {
      if (dnsFailureRefreshRateBuilder_ == null) {
        if (dnsFailureRefreshRate_ != null) {
          dnsFailureRefreshRate_ =
            io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.newBuilder(dnsFailureRefreshRate_).mergeFrom(value).buildPartial();
        } else {
          dnsFailureRefreshRate_ = value;
        }
        onChanged();
      } else {
        dnsFailureRefreshRateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public Builder clearDnsFailureRefreshRate() {
      if (dnsFailureRefreshRateBuilder_ == null) {
        dnsFailureRefreshRate_ = null;
        onChanged();
      } else {
        dnsFailureRefreshRate_ = null;
        dnsFailureRefreshRateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder getDnsFailureRefreshRateBuilder() {
      
      onChanged();
      return getDnsFailureRefreshRateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    public io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder getDnsFailureRefreshRateOrBuilder() {
      if (dnsFailureRefreshRateBuilder_ != null) {
        return dnsFailureRefreshRateBuilder_.getMessageOrBuilder();
      } else {
        return dnsFailureRefreshRate_ == null ?
            io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.getDefaultInstance() : dnsFailureRefreshRate_;
      }
    }
    /**
     * <pre>
     * If the DNS failure refresh rate is specified,
     * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     * not specified, the failure refresh rate defaults to the dns_refresh_rate.
     * </pre>
     *
     * <code>.envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder> 
        getDnsFailureRefreshRateFieldBuilder() {
      if (dnsFailureRefreshRateBuilder_ == null) {
        dnsFailureRefreshRateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRate.Builder, io.envoyproxy.envoy.config.cluster.v3.Cluster.RefreshRateOrBuilder>(
                getDnsFailureRefreshRate(),
                getParentForChildren(),
                isClean());
        dnsFailureRefreshRate_ = null;
      }
      return dnsFailureRefreshRateBuilder_;
    }

    private io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dnsCacheCircuitBreaker_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder> dnsCacheCircuitBreakerBuilder_;
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     * @return Whether the dnsCacheCircuitBreaker field is set.
     */
    public boolean hasDnsCacheCircuitBreaker() {
      return dnsCacheCircuitBreakerBuilder_ != null || dnsCacheCircuitBreaker_ != null;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     * @return The dnsCacheCircuitBreaker.
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers getDnsCacheCircuitBreaker() {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        return dnsCacheCircuitBreaker_ == null ? io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
      } else {
        return dnsCacheCircuitBreakerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder setDnsCacheCircuitBreaker(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers value) {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dnsCacheCircuitBreaker_ = value;
        onChanged();
      } else {
        dnsCacheCircuitBreakerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder setDnsCacheCircuitBreaker(
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder builderForValue) {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        dnsCacheCircuitBreaker_ = builderForValue.build();
        onChanged();
      } else {
        dnsCacheCircuitBreakerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder mergeDnsCacheCircuitBreaker(io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers value) {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        if (dnsCacheCircuitBreaker_ != null) {
          dnsCacheCircuitBreaker_ =
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.newBuilder(dnsCacheCircuitBreaker_).mergeFrom(value).buildPartial();
        } else {
          dnsCacheCircuitBreaker_ = value;
        }
        onChanged();
      } else {
        dnsCacheCircuitBreakerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public Builder clearDnsCacheCircuitBreaker() {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        dnsCacheCircuitBreaker_ = null;
        onChanged();
      } else {
        dnsCacheCircuitBreaker_ = null;
        dnsCacheCircuitBreakerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder getDnsCacheCircuitBreakerBuilder() {
      
      onChanged();
      return getDnsCacheCircuitBreakerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder getDnsCacheCircuitBreakerOrBuilder() {
      if (dnsCacheCircuitBreakerBuilder_ != null) {
        return dnsCacheCircuitBreakerBuilder_.getMessageOrBuilder();
      } else {
        return dnsCacheCircuitBreaker_ == null ?
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.getDefaultInstance() : dnsCacheCircuitBreaker_;
      }
    }
    /**
     * <pre>
     * The config of circuit breakers for resolver. It provides a configurable threshold.
     * If `envoy.reloadable_features.enable_dns_cache_circuit_breakers` is enabled,
     * envoy will use dns cache circuit breakers with default settings even if this value is not set.
     * </pre>
     *
     * <code>.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder> 
        getDnsCacheCircuitBreakerFieldBuilder() {
      if (dnsCacheCircuitBreakerBuilder_ == null) {
        dnsCacheCircuitBreakerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers.Builder, io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakersOrBuilder>(
                getDnsCacheCircuitBreaker(),
                getParentForChildren(),
                isClean());
        dnsCacheCircuitBreaker_ = null;
      }
      return dnsCacheCircuitBreakerBuilder_;
    }

    private boolean useTcpForDnsLookups_ ;
    /**
     * <pre>
     * [#next-major-version: Reconcile DNS options in a single message.]
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * Setting this value causes failure if the
     * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
     * server startup. Apple' API only uses UDP for DNS resolution.
     * </pre>
     *
     * <code>bool use_tcp_for_dns_lookups = 8;</code>
     * @return The useTcpForDnsLookups.
     */
    @java.lang.Override
    public boolean getUseTcpForDnsLookups() {
      return useTcpForDnsLookups_;
    }
    /**
     * <pre>
     * [#next-major-version: Reconcile DNS options in a single message.]
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * Setting this value causes failure if the
     * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
     * server startup. Apple' API only uses UDP for DNS resolution.
     * </pre>
     *
     * <code>bool use_tcp_for_dns_lookups = 8;</code>
     * @param value The useTcpForDnsLookups to set.
     * @return This builder for chaining.
     */
    public Builder setUseTcpForDnsLookups(boolean value) {
      
      useTcpForDnsLookups_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [#next-major-version: Reconcile DNS options in a single message.]
     * Always use TCP queries instead of UDP queries for DNS lookups.
     * Setting this value causes failure if the
     * ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
     * server startup. Apple' API only uses UDP for DNS resolution.
     * </pre>
     *
     * <code>bool use_tcp_for_dns_lookups = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearUseTcpForDnsLookups() {
      
      useTcpForDnsLookups_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig)
  private static final io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig();
  }

  public static io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DnsCacheConfig>
      PARSER = new com.google.protobuf.AbstractParser<DnsCacheConfig>() {
    @java.lang.Override
    public DnsCacheConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DnsCacheConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DnsCacheConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DnsCacheConfig> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

