// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/tls/v3/common.proto

package io.envoyproxy.envoy.extensions.transport_sockets.tls.v3;

public interface TlsCertificateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.tls.v3.TlsCertificate)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The TLS certificate chain.
   * If *certificate_chain* is a filesystem path, a watch will be added to the
   * parent directory for any file moves to support rotation. This currently
   * only applies to dynamic secrets, when the *TlsCertificate* is delivered via
   * SDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource certificate_chain = 1;</code>
   * @return Whether the certificateChain field is set.
   */
  boolean hasCertificateChain();
  /**
   * <pre>
   * The TLS certificate chain.
   * If *certificate_chain* is a filesystem path, a watch will be added to the
   * parent directory for any file moves to support rotation. This currently
   * only applies to dynamic secrets, when the *TlsCertificate* is delivered via
   * SDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource certificate_chain = 1;</code>
   * @return The certificateChain.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getCertificateChain();
  /**
   * <pre>
   * The TLS certificate chain.
   * If *certificate_chain* is a filesystem path, a watch will be added to the
   * parent directory for any file moves to support rotation. This currently
   * only applies to dynamic secrets, when the *TlsCertificate* is delivered via
   * SDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource certificate_chain = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getCertificateChainOrBuilder();

  /**
   * <pre>
   * The TLS private key.
   * If *private_key* is a filesystem path, a watch will be added to the parent
   * directory for any file moves to support rotation. This currently only
   * applies to dynamic secrets, when the *TlsCertificate* is delivered via SDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource private_key = 2 [(.udpa.annotations.sensitive) = true];</code>
   * @return Whether the privateKey field is set.
   */
  boolean hasPrivateKey();
  /**
   * <pre>
   * The TLS private key.
   * If *private_key* is a filesystem path, a watch will be added to the parent
   * directory for any file moves to support rotation. This currently only
   * applies to dynamic secrets, when the *TlsCertificate* is delivered via SDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource private_key = 2 [(.udpa.annotations.sensitive) = true];</code>
   * @return The privateKey.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getPrivateKey();
  /**
   * <pre>
   * The TLS private key.
   * If *private_key* is a filesystem path, a watch will be added to the parent
   * directory for any file moves to support rotation. This currently only
   * applies to dynamic secrets, when the *TlsCertificate* is delivered via SDS.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource private_key = 2 [(.udpa.annotations.sensitive) = true];</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getPrivateKeyOrBuilder();

  /**
   * <pre>
   * If specified, updates of file-based *certificate_chain* and *private_key*
   * sources will be triggered by this watch. The certificate/key pair will be
   * read together and validated for atomic read consistency (i.e. no
   * intervening modification occurred between cert/key read, verified by file
   * hash comparisons). This allows explicit control over the path watched, by
   * default the parent directories of the filesystem paths in
   * *certificate_chain* and *private_key* are watched if this field is not
   * specified. This only applies when a *TlsCertificate* is delivered by SDS
   * with references to filesystem paths. See the :ref:`SDS key rotation
   * &lt;sds_key_rotation&gt;` documentation for further details.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 7;</code>
   * @return Whether the watchedDirectory field is set.
   */
  boolean hasWatchedDirectory();
  /**
   * <pre>
   * If specified, updates of file-based *certificate_chain* and *private_key*
   * sources will be triggered by this watch. The certificate/key pair will be
   * read together and validated for atomic read consistency (i.e. no
   * intervening modification occurred between cert/key read, verified by file
   * hash comparisons). This allows explicit control over the path watched, by
   * default the parent directories of the filesystem paths in
   * *certificate_chain* and *private_key* are watched if this field is not
   * specified. This only applies when a *TlsCertificate* is delivered by SDS
   * with references to filesystem paths. See the :ref:`SDS key rotation
   * &lt;sds_key_rotation&gt;` documentation for further details.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 7;</code>
   * @return The watchedDirectory.
   */
  io.envoyproxy.envoy.config.core.v3.WatchedDirectory getWatchedDirectory();
  /**
   * <pre>
   * If specified, updates of file-based *certificate_chain* and *private_key*
   * sources will be triggered by this watch. The certificate/key pair will be
   * read together and validated for atomic read consistency (i.e. no
   * intervening modification occurred between cert/key read, verified by file
   * hash comparisons). This allows explicit control over the path watched, by
   * default the parent directories of the filesystem paths in
   * *certificate_chain* and *private_key* are watched if this field is not
   * specified. This only applies when a *TlsCertificate* is delivered by SDS
   * with references to filesystem paths. See the :ref:`SDS key rotation
   * &lt;sds_key_rotation&gt;` documentation for further details.
   * </pre>
   *
   * <code>.envoy.config.core.v3.WatchedDirectory watched_directory = 7;</code>
   */
  io.envoyproxy.envoy.config.core.v3.WatchedDirectoryOrBuilder getWatchedDirectoryOrBuilder();

  /**
   * <pre>
   * BoringSSL private key method provider. This is an alternative to :ref:`private_key
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key&gt;` field. This can't be
   * marked as ``oneof`` due to API compatibility reasons. Setting both :ref:`private_key
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key&gt;` and
   * :ref:`private_key_provider
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key_provider&gt;` fields will result in an
   * error.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider private_key_provider = 6;</code>
   * @return Whether the privateKeyProvider field is set.
   */
  boolean hasPrivateKeyProvider();
  /**
   * <pre>
   * BoringSSL private key method provider. This is an alternative to :ref:`private_key
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key&gt;` field. This can't be
   * marked as ``oneof`` due to API compatibility reasons. Setting both :ref:`private_key
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key&gt;` and
   * :ref:`private_key_provider
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key_provider&gt;` fields will result in an
   * error.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider private_key_provider = 6;</code>
   * @return The privateKeyProvider.
   */
  io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider getPrivateKeyProvider();
  /**
   * <pre>
   * BoringSSL private key method provider. This is an alternative to :ref:`private_key
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key&gt;` field. This can't be
   * marked as ``oneof`` due to API compatibility reasons. Setting both :ref:`private_key
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key&gt;` and
   * :ref:`private_key_provider
   * &lt;envoy_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.private_key_provider&gt;` fields will result in an
   * error.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProvider private_key_provider = 6;</code>
   */
  io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.PrivateKeyProviderOrBuilder getPrivateKeyProviderOrBuilder();

  /**
   * <pre>
   * The password to decrypt the TLS private key. If this field is not set, it is assumed that the
   * TLS private key is not password encrypted.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource password = 3 [(.udpa.annotations.sensitive) = true];</code>
   * @return Whether the password field is set.
   */
  boolean hasPassword();
  /**
   * <pre>
   * The password to decrypt the TLS private key. If this field is not set, it is assumed that the
   * TLS private key is not password encrypted.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource password = 3 [(.udpa.annotations.sensitive) = true];</code>
   * @return The password.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getPassword();
  /**
   * <pre>
   * The password to decrypt the TLS private key. If this field is not set, it is assumed that the
   * TLS private key is not password encrypted.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource password = 3 [(.udpa.annotations.sensitive) = true];</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getPasswordOrBuilder();

  /**
   * <pre>
   * The OCSP response to be stapled with this certificate during the handshake.
   * The response must be DER-encoded and may only be  provided via ``filename`` or
   * ``inline_bytes``. The response may pertain to only one certificate.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource ocsp_staple = 4;</code>
   * @return Whether the ocspStaple field is set.
   */
  boolean hasOcspStaple();
  /**
   * <pre>
   * The OCSP response to be stapled with this certificate during the handshake.
   * The response must be DER-encoded and may only be  provided via ``filename`` or
   * ``inline_bytes``. The response may pertain to only one certificate.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource ocsp_staple = 4;</code>
   * @return The ocspStaple.
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getOcspStaple();
  /**
   * <pre>
   * The OCSP response to be stapled with this certificate during the handshake.
   * The response must be DER-encoded and may only be  provided via ``filename`` or
   * ``inline_bytes``. The response may pertain to only one certificate.
   * </pre>
   *
   * <code>.envoy.config.core.v3.DataSource ocsp_staple = 4;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getOcspStapleOrBuilder();

  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;</code>
   */
  java.util.List<io.envoyproxy.envoy.config.core.v3.DataSource> 
      getSignedCertificateTimestampList();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSource getSignedCertificateTimestamp(int index);
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;</code>
   */
  int getSignedCertificateTimestampCount();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;</code>
   */
  java.util.List<? extends io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder> 
      getSignedCertificateTimestampOrBuilderList();
  /**
   * <pre>
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>repeated .envoy.config.core.v3.DataSource signed_certificate_timestamp = 5;</code>
   */
  io.envoyproxy.envoy.config.core.v3.DataSourceOrBuilder getSignedCertificateTimestampOrBuilder(
      int index);
}
