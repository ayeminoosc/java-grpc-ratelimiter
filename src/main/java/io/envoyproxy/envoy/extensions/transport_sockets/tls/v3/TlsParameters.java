// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/tls/v3/common.proto

package io.envoyproxy.envoy.extensions.transport_sockets.tls.v3;

/**
 * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.TlsParameters}
 */
public final class TlsParameters extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.transport_sockets.tls.v3.TlsParameters)
    TlsParametersOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TlsParameters.newBuilder() to construct.
  private TlsParameters(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TlsParameters() {
    tlsMinimumProtocolVersion_ = 0;
    tlsMaximumProtocolVersion_ = 0;
    cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    ecdhCurves_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TlsParameters();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TlsParameters(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            tlsMinimumProtocolVersion_ = rawValue;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            tlsMaximumProtocolVersion_ = rawValue;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              cipherSuites_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            cipherSuites_.add(s);
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              ecdhCurves_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            ecdhCurves_.add(s);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        cipherSuites_ = cipherSuites_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        ecdhCurves_ = ecdhCurves_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsParameters_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsParameters_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder.class);
  }

  /**
   * Protobuf enum {@code envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol}
   */
  public enum TlsProtocol
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Envoy will choose the optimal TLS version.
     * </pre>
     *
     * <code>TLS_AUTO = 0;</code>
     */
    TLS_AUTO(0),
    /**
     * <pre>
     * TLS 1.0
     * </pre>
     *
     * <code>TLSv1_0 = 1;</code>
     */
    TLSv1_0(1),
    /**
     * <pre>
     * TLS 1.1
     * </pre>
     *
     * <code>TLSv1_1 = 2;</code>
     */
    TLSv1_1(2),
    /**
     * <pre>
     * TLS 1.2
     * </pre>
     *
     * <code>TLSv1_2 = 3;</code>
     */
    TLSv1_2(3),
    /**
     * <pre>
     * TLS 1.3
     * </pre>
     *
     * <code>TLSv1_3 = 4;</code>
     */
    TLSv1_3(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Envoy will choose the optimal TLS version.
     * </pre>
     *
     * <code>TLS_AUTO = 0;</code>
     */
    public static final int TLS_AUTO_VALUE = 0;
    /**
     * <pre>
     * TLS 1.0
     * </pre>
     *
     * <code>TLSv1_0 = 1;</code>
     */
    public static final int TLSv1_0_VALUE = 1;
    /**
     * <pre>
     * TLS 1.1
     * </pre>
     *
     * <code>TLSv1_1 = 2;</code>
     */
    public static final int TLSv1_1_VALUE = 2;
    /**
     * <pre>
     * TLS 1.2
     * </pre>
     *
     * <code>TLSv1_2 = 3;</code>
     */
    public static final int TLSv1_2_VALUE = 3;
    /**
     * <pre>
     * TLS 1.3
     * </pre>
     *
     * <code>TLSv1_3 = 4;</code>
     */
    public static final int TLSv1_3_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TlsProtocol valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TlsProtocol forNumber(int value) {
      switch (value) {
        case 0: return TLS_AUTO;
        case 1: return TLSv1_0;
        case 2: return TLSv1_1;
        case 3: return TLSv1_2;
        case 4: return TLSv1_3;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TlsProtocol>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TlsProtocol> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TlsProtocol>() {
            public TlsProtocol findValueByNumber(int number) {
              return TlsProtocol.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.getDescriptor().getEnumTypes().get(0);
    }

    private static final TlsProtocol[] VALUES = values();

    public static TlsProtocol valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TlsProtocol(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol)
  }

  public static final int TLS_MINIMUM_PROTOCOL_VERSION_FIELD_NUMBER = 1;
  private int tlsMinimumProtocolVersion_;
  /**
   * <pre>
   * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for tlsMinimumProtocolVersion.
   */
  @java.lang.Override public int getTlsMinimumProtocolVersionValue() {
    return tlsMinimumProtocolVersion_;
  }
  /**
   * <pre>
   * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
   * @return The tlsMinimumProtocolVersion.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol getTlsMinimumProtocolVersion() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol result = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.valueOf(tlsMinimumProtocolVersion_);
    return result == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.UNRECOGNIZED : result;
  }

  public static final int TLS_MAXIMUM_PROTOCOL_VERSION_FIELD_NUMBER = 2;
  private int tlsMaximumProtocolVersion_;
  /**
   * <pre>
   * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for tlsMaximumProtocolVersion.
   */
  @java.lang.Override public int getTlsMaximumProtocolVersionValue() {
    return tlsMaximumProtocolVersion_;
  }
  /**
   * <pre>
   * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
   * servers.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
   * @return The tlsMaximumProtocolVersion.
   */
  @java.lang.Override public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol getTlsMaximumProtocolVersion() {
    @SuppressWarnings("deprecation")
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol result = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.valueOf(tlsMaximumProtocolVersion_);
    return result == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.UNRECOGNIZED : result;
  }

  public static final int CIPHER_SUITES_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList cipherSuites_;
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @return A list containing the cipherSuites.
   */
  public com.google.protobuf.ProtocolStringList
      getCipherSuitesList() {
    return cipherSuites_;
  }
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @return The count of cipherSuites.
   */
  public int getCipherSuitesCount() {
    return cipherSuites_.size();
  }
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @param index The index of the element to return.
   * @return The cipherSuites at the given index.
   */
  public java.lang.String getCipherSuites(int index) {
    return cipherSuites_.get(index);
  }
  /**
   * <pre>
   * If specified, the TLS listener will only support the specified `cipher list
   * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
   * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
   * specified, the default list will be used.
   * In non-FIPS builds, the default cipher list is:
   * .. code-block:: none
   *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
   *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
   * .. code-block:: none
   *   ECDHE-ECDSA-AES128-GCM-SHA256
   *   ECDHE-RSA-AES128-GCM-SHA256
   *   ECDHE-ECDSA-AES128-SHA
   *   ECDHE-RSA-AES128-SHA
   *   AES128-GCM-SHA256
   *   AES128-SHA
   *   ECDHE-ECDSA-AES256-GCM-SHA384
   *   ECDHE-RSA-AES256-GCM-SHA384
   *   ECDHE-ECDSA-AES256-SHA
   *   ECDHE-RSA-AES256-SHA
   *   AES256-GCM-SHA384
   *   AES256-SHA
   * </pre>
   *
   * <code>repeated string cipher_suites = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cipherSuites at the given index.
   */
  public com.google.protobuf.ByteString
      getCipherSuitesBytes(int index) {
    return cipherSuites_.getByteString(index);
  }

  public static final int ECDH_CURVES_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList ecdhCurves_;
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @return A list containing the ecdhCurves.
   */
  public com.google.protobuf.ProtocolStringList
      getEcdhCurvesList() {
    return ecdhCurves_;
  }
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @return The count of ecdhCurves.
   */
  public int getEcdhCurvesCount() {
    return ecdhCurves_.size();
  }
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @param index The index of the element to return.
   * @return The ecdhCurves at the given index.
   */
  public java.lang.String getEcdhCurves(int index) {
    return ecdhCurves_.get(index);
  }
  /**
   * <pre>
   * If specified, the TLS connection will only support the specified ECDH
   * curves. If not specified, the default curves will be used.
   * In non-FIPS builds, the default curves are:
   * .. code-block:: none
   *   X25519
   *   P-256
   * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
   * .. code-block:: none
   *   P-256
   * </pre>
   *
   * <code>repeated string ecdh_curves = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the ecdhCurves at the given index.
   */
  public com.google.protobuf.ByteString
      getEcdhCurvesBytes(int index) {
    return ecdhCurves_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (tlsMinimumProtocolVersion_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.TLS_AUTO.getNumber()) {
      output.writeEnum(1, tlsMinimumProtocolVersion_);
    }
    if (tlsMaximumProtocolVersion_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.TLS_AUTO.getNumber()) {
      output.writeEnum(2, tlsMaximumProtocolVersion_);
    }
    for (int i = 0; i < cipherSuites_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, cipherSuites_.getRaw(i));
    }
    for (int i = 0; i < ecdhCurves_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, ecdhCurves_.getRaw(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (tlsMinimumProtocolVersion_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.TLS_AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, tlsMinimumProtocolVersion_);
    }
    if (tlsMaximumProtocolVersion_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.TLS_AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, tlsMaximumProtocolVersion_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < cipherSuites_.size(); i++) {
        dataSize += computeStringSizeNoTag(cipherSuites_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCipherSuitesList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < ecdhCurves_.size(); i++) {
        dataSize += computeStringSizeNoTag(ecdhCurves_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getEcdhCurvesList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters other = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters) obj;

    if (tlsMinimumProtocolVersion_ != other.tlsMinimumProtocolVersion_) return false;
    if (tlsMaximumProtocolVersion_ != other.tlsMaximumProtocolVersion_) return false;
    if (!getCipherSuitesList()
        .equals(other.getCipherSuitesList())) return false;
    if (!getEcdhCurvesList()
        .equals(other.getEcdhCurvesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TLS_MINIMUM_PROTOCOL_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + tlsMinimumProtocolVersion_;
    hash = (37 * hash) + TLS_MAXIMUM_PROTOCOL_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + tlsMaximumProtocolVersion_;
    if (getCipherSuitesCount() > 0) {
      hash = (37 * hash) + CIPHER_SUITES_FIELD_NUMBER;
      hash = (53 * hash) + getCipherSuitesList().hashCode();
    }
    if (getEcdhCurvesCount() > 0) {
      hash = (37 * hash) + ECDH_CURVES_FIELD_NUMBER;
      hash = (53 * hash) + getEcdhCurvesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.TlsParameters}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.transport_sockets.tls.v3.TlsParameters)
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParametersOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsParameters_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsParameters_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      tlsMinimumProtocolVersion_ = 0;

      tlsMaximumProtocolVersion_ = 0;

      cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      ecdhCurves_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonProto.internal_static_envoy_extensions_transport_sockets_tls_v3_TlsParameters_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters build() {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters buildPartial() {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters result = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters(this);
      int from_bitField0_ = bitField0_;
      result.tlsMinimumProtocolVersion_ = tlsMinimumProtocolVersion_;
      result.tlsMaximumProtocolVersion_ = tlsMaximumProtocolVersion_;
      if (((bitField0_ & 0x00000001) != 0)) {
        cipherSuites_ = cipherSuites_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.cipherSuites_ = cipherSuites_;
      if (((bitField0_ & 0x00000002) != 0)) {
        ecdhCurves_ = ecdhCurves_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.ecdhCurves_ = ecdhCurves_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters) {
        return mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters other) {
      if (other == io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.getDefaultInstance()) return this;
      if (other.tlsMinimumProtocolVersion_ != 0) {
        setTlsMinimumProtocolVersionValue(other.getTlsMinimumProtocolVersionValue());
      }
      if (other.tlsMaximumProtocolVersion_ != 0) {
        setTlsMaximumProtocolVersionValue(other.getTlsMaximumProtocolVersionValue());
      }
      if (!other.cipherSuites_.isEmpty()) {
        if (cipherSuites_.isEmpty()) {
          cipherSuites_ = other.cipherSuites_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureCipherSuitesIsMutable();
          cipherSuites_.addAll(other.cipherSuites_);
        }
        onChanged();
      }
      if (!other.ecdhCurves_.isEmpty()) {
        if (ecdhCurves_.isEmpty()) {
          ecdhCurves_ = other.ecdhCurves_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureEcdhCurvesIsMutable();
          ecdhCurves_.addAll(other.ecdhCurves_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int tlsMinimumProtocolVersion_ = 0;
    /**
     * <pre>
     * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for tlsMinimumProtocolVersion.
     */
    @java.lang.Override public int getTlsMinimumProtocolVersionValue() {
      return tlsMinimumProtocolVersion_;
    }
    /**
     * <pre>
     * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for tlsMinimumProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setTlsMinimumProtocolVersionValue(int value) {
      
      tlsMinimumProtocolVersion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
     * @return The tlsMinimumProtocolVersion.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol getTlsMinimumProtocolVersion() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol result = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.valueOf(tlsMinimumProtocolVersion_);
      return result == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
     * @param value The tlsMinimumProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setTlsMinimumProtocolVersion(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      tlsMinimumProtocolVersion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Minimum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_0`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearTlsMinimumProtocolVersion() {
      
      tlsMinimumProtocolVersion_ = 0;
      onChanged();
      return this;
    }

    private int tlsMaximumProtocolVersion_ = 0;
    /**
     * <pre>
     * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for tlsMaximumProtocolVersion.
     */
    @java.lang.Override public int getTlsMaximumProtocolVersionValue() {
      return tlsMaximumProtocolVersion_;
    }
    /**
     * <pre>
     * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for tlsMaximumProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setTlsMaximumProtocolVersionValue(int value) {
      
      tlsMaximumProtocolVersion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
     * @return The tlsMaximumProtocolVersion.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol getTlsMaximumProtocolVersion() {
      @SuppressWarnings("deprecation")
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol result = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.valueOf(tlsMaximumProtocolVersion_);
      return result == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
     * @param value The tlsMaximumProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setTlsMaximumProtocolVersion(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      tlsMaximumProtocolVersion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Maximum TLS protocol version. By default, it's ``TLSv1_2`` for clients and ``TLSv1_3`` for
     * servers.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2 [(.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearTlsMaximumProtocolVersion() {
      
      tlsMaximumProtocolVersion_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCipherSuitesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        cipherSuites_ = new com.google.protobuf.LazyStringArrayList(cipherSuites_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @return A list containing the cipherSuites.
     */
    public com.google.protobuf.ProtocolStringList
        getCipherSuitesList() {
      return cipherSuites_.getUnmodifiableView();
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @return The count of cipherSuites.
     */
    public int getCipherSuitesCount() {
      return cipherSuites_.size();
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @param index The index of the element to return.
     * @return The cipherSuites at the given index.
     */
    public java.lang.String getCipherSuites(int index) {
      return cipherSuites_.get(index);
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the cipherSuites at the given index.
     */
    public com.google.protobuf.ByteString
        getCipherSuitesBytes(int index) {
      return cipherSuites_.getByteString(index);
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @param index The index to set the value at.
     * @param value The cipherSuites to set.
     * @return This builder for chaining.
     */
    public Builder setCipherSuites(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSuitesIsMutable();
      cipherSuites_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @param value The cipherSuites to add.
     * @return This builder for chaining.
     */
    public Builder addCipherSuites(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSuitesIsMutable();
      cipherSuites_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @param values The cipherSuites to add.
     * @return This builder for chaining.
     */
    public Builder addAllCipherSuites(
        java.lang.Iterable<java.lang.String> values) {
      ensureCipherSuitesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, cipherSuites_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearCipherSuites() {
      cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS listener will only support the specified `cipher list
     * &lt;https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration&gt;`_
     * when negotiating TLS 1.0-1.2 (this setting has no effect when negotiating TLS 1.3). If not
     * specified, the default list will be used.
     * In non-FIPS builds, the default cipher list is:
     * .. code-block:: none
     *   [ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]
     *   [ECDHE-RSA-AES128-GCM-SHA256|ECDHE-RSA-CHACHA20-POLY1305]
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default cipher list is:
     * .. code-block:: none
     *   ECDHE-ECDSA-AES128-GCM-SHA256
     *   ECDHE-RSA-AES128-GCM-SHA256
     *   ECDHE-ECDSA-AES128-SHA
     *   ECDHE-RSA-AES128-SHA
     *   AES128-GCM-SHA256
     *   AES128-SHA
     *   ECDHE-ECDSA-AES256-GCM-SHA384
     *   ECDHE-RSA-AES256-GCM-SHA384
     *   ECDHE-ECDSA-AES256-SHA
     *   ECDHE-RSA-AES256-SHA
     *   AES256-GCM-SHA384
     *   AES256-SHA
     * </pre>
     *
     * <code>repeated string cipher_suites = 3;</code>
     * @param value The bytes of the cipherSuites to add.
     * @return This builder for chaining.
     */
    public Builder addCipherSuitesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCipherSuitesIsMutable();
      cipherSuites_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList ecdhCurves_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureEcdhCurvesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        ecdhCurves_ = new com.google.protobuf.LazyStringArrayList(ecdhCurves_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @return A list containing the ecdhCurves.
     */
    public com.google.protobuf.ProtocolStringList
        getEcdhCurvesList() {
      return ecdhCurves_.getUnmodifiableView();
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @return The count of ecdhCurves.
     */
    public int getEcdhCurvesCount() {
      return ecdhCurves_.size();
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @param index The index of the element to return.
     * @return The ecdhCurves at the given index.
     */
    public java.lang.String getEcdhCurves(int index) {
      return ecdhCurves_.get(index);
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the ecdhCurves at the given index.
     */
    public com.google.protobuf.ByteString
        getEcdhCurvesBytes(int index) {
      return ecdhCurves_.getByteString(index);
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @param index The index to set the value at.
     * @param value The ecdhCurves to set.
     * @return This builder for chaining.
     */
    public Builder setEcdhCurves(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEcdhCurvesIsMutable();
      ecdhCurves_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @param value The ecdhCurves to add.
     * @return This builder for chaining.
     */
    public Builder addEcdhCurves(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureEcdhCurvesIsMutable();
      ecdhCurves_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @param values The ecdhCurves to add.
     * @return This builder for chaining.
     */
    public Builder addAllEcdhCurves(
        java.lang.Iterable<java.lang.String> values) {
      ensureEcdhCurvesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, ecdhCurves_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearEcdhCurves() {
      ecdhCurves_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If specified, the TLS connection will only support the specified ECDH
     * curves. If not specified, the default curves will be used.
     * In non-FIPS builds, the default curves are:
     * .. code-block:: none
     *   X25519
     *   P-256
     * In builds using :ref:`BoringSSL FIPS &lt;arch_overview_ssl_fips&gt;`, the default curve is:
     * .. code-block:: none
     *   P-256
     * </pre>
     *
     * <code>repeated string ecdh_curves = 4;</code>
     * @param value The bytes of the ecdhCurves to add.
     * @return This builder for chaining.
     */
    public Builder addEcdhCurvesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureEcdhCurvesIsMutable();
      ecdhCurves_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.transport_sockets.tls.v3.TlsParameters)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.transport_sockets.tls.v3.TlsParameters)
  private static final io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters();
  }

  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TlsParameters>
      PARSER = new com.google.protobuf.AbstractParser<TlsParameters>() {
    @java.lang.Override
    public TlsParameters parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TlsParameters(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TlsParameters> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TlsParameters> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

