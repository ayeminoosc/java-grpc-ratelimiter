// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/extensions/transport_sockets/tls/v3/tls.proto

package io.envoyproxy.envoy.extensions.transport_sockets.tls.v3;

/**
 * <pre>
 * TLS context shared by both client and server TLS contexts.
 * [#next-free-field: 14]
 * </pre>
 *
 * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext}
 */
public final class CommonTlsContext extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext)
    CommonTlsContextOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CommonTlsContext.newBuilder() to construct.
  private CommonTlsContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CommonTlsContext() {
    tlsCertificates_ = java.util.Collections.emptyList();
    tlsCertificateSdsSecretConfigs_ = java.util.Collections.emptyList();
    alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CommonTlsContext();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CommonTlsContext(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder subBuilder = null;
            if (tlsParams_ != null) {
              subBuilder = tlsParams_.toBuilder();
            }
            tlsParams_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tlsParams_);
              tlsParams_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              tlsCertificates_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate>();
              mutable_bitField0_ |= 0x00000001;
            }
            tlsCertificates_.add(
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.parser(), extensionRegistry));
            break;
          }
          case 26: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder subBuilder = null;
            if (validationContextTypeCase_ == 3) {
              subBuilder = ((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 3;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              alpnProtocols_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            alpnProtocols_.add(s);
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              tlsCertificateSdsSecretConfigs_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig>();
              mutable_bitField0_ |= 0x00000002;
            }
            tlsCertificateSdsSecretConfigs_.add(
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.parser(), extensionRegistry));
            break;
          }
          case 58: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder subBuilder = null;
            if (validationContextTypeCase_ == 7) {
              subBuilder = ((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 7;
            break;
          }
          case 66: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder subBuilder = null;
            if (validationContextTypeCase_ == 8) {
              subBuilder = ((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 8;
            break;
          }
          case 74: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder subBuilder = null;
            if (tlsCertificateCertificateProvider_ != null) {
              subBuilder = tlsCertificateCertificateProvider_.toBuilder();
            }
            tlsCertificateCertificateProvider_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tlsCertificateCertificateProvider_);
              tlsCertificateCertificateProvider_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder subBuilder = null;
            if (validationContextTypeCase_ == 10) {
              subBuilder = ((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 10;
            break;
          }
          case 90: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder subBuilder = null;
            if (tlsCertificateCertificateProviderInstance_ != null) {
              subBuilder = tlsCertificateCertificateProviderInstance_.toBuilder();
            }
            tlsCertificateCertificateProviderInstance_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(tlsCertificateCertificateProviderInstance_);
              tlsCertificateCertificateProviderInstance_ = subBuilder.buildPartial();
            }

            break;
          }
          case 98: {
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder subBuilder = null;
            if (validationContextTypeCase_ == 12) {
              subBuilder = ((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_).toBuilder();
            }
            validationContextType_ =
                input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_);
              validationContextType_ = subBuilder.buildPartial();
            }
            validationContextTypeCase_ = 12;
            break;
          }
          case 106: {
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder subBuilder = null;
            if (customHandshaker_ != null) {
              subBuilder = customHandshaker_.toBuilder();
            }
            customHandshaker_ = input.readMessage(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(customHandshaker_);
              customHandshaker_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        tlsCertificates_ = java.util.Collections.unmodifiableList(tlsCertificates_);
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        alpnProtocols_ = alpnProtocols_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        tlsCertificateSdsSecretConfigs_ = java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.Builder.class);
  }

  public interface CertificateProviderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
     * @return Whether the typedConfig field is set.
     */
    boolean hasTypedConfig();
    /**
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
     * @return The typedConfig.
     */
    io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedConfig();
    /**
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
     */
    io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedConfigOrBuilder();

    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.ConfigCase getConfigCase();
  }
  /**
   * <pre>
   * Config for Certificate provider to get certificates. This provider should allow certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider}
   */
  public static final class CertificateProvider extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)
      CertificateProviderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CertificateProvider.newBuilder() to construct.
    private CertificateProvider(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CertificateProvider() {
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CertificateProvider();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CertificateProvider(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder subBuilder = null;
              if (configCase_ == 2) {
                subBuilder = ((io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_).toBuilder();
              }
              config_ =
                  input.readMessage(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_);
                config_ = subBuilder.buildPartial();
              }
              configCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProvider_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProvider_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder.class);
    }

    private int configCase_ = 0;
    private java.lang.Object config_;
    public enum ConfigCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TYPED_CONFIG(2),
      CONFIG_NOT_SET(0);
      private final int value;
      private ConfigCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConfigCase valueOf(int value) {
        return forNumber(value);
      }

      public static ConfigCase forNumber(int value) {
        switch (value) {
          case 2: return TYPED_CONFIG;
          case 0: return CONFIG_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ConfigCase
    getConfigCase() {
      return ConfigCase.forNumber(
          configCase_);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
     * </pre>
     *
     * <code>string name = 1 [(.validate.rules) = { ... }</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPED_CONFIG_FIELD_NUMBER = 2;
    /**
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
     * @return Whether the typedConfig field is set.
     */
    @java.lang.Override
    public boolean hasTypedConfig() {
      return configCase_ == 2;
    }
    /**
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
     * @return The typedConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedConfig() {
      if (configCase_ == 2) {
         return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_;
      }
      return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
    }
    /**
     * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedConfigOrBuilder() {
      if (configCase_ == 2) {
         return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_;
      }
      return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (configCase_ == 2) {
        output.writeMessage(2, (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (configCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider other = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getConfigCase().equals(other.getConfigCase())) return false;
      switch (configCase_) {
        case 2:
          if (!getTypedConfig()
              .equals(other.getTypedConfig())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      switch (configCase_) {
        case 2:
          hash = (37 * hash) + TYPED_CONFIG_FIELD_NUMBER;
          hash = (53 * hash) + getTypedConfig().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Config for Certificate provider to get certificates. This provider should allow certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProvider_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProvider_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        configCase_ = 0;
        config_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProvider_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider build() {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider buildPartial() {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider result = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider(this);
        result.name_ = name_;
        if (configCase_ == 2) {
          if (typedConfigBuilder_ == null) {
            result.config_ = config_;
          } else {
            result.config_ = typedConfigBuilder_.build();
          }
        }
        result.configCase_ = configCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) {
          return mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider other) {
        if (other == io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        switch (other.getConfigCase()) {
          case TYPED_CONFIG: {
            mergeTypedConfig(other.getTypedConfig());
            break;
          }
          case CONFIG_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int configCase_ = 0;
      private java.lang.Object config_;
      public ConfigCase
          getConfigCase() {
        return ConfigCase.forNumber(
            configCase_);
      }

      public Builder clearConfig() {
        configCase_ = 0;
        config_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object name_ = "";
      /**
       * <pre>
       * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
       * </pre>
       *
       * <code>string name = 1 [(.validate.rules) = { ... }</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
       * </pre>
       *
       * <code>string name = 1 [(.validate.rules) = { ... }</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
       * </pre>
       *
       * <code>string name = 1 [(.validate.rules) = { ... }</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
       * </pre>
       *
       * <code>string name = 1 [(.validate.rules) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "TLS" to specify a new tls-certificate.
       * </pre>
       *
       * <code>string name = 1 [(.validate.rules) = { ... }</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> typedConfigBuilder_;
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       * @return Whether the typedConfig field is set.
       */
      @java.lang.Override
      public boolean hasTypedConfig() {
        return configCase_ == 2;
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       * @return The typedConfig.
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getTypedConfig() {
        if (typedConfigBuilder_ == null) {
          if (configCase_ == 2) {
            return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_;
          }
          return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
        } else {
          if (configCase_ == 2) {
            return typedConfigBuilder_.getMessage();
          }
          return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
        }
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      public Builder setTypedConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
        if (typedConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          typedConfigBuilder_.setMessage(value);
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      public Builder setTypedConfig(
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
        if (typedConfigBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          typedConfigBuilder_.setMessage(builderForValue.build());
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      public Builder mergeTypedConfig(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
        if (typedConfigBuilder_ == null) {
          if (configCase_ == 2 &&
              config_ != io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance()) {
            config_ = io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder((io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_)
                .mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          if (configCase_ == 2) {
            typedConfigBuilder_.mergeFrom(value);
          }
          typedConfigBuilder_.setMessage(value);
        }
        configCase_ = 2;
        return this;
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      public Builder clearTypedConfig() {
        if (typedConfigBuilder_ == null) {
          if (configCase_ == 2) {
            configCase_ = 0;
            config_ = null;
            onChanged();
          }
        } else {
          if (configCase_ == 2) {
            configCase_ = 0;
            config_ = null;
          }
          typedConfigBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getTypedConfigBuilder() {
        return getTypedConfigFieldBuilder().getBuilder();
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      @java.lang.Override
      public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getTypedConfigOrBuilder() {
        if ((configCase_ == 2) && (typedConfigBuilder_ != null)) {
          return typedConfigBuilder_.getMessageOrBuilder();
        } else {
          if (configCase_ == 2) {
            return (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_;
          }
          return io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
        }
      }
      /**
       * <code>.envoy.config.core.v3.TypedExtensionConfig typed_config = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
          getTypedConfigFieldBuilder() {
        if (typedConfigBuilder_ == null) {
          if (!(configCase_ == 2)) {
            config_ = io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance();
          }
          typedConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                  (io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig) config_,
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        configCase_ = 2;
        onChanged();;
        return typedConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider)
    private static final io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider();
    }

    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CertificateProvider>
        PARSER = new com.google.protobuf.AbstractParser<CertificateProvider>() {
      @java.lang.Override
      public CertificateProvider parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CertificateProvider(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CertificateProvider> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CertificateProvider> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CertificateProviderInstanceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Provider instance name. This name must be defined in the client's configuration (e.g., a
     * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
     * field that would be sent in the CertificateProvider message if the config was sent by the
     * control plane). If not present, defaults to "default".
     * Instance names should generally be defined not in terms of the underlying provider
     * implementation (e.g., "file_watcher") but rather in terms of the function of the
     * certificates (e.g., "foo_deployment_identity").
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return The instanceName.
     */
    java.lang.String getInstanceName();
    /**
     * <pre>
     * Provider instance name. This name must be defined in the client's configuration (e.g., a
     * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
     * field that would be sent in the CertificateProvider message if the config was sent by the
     * control plane). If not present, defaults to "default".
     * Instance names should generally be defined not in terms of the underlying provider
     * implementation (e.g., "file_watcher") but rather in terms of the function of the
     * certificates (e.g., "foo_deployment_identity").
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return The bytes for instanceName.
     */
    com.google.protobuf.ByteString
        getInstanceNameBytes();

    /**
     * <pre>
     * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "example.com" to specify a certificate for a
     * particular domain. Not all provider instances will actually use this field, so the value
     * defaults to the empty string.
     * </pre>
     *
     * <code>string certificate_name = 2;</code>
     * @return The certificateName.
     */
    java.lang.String getCertificateName();
    /**
     * <pre>
     * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "example.com" to specify a certificate for a
     * particular domain. Not all provider instances will actually use this field, so the value
     * defaults to the empty string.
     * </pre>
     *
     * <code>string certificate_name = 2;</code>
     * @return The bytes for certificateName.
     */
    com.google.protobuf.ByteString
        getCertificateNameBytes();
  }
  /**
   * <pre>
   * Similar to CertificateProvider above, but allows the provider instances to be configured on
   * the client side instead of being sent from the control plane.
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance}
   */
  public static final class CertificateProviderInstance extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)
      CertificateProviderInstanceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CertificateProviderInstance.newBuilder() to construct.
    private CertificateProviderInstance(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CertificateProviderInstance() {
      instanceName_ = "";
      certificateName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CertificateProviderInstance();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CertificateProviderInstance(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instanceName_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              certificateName_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProviderInstance_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProviderInstance_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder.class);
    }

    public static final int INSTANCE_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object instanceName_;
    /**
     * <pre>
     * Provider instance name. This name must be defined in the client's configuration (e.g., a
     * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
     * field that would be sent in the CertificateProvider message if the config was sent by the
     * control plane). If not present, defaults to "default".
     * Instance names should generally be defined not in terms of the underlying provider
     * implementation (e.g., "file_watcher") but rather in terms of the function of the
     * certificates (e.g., "foo_deployment_identity").
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return The instanceName.
     */
    @java.lang.Override
    public java.lang.String getInstanceName() {
      java.lang.Object ref = instanceName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instanceName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Provider instance name. This name must be defined in the client's configuration (e.g., a
     * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
     * field that would be sent in the CertificateProvider message if the config was sent by the
     * control plane). If not present, defaults to "default".
     * Instance names should generally be defined not in terms of the underlying provider
     * implementation (e.g., "file_watcher") but rather in terms of the function of the
     * certificates (e.g., "foo_deployment_identity").
     * </pre>
     *
     * <code>string instance_name = 1;</code>
     * @return The bytes for instanceName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInstanceNameBytes() {
      java.lang.Object ref = instanceName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instanceName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CERTIFICATE_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object certificateName_;
    /**
     * <pre>
     * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "example.com" to specify a certificate for a
     * particular domain. Not all provider instances will actually use this field, so the value
     * defaults to the empty string.
     * </pre>
     *
     * <code>string certificate_name = 2;</code>
     * @return The certificateName.
     */
    @java.lang.Override
    public java.lang.String getCertificateName() {
      java.lang.Object ref = certificateName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        certificateName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
     * a root-certificate (validation context) or "example.com" to specify a certificate for a
     * particular domain. Not all provider instances will actually use this field, so the value
     * defaults to the empty string.
     * </pre>
     *
     * <code>string certificate_name = 2;</code>
     * @return The bytes for certificateName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCertificateNameBytes() {
      java.lang.Object ref = certificateName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        certificateName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getInstanceNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instanceName_);
      }
      if (!getCertificateNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, certificateName_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getInstanceNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instanceName_);
      }
      if (!getCertificateNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, certificateName_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance other = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) obj;

      if (!getInstanceName()
          .equals(other.getInstanceName())) return false;
      if (!getCertificateName()
          .equals(other.getCertificateName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTANCE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getInstanceName().hashCode();
      hash = (37 * hash) + CERTIFICATE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getCertificateName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Similar to CertificateProvider above, but allows the provider instances to be configured on
     * the client side instead of being sent from the control plane.
     * </pre>
     *
     * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProviderInstance_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProviderInstance_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instanceName_ = "";

        certificateName_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CertificateProviderInstance_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance build() {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance buildPartial() {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance result = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance(this);
        result.instanceName_ = instanceName_;
        result.certificateName_ = certificateName_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) {
          return mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance other) {
        if (other == io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance()) return this;
        if (!other.getInstanceName().isEmpty()) {
          instanceName_ = other.instanceName_;
          onChanged();
        }
        if (!other.getCertificateName().isEmpty()) {
          certificateName_ = other.certificateName_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object instanceName_ = "";
      /**
       * <pre>
       * Provider instance name. This name must be defined in the client's configuration (e.g., a
       * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
       * field that would be sent in the CertificateProvider message if the config was sent by the
       * control plane). If not present, defaults to "default".
       * Instance names should generally be defined not in terms of the underlying provider
       * implementation (e.g., "file_watcher") but rather in terms of the function of the
       * certificates (e.g., "foo_deployment_identity").
       * </pre>
       *
       * <code>string instance_name = 1;</code>
       * @return The instanceName.
       */
      public java.lang.String getInstanceName() {
        java.lang.Object ref = instanceName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instanceName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Provider instance name. This name must be defined in the client's configuration (e.g., a
       * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
       * field that would be sent in the CertificateProvider message if the config was sent by the
       * control plane). If not present, defaults to "default".
       * Instance names should generally be defined not in terms of the underlying provider
       * implementation (e.g., "file_watcher") but rather in terms of the function of the
       * certificates (e.g., "foo_deployment_identity").
       * </pre>
       *
       * <code>string instance_name = 1;</code>
       * @return The bytes for instanceName.
       */
      public com.google.protobuf.ByteString
          getInstanceNameBytes() {
        java.lang.Object ref = instanceName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instanceName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Provider instance name. This name must be defined in the client's configuration (e.g., a
       * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
       * field that would be sent in the CertificateProvider message if the config was sent by the
       * control plane). If not present, defaults to "default".
       * Instance names should generally be defined not in terms of the underlying provider
       * implementation (e.g., "file_watcher") but rather in terms of the function of the
       * certificates (e.g., "foo_deployment_identity").
       * </pre>
       *
       * <code>string instance_name = 1;</code>
       * @param value The instanceName to set.
       * @return This builder for chaining.
       */
      public Builder setInstanceName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instanceName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provider instance name. This name must be defined in the client's configuration (e.g., a
       * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
       * field that would be sent in the CertificateProvider message if the config was sent by the
       * control plane). If not present, defaults to "default".
       * Instance names should generally be defined not in terms of the underlying provider
       * implementation (e.g., "file_watcher") but rather in terms of the function of the
       * certificates (e.g., "foo_deployment_identity").
       * </pre>
       *
       * <code>string instance_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInstanceName() {
        
        instanceName_ = getDefaultInstance().getInstanceName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provider instance name. This name must be defined in the client's configuration (e.g., a
       * bootstrap file) to correspond to a provider instance (i.e., the same data in the typed_config
       * field that would be sent in the CertificateProvider message if the config was sent by the
       * control plane). If not present, defaults to "default".
       * Instance names should generally be defined not in terms of the underlying provider
       * implementation (e.g., "file_watcher") but rather in terms of the function of the
       * certificates (e.g., "foo_deployment_identity").
       * </pre>
       *
       * <code>string instance_name = 1;</code>
       * @param value The bytes for instanceName to set.
       * @return This builder for chaining.
       */
      public Builder setInstanceNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instanceName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object certificateName_ = "";
      /**
       * <pre>
       * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "example.com" to specify a certificate for a
       * particular domain. Not all provider instances will actually use this field, so the value
       * defaults to the empty string.
       * </pre>
       *
       * <code>string certificate_name = 2;</code>
       * @return The certificateName.
       */
      public java.lang.String getCertificateName() {
        java.lang.Object ref = certificateName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          certificateName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "example.com" to specify a certificate for a
       * particular domain. Not all provider instances will actually use this field, so the value
       * defaults to the empty string.
       * </pre>
       *
       * <code>string certificate_name = 2;</code>
       * @return The bytes for certificateName.
       */
      public com.google.protobuf.ByteString
          getCertificateNameBytes() {
        java.lang.Object ref = certificateName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          certificateName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "example.com" to specify a certificate for a
       * particular domain. Not all provider instances will actually use this field, so the value
       * defaults to the empty string.
       * </pre>
       *
       * <code>string certificate_name = 2;</code>
       * @param value The certificateName to set.
       * @return This builder for chaining.
       */
      public Builder setCertificateName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        certificateName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "example.com" to specify a certificate for a
       * particular domain. Not all provider instances will actually use this field, so the value
       * defaults to the empty string.
       * </pre>
       *
       * <code>string certificate_name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCertificateName() {
        
        certificateName_ = getDefaultInstance().getCertificateName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Opaque name used to specify certificate instances or types. For example, "ROOTCA" to specify
       * a root-certificate (validation context) or "example.com" to specify a certificate for a
       * particular domain. Not all provider instances will actually use this field, so the value
       * defaults to the empty string.
       * </pre>
       *
       * <code>string certificate_name = 2;</code>
       * @param value The bytes for certificateName to set.
       * @return This builder for chaining.
       */
      public Builder setCertificateNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        certificateName_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance)
    private static final io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance();
    }

    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CertificateProviderInstance>
        PARSER = new com.google.protobuf.AbstractParser<CertificateProviderInstance>() {
      @java.lang.Override
      public CertificateProviderInstance parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CertificateProviderInstance(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CertificateProviderInstance> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CertificateProviderInstance> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CombinedCertificateValidationContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the defaultValidationContext field is set.
     */
    boolean hasDefaultValidationContext();
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return The defaultValidationContext.
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext getDefaultValidationContext();
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder getDefaultValidationContextOrBuilder();

    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the validationContextSdsSecretConfig field is set.
     */
    boolean hasValidationContextSdsSecretConfig();
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return The validationContextSdsSecretConfig.
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getValidationContextSdsSecretConfig();
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder();

    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the validationContextCertificateProvider field is set.
     */
    boolean hasValidationContextCertificateProvider();
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The validationContextCertificateProvider.
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getValidationContextCertificateProvider();
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getValidationContextCertificateProviderOrBuilder();

    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the validationContextCertificateProviderInstance field is set.
     */
    boolean hasValidationContextCertificateProviderInstance();
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The validationContextCertificateProviderInstance.
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getValidationContextCertificateProviderInstance();
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getValidationContextCertificateProviderInstanceOrBuilder();
  }
  /**
   * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext}
   */
  public static final class CombinedCertificateValidationContext extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)
      CombinedCertificateValidationContextOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CombinedCertificateValidationContext.newBuilder() to construct.
    private CombinedCertificateValidationContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CombinedCertificateValidationContext() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CombinedCertificateValidationContext();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CombinedCertificateValidationContext(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder subBuilder = null;
              if (defaultValidationContext_ != null) {
                subBuilder = defaultValidationContext_.toBuilder();
              }
              defaultValidationContext_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defaultValidationContext_);
                defaultValidationContext_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder subBuilder = null;
              if (validationContextSdsSecretConfig_ != null) {
                subBuilder = validationContextSdsSecretConfig_.toBuilder();
              }
              validationContextSdsSecretConfig_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(validationContextSdsSecretConfig_);
                validationContextSdsSecretConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder subBuilder = null;
              if (validationContextCertificateProvider_ != null) {
                subBuilder = validationContextCertificateProvider_.toBuilder();
              }
              validationContextCertificateProvider_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(validationContextCertificateProvider_);
                validationContextCertificateProvider_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder subBuilder = null;
              if (validationContextCertificateProviderInstance_ != null) {
                subBuilder = validationContextCertificateProviderInstance_.toBuilder();
              }
              validationContextCertificateProviderInstance_ = input.readMessage(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(validationContextCertificateProviderInstance_);
                validationContextCertificateProviderInstance_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CombinedCertificateValidationContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CombinedCertificateValidationContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder.class);
    }

    public static final int DEFAULT_VALIDATION_CONTEXT_FIELD_NUMBER = 1;
    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext defaultValidationContext_;
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the defaultValidationContext field is set.
     */
    @java.lang.Override
    public boolean hasDefaultValidationContext() {
      return defaultValidationContext_ != null;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     * @return The defaultValidationContext.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext getDefaultValidationContext() {
      return defaultValidationContext_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance() : defaultValidationContext_;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder getDefaultValidationContextOrBuilder() {
      return getDefaultValidationContext();
    }

    public static final int VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER = 2;
    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validationContextSdsSecretConfig_;
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return Whether the validationContextSdsSecretConfig field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextSdsSecretConfig() {
      return validationContextSdsSecretConfig_ != null;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     * @return The validationContextSdsSecretConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getValidationContextSdsSecretConfig() {
      return validationContextSdsSecretConfig_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance() : validationContextSdsSecretConfig_;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
      return getValidationContextSdsSecretConfig();
    }

    public static final int VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_FIELD_NUMBER = 3;
    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validationContextCertificateProvider_;
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the validationContextCertificateProvider field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextCertificateProvider() {
      return validationContextCertificateProvider_ != null;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The validationContextCertificateProvider.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getValidationContextCertificateProvider() {
      return validationContextCertificateProvider_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance() : validationContextCertificateProvider_;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getValidationContextCertificateProviderOrBuilder() {
      return getValidationContextCertificateProvider();
    }

    public static final int VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER = 4;
    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validationContextCertificateProviderInstance_;
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return Whether the validationContextCertificateProviderInstance field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextCertificateProviderInstance() {
      return validationContextCertificateProviderInstance_ != null;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
     * @return The validationContextCertificateProviderInstance.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getValidationContextCertificateProviderInstance() {
      return validationContextCertificateProviderInstance_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance() : validationContextCertificateProviderInstance_;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
     * or validation_context_certificate_provider_instance may be used.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getValidationContextCertificateProviderInstanceOrBuilder() {
      return getValidationContextCertificateProviderInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (defaultValidationContext_ != null) {
        output.writeMessage(1, getDefaultValidationContext());
      }
      if (validationContextSdsSecretConfig_ != null) {
        output.writeMessage(2, getValidationContextSdsSecretConfig());
      }
      if (validationContextCertificateProvider_ != null) {
        output.writeMessage(3, getValidationContextCertificateProvider());
      }
      if (validationContextCertificateProviderInstance_ != null) {
        output.writeMessage(4, getValidationContextCertificateProviderInstance());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (defaultValidationContext_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDefaultValidationContext());
      }
      if (validationContextSdsSecretConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getValidationContextSdsSecretConfig());
      }
      if (validationContextCertificateProvider_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getValidationContextCertificateProvider());
      }
      if (validationContextCertificateProviderInstance_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getValidationContextCertificateProviderInstance());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)) {
        return super.equals(obj);
      }
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext other = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) obj;

      if (hasDefaultValidationContext() != other.hasDefaultValidationContext()) return false;
      if (hasDefaultValidationContext()) {
        if (!getDefaultValidationContext()
            .equals(other.getDefaultValidationContext())) return false;
      }
      if (hasValidationContextSdsSecretConfig() != other.hasValidationContextSdsSecretConfig()) return false;
      if (hasValidationContextSdsSecretConfig()) {
        if (!getValidationContextSdsSecretConfig()
            .equals(other.getValidationContextSdsSecretConfig())) return false;
      }
      if (hasValidationContextCertificateProvider() != other.hasValidationContextCertificateProvider()) return false;
      if (hasValidationContextCertificateProvider()) {
        if (!getValidationContextCertificateProvider()
            .equals(other.getValidationContextCertificateProvider())) return false;
      }
      if (hasValidationContextCertificateProviderInstance() != other.hasValidationContextCertificateProviderInstance()) return false;
      if (hasValidationContextCertificateProviderInstance()) {
        if (!getValidationContextCertificateProviderInstance()
            .equals(other.getValidationContextCertificateProviderInstance())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDefaultValidationContext()) {
        hash = (37 * hash) + DEFAULT_VALIDATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultValidationContext().hashCode();
      }
      if (hasValidationContextSdsSecretConfig()) {
        hash = (37 * hash) + VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextSdsSecretConfig().hashCode();
      }
      if (hasValidationContextCertificateProvider()) {
        hash = (37 * hash) + VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextCertificateProvider().hashCode();
      }
      if (hasValidationContextCertificateProviderInstance()) {
        hash = (37 * hash) + VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextCertificateProviderInstance().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CombinedCertificateValidationContext_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CombinedCertificateValidationContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder.class);
      }

      // Construct using io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContext_ = null;
        } else {
          defaultValidationContext_ = null;
          defaultValidationContextBuilder_ = null;
        }
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfig_ = null;
        } else {
          validationContextSdsSecretConfig_ = null;
          validationContextSdsSecretConfigBuilder_ = null;
        }
        if (validationContextCertificateProviderBuilder_ == null) {
          validationContextCertificateProvider_ = null;
        } else {
          validationContextCertificateProvider_ = null;
          validationContextCertificateProviderBuilder_ = null;
        }
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          validationContextCertificateProviderInstance_ = null;
        } else {
          validationContextCertificateProviderInstance_ = null;
          validationContextCertificateProviderInstanceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_CombinedCertificateValidationContext_descriptor;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext getDefaultInstanceForType() {
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext build() {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext buildPartial() {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext result = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext(this);
        if (defaultValidationContextBuilder_ == null) {
          result.defaultValidationContext_ = defaultValidationContext_;
        } else {
          result.defaultValidationContext_ = defaultValidationContextBuilder_.build();
        }
        if (validationContextSdsSecretConfigBuilder_ == null) {
          result.validationContextSdsSecretConfig_ = validationContextSdsSecretConfig_;
        } else {
          result.validationContextSdsSecretConfig_ = validationContextSdsSecretConfigBuilder_.build();
        }
        if (validationContextCertificateProviderBuilder_ == null) {
          result.validationContextCertificateProvider_ = validationContextCertificateProvider_;
        } else {
          result.validationContextCertificateProvider_ = validationContextCertificateProviderBuilder_.build();
        }
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          result.validationContextCertificateProviderInstance_ = validationContextCertificateProviderInstance_;
        } else {
          result.validationContextCertificateProviderInstance_ = validationContextCertificateProviderInstanceBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) {
          return mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext other) {
        if (other == io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance()) return this;
        if (other.hasDefaultValidationContext()) {
          mergeDefaultValidationContext(other.getDefaultValidationContext());
        }
        if (other.hasValidationContextSdsSecretConfig()) {
          mergeValidationContextSdsSecretConfig(other.getValidationContextSdsSecretConfig());
        }
        if (other.hasValidationContextCertificateProvider()) {
          mergeValidationContextCertificateProvider(other.getValidationContextCertificateProvider());
        }
        if (other.hasValidationContextCertificateProviderInstance()) {
          mergeValidationContextCertificateProviderInstance(other.getValidationContextCertificateProviderInstance());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext defaultValidationContext_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder> defaultValidationContextBuilder_;
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       * @return Whether the defaultValidationContext field is set.
       */
      public boolean hasDefaultValidationContext() {
        return defaultValidationContextBuilder_ != null || defaultValidationContext_ != null;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       * @return The defaultValidationContext.
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext getDefaultValidationContext() {
        if (defaultValidationContextBuilder_ == null) {
          return defaultValidationContext_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance() : defaultValidationContext_;
        } else {
          return defaultValidationContextBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setDefaultValidationContext(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext value) {
        if (defaultValidationContextBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defaultValidationContext_ = value;
          onChanged();
        } else {
          defaultValidationContextBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder setDefaultValidationContext(
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder builderForValue) {
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContext_ = builderForValue.build();
          onChanged();
        } else {
          defaultValidationContextBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeDefaultValidationContext(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext value) {
        if (defaultValidationContextBuilder_ == null) {
          if (defaultValidationContext_ != null) {
            defaultValidationContext_ =
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.newBuilder(defaultValidationContext_).mergeFrom(value).buildPartial();
          } else {
            defaultValidationContext_ = value;
          }
          onChanged();
        } else {
          defaultValidationContextBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public Builder clearDefaultValidationContext() {
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContext_ = null;
          onChanged();
        } else {
          defaultValidationContext_ = null;
          defaultValidationContextBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder getDefaultValidationContextBuilder() {
        
        onChanged();
        return getDefaultValidationContextFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder getDefaultValidationContextOrBuilder() {
        if (defaultValidationContextBuilder_ != null) {
          return defaultValidationContextBuilder_.getMessageOrBuilder();
        } else {
          return defaultValidationContext_ == null ?
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance() : defaultValidationContext_;
        }
      }
      /**
       * <pre>
       * How to validate peer certificates.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext default_validation_context = 1 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder> 
          getDefaultValidationContextFieldBuilder() {
        if (defaultValidationContextBuilder_ == null) {
          defaultValidationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder>(
                  getDefaultValidationContext(),
                  getParentForChildren(),
                  isClean());
          defaultValidationContext_ = null;
        }
        return defaultValidationContextBuilder_;
      }

      private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validationContextSdsSecretConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> validationContextSdsSecretConfigBuilder_;
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       * @return Whether the validationContextSdsSecretConfig field is set.
       */
      public boolean hasValidationContextSdsSecretConfig() {
        return validationContextSdsSecretConfigBuilder_ != null || validationContextSdsSecretConfig_ != null;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       * @return The validationContextSdsSecretConfig.
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getValidationContextSdsSecretConfig() {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          return validationContextSdsSecretConfig_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance() : validationContextSdsSecretConfig_;
        } else {
          return validationContextSdsSecretConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setValidationContextSdsSecretConfig(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validationContextSdsSecretConfig_ = value;
          onChanged();
        } else {
          validationContextSdsSecretConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder setValidationContextSdsSecretConfig(
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder builderForValue) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfig_ = builderForValue.build();
          onChanged();
        } else {
          validationContextSdsSecretConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder mergeValidationContextSdsSecretConfig(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          if (validationContextSdsSecretConfig_ != null) {
            validationContextSdsSecretConfig_ =
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.newBuilder(validationContextSdsSecretConfig_).mergeFrom(value).buildPartial();
          } else {
            validationContextSdsSecretConfig_ = value;
          }
          onChanged();
        } else {
          validationContextSdsSecretConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public Builder clearValidationContextSdsSecretConfig() {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfig_ = null;
          onChanged();
        } else {
          validationContextSdsSecretConfig_ = null;
          validationContextSdsSecretConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder getValidationContextSdsSecretConfigBuilder() {
        
        onChanged();
        return getValidationContextSdsSecretConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
        if (validationContextSdsSecretConfigBuilder_ != null) {
          return validationContextSdsSecretConfigBuilder_.getMessageOrBuilder();
        } else {
          return validationContextSdsSecretConfig_ == null ?
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance() : validationContextSdsSecretConfig_;
        }
      }
      /**
       * <pre>
       * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
       * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 2 [(.validate.rules) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> 
          getValidationContextSdsSecretConfigFieldBuilder() {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          validationContextSdsSecretConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder>(
                  getValidationContextSdsSecretConfig(),
                  getParentForChildren(),
                  isClean());
          validationContextSdsSecretConfig_ = null;
        }
        return validationContextSdsSecretConfigBuilder_;
      }

      private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validationContextCertificateProvider_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder> validationContextCertificateProviderBuilder_;
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       * @return Whether the validationContextCertificateProvider field is set.
       */
      public boolean hasValidationContextCertificateProvider() {
        return validationContextCertificateProviderBuilder_ != null || validationContextCertificateProvider_ != null;
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       * @return The validationContextCertificateProvider.
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getValidationContextCertificateProvider() {
        if (validationContextCertificateProviderBuilder_ == null) {
          return validationContextCertificateProvider_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance() : validationContextCertificateProvider_;
        } else {
          return validationContextCertificateProviderBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder setValidationContextCertificateProvider(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider value) {
        if (validationContextCertificateProviderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validationContextCertificateProvider_ = value;
          onChanged();
        } else {
          validationContextCertificateProviderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder setValidationContextCertificateProvider(
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder builderForValue) {
        if (validationContextCertificateProviderBuilder_ == null) {
          validationContextCertificateProvider_ = builderForValue.build();
          onChanged();
        } else {
          validationContextCertificateProviderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder mergeValidationContextCertificateProvider(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider value) {
        if (validationContextCertificateProviderBuilder_ == null) {
          if (validationContextCertificateProvider_ != null) {
            validationContextCertificateProvider_ =
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.newBuilder(validationContextCertificateProvider_).mergeFrom(value).buildPartial();
          } else {
            validationContextCertificateProvider_ = value;
          }
          onChanged();
        } else {
          validationContextCertificateProviderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder clearValidationContextCertificateProvider() {
        if (validationContextCertificateProviderBuilder_ == null) {
          validationContextCertificateProvider_ = null;
          onChanged();
        } else {
          validationContextCertificateProvider_ = null;
          validationContextCertificateProviderBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder getValidationContextCertificateProviderBuilder() {
        
        onChanged();
        return getValidationContextCertificateProviderFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getValidationContextCertificateProviderOrBuilder() {
        if (validationContextCertificateProviderBuilder_ != null) {
          return validationContextCertificateProviderBuilder_.getMessageOrBuilder();
        } else {
          return validationContextCertificateProvider_ == null ?
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance() : validationContextCertificateProvider_;
        }
      }
      /**
       * <pre>
       * Certificate provider for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 3 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder> 
          getValidationContextCertificateProviderFieldBuilder() {
        if (validationContextCertificateProviderBuilder_ == null) {
          validationContextCertificateProviderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder>(
                  getValidationContextCertificateProvider(),
                  getParentForChildren(),
                  isClean());
          validationContextCertificateProvider_ = null;
        }
        return validationContextCertificateProviderBuilder_;
      }

      private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validationContextCertificateProviderInstance_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder> validationContextCertificateProviderInstanceBuilder_;
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       * @return Whether the validationContextCertificateProviderInstance field is set.
       */
      public boolean hasValidationContextCertificateProviderInstance() {
        return validationContextCertificateProviderInstanceBuilder_ != null || validationContextCertificateProviderInstance_ != null;
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       * @return The validationContextCertificateProviderInstance.
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getValidationContextCertificateProviderInstance() {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          return validationContextCertificateProviderInstance_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance() : validationContextCertificateProviderInstance_;
        } else {
          return validationContextCertificateProviderInstanceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder setValidationContextCertificateProviderInstance(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance value) {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          validationContextCertificateProviderInstance_ = value;
          onChanged();
        } else {
          validationContextCertificateProviderInstanceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder setValidationContextCertificateProviderInstance(
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder builderForValue) {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          validationContextCertificateProviderInstance_ = builderForValue.build();
          onChanged();
        } else {
          validationContextCertificateProviderInstanceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder mergeValidationContextCertificateProviderInstance(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance value) {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          if (validationContextCertificateProviderInstance_ != null) {
            validationContextCertificateProviderInstance_ =
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.newBuilder(validationContextCertificateProviderInstance_).mergeFrom(value).buildPartial();
          } else {
            validationContextCertificateProviderInstance_ = value;
          }
          onChanged();
        } else {
          validationContextCertificateProviderInstanceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public Builder clearValidationContextCertificateProviderInstance() {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          validationContextCertificateProviderInstance_ = null;
          onChanged();
        } else {
          validationContextCertificateProviderInstance_ = null;
          validationContextCertificateProviderInstanceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder getValidationContextCertificateProviderInstanceBuilder() {
        
        onChanged();
        return getValidationContextCertificateProviderInstanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getValidationContextCertificateProviderInstanceOrBuilder() {
        if (validationContextCertificateProviderInstanceBuilder_ != null) {
          return validationContextCertificateProviderInstanceBuilder_.getMessageOrBuilder();
        } else {
          return validationContextCertificateProviderInstance_ == null ?
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance() : validationContextCertificateProviderInstance_;
        }
      }
      /**
       * <pre>
       * Certificate provider instance for fetching validation context.
       * Only one of validation_context_sds_secret_config, validation_context_certificate_provider,
       * or validation_context_certificate_provider_instance may be used.
       * [#not-implemented-hide:]
       * </pre>
       *
       * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 4 [(.udpa.annotations.field_migrate) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder> 
          getValidationContextCertificateProviderInstanceFieldBuilder() {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          validationContextCertificateProviderInstanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder>(
                  getValidationContextCertificateProviderInstance(),
                  getParentForChildren(),
                  isClean());
          validationContextCertificateProviderInstance_ = null;
        }
        return validationContextCertificateProviderInstanceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)
    }

    // @@protoc_insertion_point(class_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext)
    private static final io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext();
    }

    public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CombinedCertificateValidationContext>
        PARSER = new com.google.protobuf.AbstractParser<CombinedCertificateValidationContext>() {
      @java.lang.Override
      public CombinedCertificateValidationContext parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CombinedCertificateValidationContext(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CombinedCertificateValidationContext> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CombinedCertificateValidationContext> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int validationContextTypeCase_ = 0;
  private java.lang.Object validationContextType_;
  public enum ValidationContextTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    VALIDATION_CONTEXT(3),
    VALIDATION_CONTEXT_SDS_SECRET_CONFIG(7),
    COMBINED_VALIDATION_CONTEXT(8),
    VALIDATION_CONTEXT_CERTIFICATE_PROVIDER(10),
    VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE(12),
    VALIDATIONCONTEXTTYPE_NOT_SET(0);
    private final int value;
    private ValidationContextTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValidationContextTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValidationContextTypeCase forNumber(int value) {
      switch (value) {
        case 3: return VALIDATION_CONTEXT;
        case 7: return VALIDATION_CONTEXT_SDS_SECRET_CONFIG;
        case 8: return COMBINED_VALIDATION_CONTEXT;
        case 10: return VALIDATION_CONTEXT_CERTIFICATE_PROVIDER;
        case 12: return VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE;
        case 0: return VALIDATIONCONTEXTTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValidationContextTypeCase
  getValidationContextTypeCase() {
    return ValidationContextTypeCase.forNumber(
        validationContextTypeCase_);
  }

  public static final int TLS_PARAMS_FIELD_NUMBER = 1;
  private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters tlsParams_;
  /**
   * <pre>
   * TLS protocol versions, cipher suites etc.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
   * @return Whether the tlsParams field is set.
   */
  @java.lang.Override
  public boolean hasTlsParams() {
    return tlsParams_ != null;
  }
  /**
   * <pre>
   * TLS protocol versions, cipher suites etc.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
   * @return The tlsParams.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters getTlsParams() {
    return tlsParams_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.getDefaultInstance() : tlsParams_;
  }
  /**
   * <pre>
   * TLS protocol versions, cipher suites etc.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParametersOrBuilder getTlsParamsOrBuilder() {
    return getTlsParams();
  }

  public static final int TLS_CERTIFICATES_FIELD_NUMBER = 2;
  private java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate> tlsCertificates_;
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate> getTlsCertificatesList() {
    return tlsCertificates_;
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder> 
      getTlsCertificatesOrBuilderList() {
    return tlsCertificates_;
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public int getTlsCertificatesCount() {
    return tlsCertificates_.size();
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate getTlsCertificates(int index) {
    return tlsCertificates_.get(index);
  }
  /**
   * <pre>
   * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder getTlsCertificatesOrBuilder(
      int index) {
    return tlsCertificates_.get(index);
  }

  public static final int TLS_CERTIFICATE_SDS_SECRET_CONFIGS_FIELD_NUMBER = 6;
  private java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig> tlsCertificateSdsSecretConfigs_;
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig> getTlsCertificateSdsSecretConfigsList() {
    return tlsCertificateSdsSecretConfigs_;
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> 
      getTlsCertificateSdsSecretConfigsOrBuilderList() {
    return tlsCertificateSdsSecretConfigs_;
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public int getTlsCertificateSdsSecretConfigsCount() {
    return tlsCertificateSdsSecretConfigs_.size();
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getTlsCertificateSdsSecretConfigs(int index) {
    return tlsCertificateSdsSecretConfigs_.get(index);
  }
  /**
   * <pre>
   * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getTlsCertificateSdsSecretConfigsOrBuilder(
      int index) {
    return tlsCertificateSdsSecretConfigs_.get(index);
  }

  public static final int TLS_CERTIFICATE_CERTIFICATE_PROVIDER_FIELD_NUMBER = 9;
  private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tlsCertificateCertificateProvider_;
  /**
   * <pre>
   * Certificate provider for fetching TLS certificates.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
   * @return Whether the tlsCertificateCertificateProvider field is set.
   */
  @java.lang.Override
  public boolean hasTlsCertificateCertificateProvider() {
    return tlsCertificateCertificateProvider_ != null;
  }
  /**
   * <pre>
   * Certificate provider for fetching TLS certificates.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
   * @return The tlsCertificateCertificateProvider.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getTlsCertificateCertificateProvider() {
    return tlsCertificateCertificateProvider_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance() : tlsCertificateCertificateProvider_;
  }
  /**
   * <pre>
   * Certificate provider for fetching TLS certificates.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getTlsCertificateCertificateProviderOrBuilder() {
    return getTlsCertificateCertificateProvider();
  }

  public static final int TLS_CERTIFICATE_CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER = 11;
  private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tlsCertificateCertificateProviderInstance_;
  /**
   * <pre>
   * Certificate provider instance for fetching TLS certificates.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
   * @return Whether the tlsCertificateCertificateProviderInstance field is set.
   */
  @java.lang.Override
  public boolean hasTlsCertificateCertificateProviderInstance() {
    return tlsCertificateCertificateProviderInstance_ != null;
  }
  /**
   * <pre>
   * Certificate provider instance for fetching TLS certificates.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
   * @return The tlsCertificateCertificateProviderInstance.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getTlsCertificateCertificateProviderInstance() {
    return tlsCertificateCertificateProviderInstance_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance() : tlsCertificateCertificateProviderInstance_;
  }
  /**
   * <pre>
   * Certificate provider instance for fetching TLS certificates.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getTlsCertificateCertificateProviderInstanceOrBuilder() {
    return getTlsCertificateCertificateProviderInstance();
  }

  public static final int VALIDATION_CONTEXT_FIELD_NUMBER = 3;
  /**
   * <pre>
   * How to validate peer certificates.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
   * @return Whether the validationContext field is set.
   */
  @java.lang.Override
  public boolean hasValidationContext() {
    return validationContextTypeCase_ == 3;
  }
  /**
   * <pre>
   * How to validate peer certificates.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
   * @return The validationContext.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext getValidationContext() {
    if (validationContextTypeCase_ == 3) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance();
  }
  /**
   * <pre>
   * How to validate peer certificates.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder getValidationContextOrBuilder() {
    if (validationContextTypeCase_ == 3) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance();
  }

  public static final int VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
   * @return Whether the validationContextSdsSecretConfig field is set.
   */
  @java.lang.Override
  public boolean hasValidationContextSdsSecretConfig() {
    return validationContextTypeCase_ == 7;
  }
  /**
   * <pre>
   * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
   * @return The validationContextSdsSecretConfig.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getValidationContextSdsSecretConfig() {
    if (validationContextTypeCase_ == 7) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance();
  }
  /**
   * <pre>
   * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
   * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
    if (validationContextTypeCase_ == 7) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance();
  }

  public static final int COMBINED_VALIDATION_CONTEXT_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Combined certificate validation context holds a default CertificateValidationContext
   * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
   * and default CertificateValidationContext are merged into a new CertificateValidationContext
   * for validation. This merge is done by Message::MergeFrom(), so dynamic
   * CertificateValidationContext overwrites singular fields in default
   * CertificateValidationContext, and concatenates repeated fields to default
   * CertificateValidationContext, and logical OR is applied to boolean fields.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
   * @return Whether the combinedValidationContext field is set.
   */
  @java.lang.Override
  public boolean hasCombinedValidationContext() {
    return validationContextTypeCase_ == 8;
  }
  /**
   * <pre>
   * Combined certificate validation context holds a default CertificateValidationContext
   * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
   * and default CertificateValidationContext are merged into a new CertificateValidationContext
   * for validation. This merge is done by Message::MergeFrom(), so dynamic
   * CertificateValidationContext overwrites singular fields in default
   * CertificateValidationContext, and concatenates repeated fields to default
   * CertificateValidationContext, and logical OR is applied to boolean fields.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
   * @return The combinedValidationContext.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext getCombinedValidationContext() {
    if (validationContextTypeCase_ == 8) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
  }
  /**
   * <pre>
   * Combined certificate validation context holds a default CertificateValidationContext
   * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
   * and default CertificateValidationContext are merged into a new CertificateValidationContext
   * for validation. This merge is done by Message::MergeFrom(), so dynamic
   * CertificateValidationContext overwrites singular fields in default
   * CertificateValidationContext, and concatenates repeated fields to default
   * CertificateValidationContext, and logical OR is applied to boolean fields.
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContextOrBuilder getCombinedValidationContextOrBuilder() {
    if (validationContextTypeCase_ == 8) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
  }

  public static final int VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Certificate provider for fetching validation context.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
   * @return Whether the validationContextCertificateProvider field is set.
   */
  @java.lang.Override
  public boolean hasValidationContextCertificateProvider() {
    return validationContextTypeCase_ == 10;
  }
  /**
   * <pre>
   * Certificate provider for fetching validation context.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
   * @return The validationContextCertificateProvider.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getValidationContextCertificateProvider() {
    if (validationContextTypeCase_ == 10) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
  }
  /**
   * <pre>
   * Certificate provider for fetching validation context.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getValidationContextCertificateProviderOrBuilder() {
    if (validationContextTypeCase_ == 10) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
  }

  public static final int VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Certificate provider instance for fetching validation context.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
   * @return Whether the validationContextCertificateProviderInstance field is set.
   */
  @java.lang.Override
  public boolean hasValidationContextCertificateProviderInstance() {
    return validationContextTypeCase_ == 12;
  }
  /**
   * <pre>
   * Certificate provider instance for fetching validation context.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
   * @return The validationContextCertificateProviderInstance.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getValidationContextCertificateProviderInstance() {
    if (validationContextTypeCase_ == 12) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
  }
  /**
   * <pre>
   * Certificate provider instance for fetching validation context.
   * [#not-implemented-hide:]
   * </pre>
   *
   * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getValidationContextCertificateProviderInstanceOrBuilder() {
    if (validationContextTypeCase_ == 12) {
       return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_;
    }
    return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
  }

  public static final int ALPN_PROTOCOLS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList alpnProtocols_;
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @return A list containing the alpnProtocols.
   */
  public com.google.protobuf.ProtocolStringList
      getAlpnProtocolsList() {
    return alpnProtocols_;
  }
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @return The count of alpnProtocols.
   */
  public int getAlpnProtocolsCount() {
    return alpnProtocols_.size();
  }
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @param index The index of the element to return.
   * @return The alpnProtocols at the given index.
   */
  public java.lang.String getAlpnProtocols(int index) {
    return alpnProtocols_.get(index);
  }
  /**
   * <pre>
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
   * parameter in the HTTP connection manager for more information):
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   * </pre>
   *
   * <code>repeated string alpn_protocols = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the alpnProtocols at the given index.
   */
  public com.google.protobuf.ByteString
      getAlpnProtocolsBytes(int index) {
    return alpnProtocols_.getByteString(index);
  }

  public static final int CUSTOM_HANDSHAKER_FIELD_NUMBER = 13;
  private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig customHandshaker_;
  /**
   * <pre>
   * Custom TLS handshaker. If empty, defaults to native TLS handshaking
   * behavior.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
   * @return Whether the customHandshaker field is set.
   */
  @java.lang.Override
  public boolean hasCustomHandshaker() {
    return customHandshaker_ != null;
  }
  /**
   * <pre>
   * Custom TLS handshaker. If empty, defaults to native TLS handshaking
   * behavior.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
   * @return The customHandshaker.
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCustomHandshaker() {
    return customHandshaker_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : customHandshaker_;
  }
  /**
   * <pre>
   * Custom TLS handshaker. If empty, defaults to native TLS handshaking
   * behavior.
   * </pre>
   *
   * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
   */
  @java.lang.Override
  public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCustomHandshakerOrBuilder() {
    return getCustomHandshaker();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (tlsParams_ != null) {
      output.writeMessage(1, getTlsParams());
    }
    for (int i = 0; i < tlsCertificates_.size(); i++) {
      output.writeMessage(2, tlsCertificates_.get(i));
    }
    if (validationContextTypeCase_ == 3) {
      output.writeMessage(3, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_);
    }
    for (int i = 0; i < alpnProtocols_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, alpnProtocols_.getRaw(i));
    }
    for (int i = 0; i < tlsCertificateSdsSecretConfigs_.size(); i++) {
      output.writeMessage(6, tlsCertificateSdsSecretConfigs_.get(i));
    }
    if (validationContextTypeCase_ == 7) {
      output.writeMessage(7, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_);
    }
    if (validationContextTypeCase_ == 8) {
      output.writeMessage(8, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_);
    }
    if (tlsCertificateCertificateProvider_ != null) {
      output.writeMessage(9, getTlsCertificateCertificateProvider());
    }
    if (validationContextTypeCase_ == 10) {
      output.writeMessage(10, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_);
    }
    if (tlsCertificateCertificateProviderInstance_ != null) {
      output.writeMessage(11, getTlsCertificateCertificateProviderInstance());
    }
    if (validationContextTypeCase_ == 12) {
      output.writeMessage(12, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_);
    }
    if (customHandshaker_ != null) {
      output.writeMessage(13, getCustomHandshaker());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (tlsParams_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTlsParams());
    }
    for (int i = 0; i < tlsCertificates_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, tlsCertificates_.get(i));
    }
    if (validationContextTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < alpnProtocols_.size(); i++) {
        dataSize += computeStringSizeNoTag(alpnProtocols_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getAlpnProtocolsList().size();
    }
    for (int i = 0; i < tlsCertificateSdsSecretConfigs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, tlsCertificateSdsSecretConfigs_.get(i));
    }
    if (validationContextTypeCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_);
    }
    if (validationContextTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_);
    }
    if (tlsCertificateCertificateProvider_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getTlsCertificateCertificateProvider());
    }
    if (validationContextTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_);
    }
    if (tlsCertificateCertificateProviderInstance_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getTlsCertificateCertificateProviderInstance());
    }
    if (validationContextTypeCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_);
    }
    if (customHandshaker_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getCustomHandshaker());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext)) {
      return super.equals(obj);
    }
    io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext other = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext) obj;

    if (hasTlsParams() != other.hasTlsParams()) return false;
    if (hasTlsParams()) {
      if (!getTlsParams()
          .equals(other.getTlsParams())) return false;
    }
    if (!getTlsCertificatesList()
        .equals(other.getTlsCertificatesList())) return false;
    if (!getTlsCertificateSdsSecretConfigsList()
        .equals(other.getTlsCertificateSdsSecretConfigsList())) return false;
    if (hasTlsCertificateCertificateProvider() != other.hasTlsCertificateCertificateProvider()) return false;
    if (hasTlsCertificateCertificateProvider()) {
      if (!getTlsCertificateCertificateProvider()
          .equals(other.getTlsCertificateCertificateProvider())) return false;
    }
    if (hasTlsCertificateCertificateProviderInstance() != other.hasTlsCertificateCertificateProviderInstance()) return false;
    if (hasTlsCertificateCertificateProviderInstance()) {
      if (!getTlsCertificateCertificateProviderInstance()
          .equals(other.getTlsCertificateCertificateProviderInstance())) return false;
    }
    if (!getAlpnProtocolsList()
        .equals(other.getAlpnProtocolsList())) return false;
    if (hasCustomHandshaker() != other.hasCustomHandshaker()) return false;
    if (hasCustomHandshaker()) {
      if (!getCustomHandshaker()
          .equals(other.getCustomHandshaker())) return false;
    }
    if (!getValidationContextTypeCase().equals(other.getValidationContextTypeCase())) return false;
    switch (validationContextTypeCase_) {
      case 3:
        if (!getValidationContext()
            .equals(other.getValidationContext())) return false;
        break;
      case 7:
        if (!getValidationContextSdsSecretConfig()
            .equals(other.getValidationContextSdsSecretConfig())) return false;
        break;
      case 8:
        if (!getCombinedValidationContext()
            .equals(other.getCombinedValidationContext())) return false;
        break;
      case 10:
        if (!getValidationContextCertificateProvider()
            .equals(other.getValidationContextCertificateProvider())) return false;
        break;
      case 12:
        if (!getValidationContextCertificateProviderInstance()
            .equals(other.getValidationContextCertificateProviderInstance())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTlsParams()) {
      hash = (37 * hash) + TLS_PARAMS_FIELD_NUMBER;
      hash = (53 * hash) + getTlsParams().hashCode();
    }
    if (getTlsCertificatesCount() > 0) {
      hash = (37 * hash) + TLS_CERTIFICATES_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCertificatesList().hashCode();
    }
    if (getTlsCertificateSdsSecretConfigsCount() > 0) {
      hash = (37 * hash) + TLS_CERTIFICATE_SDS_SECRET_CONFIGS_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCertificateSdsSecretConfigsList().hashCode();
    }
    if (hasTlsCertificateCertificateProvider()) {
      hash = (37 * hash) + TLS_CERTIFICATE_CERTIFICATE_PROVIDER_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCertificateCertificateProvider().hashCode();
    }
    if (hasTlsCertificateCertificateProviderInstance()) {
      hash = (37 * hash) + TLS_CERTIFICATE_CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCertificateCertificateProviderInstance().hashCode();
    }
    if (getAlpnProtocolsCount() > 0) {
      hash = (37 * hash) + ALPN_PROTOCOLS_FIELD_NUMBER;
      hash = (53 * hash) + getAlpnProtocolsList().hashCode();
    }
    if (hasCustomHandshaker()) {
      hash = (37 * hash) + CUSTOM_HANDSHAKER_FIELD_NUMBER;
      hash = (53 * hash) + getCustomHandshaker().hashCode();
    }
    switch (validationContextTypeCase_) {
      case 3:
        hash = (37 * hash) + VALIDATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContext().hashCode();
        break;
      case 7:
        hash = (37 * hash) + VALIDATION_CONTEXT_SDS_SECRET_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextSdsSecretConfig().hashCode();
        break;
      case 8:
        hash = (37 * hash) + COMBINED_VALIDATION_CONTEXT_FIELD_NUMBER;
        hash = (53 * hash) + getCombinedValidationContext().hashCode();
        break;
      case 10:
        hash = (37 * hash) + VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextCertificateProvider().hashCode();
        break;
      case 12:
        hash = (37 * hash) + VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getValidationContextCertificateProviderInstance().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * TLS context shared by both client and server TLS contexts.
   * [#next-free-field: 14]
   * </pre>
   *
   * Protobuf type {@code envoy.extensions.transport_sockets.tls.v3.CommonTlsContext}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext)
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContextOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.class, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.Builder.class);
    }

    // Construct using io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getTlsCertificatesFieldBuilder();
        getTlsCertificateSdsSecretConfigsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (tlsParamsBuilder_ == null) {
        tlsParams_ = null;
      } else {
        tlsParams_ = null;
        tlsParamsBuilder_ = null;
      }
      if (tlsCertificatesBuilder_ == null) {
        tlsCertificates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        tlsCertificatesBuilder_.clear();
      }
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        tlsCertificateSdsSecretConfigs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.clear();
      }
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        tlsCertificateCertificateProvider_ = null;
      } else {
        tlsCertificateCertificateProvider_ = null;
        tlsCertificateCertificateProviderBuilder_ = null;
      }
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        tlsCertificateCertificateProviderInstance_ = null;
      } else {
        tlsCertificateCertificateProviderInstance_ = null;
        tlsCertificateCertificateProviderInstanceBuilder_ = null;
      }
      alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      if (customHandshakerBuilder_ == null) {
        customHandshaker_ = null;
      } else {
        customHandshaker_ = null;
        customHandshakerBuilder_ = null;
      }
      validationContextTypeCase_ = 0;
      validationContextType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsProto.internal_static_envoy_extensions_transport_sockets_tls_v3_CommonTlsContext_descriptor;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext getDefaultInstanceForType() {
      return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.getDefaultInstance();
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext build() {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext buildPartial() {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext result = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext(this);
      int from_bitField0_ = bitField0_;
      if (tlsParamsBuilder_ == null) {
        result.tlsParams_ = tlsParams_;
      } else {
        result.tlsParams_ = tlsParamsBuilder_.build();
      }
      if (tlsCertificatesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          tlsCertificates_ = java.util.Collections.unmodifiableList(tlsCertificates_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.tlsCertificates_ = tlsCertificates_;
      } else {
        result.tlsCertificates_ = tlsCertificatesBuilder_.build();
      }
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          tlsCertificateSdsSecretConfigs_ = java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.tlsCertificateSdsSecretConfigs_ = tlsCertificateSdsSecretConfigs_;
      } else {
        result.tlsCertificateSdsSecretConfigs_ = tlsCertificateSdsSecretConfigsBuilder_.build();
      }
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        result.tlsCertificateCertificateProvider_ = tlsCertificateCertificateProvider_;
      } else {
        result.tlsCertificateCertificateProvider_ = tlsCertificateCertificateProviderBuilder_.build();
      }
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        result.tlsCertificateCertificateProviderInstance_ = tlsCertificateCertificateProviderInstance_;
      } else {
        result.tlsCertificateCertificateProviderInstance_ = tlsCertificateCertificateProviderInstanceBuilder_.build();
      }
      if (validationContextTypeCase_ == 3) {
        if (validationContextBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = validationContextBuilder_.build();
        }
      }
      if (validationContextTypeCase_ == 7) {
        if (validationContextSdsSecretConfigBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = validationContextSdsSecretConfigBuilder_.build();
        }
      }
      if (validationContextTypeCase_ == 8) {
        if (combinedValidationContextBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = combinedValidationContextBuilder_.build();
        }
      }
      if (validationContextTypeCase_ == 10) {
        if (validationContextCertificateProviderBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = validationContextCertificateProviderBuilder_.build();
        }
      }
      if (validationContextTypeCase_ == 12) {
        if (validationContextCertificateProviderInstanceBuilder_ == null) {
          result.validationContextType_ = validationContextType_;
        } else {
          result.validationContextType_ = validationContextCertificateProviderInstanceBuilder_.build();
        }
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        alpnProtocols_ = alpnProtocols_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.alpnProtocols_ = alpnProtocols_;
      if (customHandshakerBuilder_ == null) {
        result.customHandshaker_ = customHandshaker_;
      } else {
        result.customHandshaker_ = customHandshakerBuilder_.build();
      }
      result.validationContextTypeCase_ = validationContextTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext) {
        return mergeFrom((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext other) {
      if (other == io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.getDefaultInstance()) return this;
      if (other.hasTlsParams()) {
        mergeTlsParams(other.getTlsParams());
      }
      if (tlsCertificatesBuilder_ == null) {
        if (!other.tlsCertificates_.isEmpty()) {
          if (tlsCertificates_.isEmpty()) {
            tlsCertificates_ = other.tlsCertificates_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTlsCertificatesIsMutable();
            tlsCertificates_.addAll(other.tlsCertificates_);
          }
          onChanged();
        }
      } else {
        if (!other.tlsCertificates_.isEmpty()) {
          if (tlsCertificatesBuilder_.isEmpty()) {
            tlsCertificatesBuilder_.dispose();
            tlsCertificatesBuilder_ = null;
            tlsCertificates_ = other.tlsCertificates_;
            bitField0_ = (bitField0_ & ~0x00000001);
            tlsCertificatesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTlsCertificatesFieldBuilder() : null;
          } else {
            tlsCertificatesBuilder_.addAllMessages(other.tlsCertificates_);
          }
        }
      }
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (!other.tlsCertificateSdsSecretConfigs_.isEmpty()) {
          if (tlsCertificateSdsSecretConfigs_.isEmpty()) {
            tlsCertificateSdsSecretConfigs_ = other.tlsCertificateSdsSecretConfigs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTlsCertificateSdsSecretConfigsIsMutable();
            tlsCertificateSdsSecretConfigs_.addAll(other.tlsCertificateSdsSecretConfigs_);
          }
          onChanged();
        }
      } else {
        if (!other.tlsCertificateSdsSecretConfigs_.isEmpty()) {
          if (tlsCertificateSdsSecretConfigsBuilder_.isEmpty()) {
            tlsCertificateSdsSecretConfigsBuilder_.dispose();
            tlsCertificateSdsSecretConfigsBuilder_ = null;
            tlsCertificateSdsSecretConfigs_ = other.tlsCertificateSdsSecretConfigs_;
            bitField0_ = (bitField0_ & ~0x00000002);
            tlsCertificateSdsSecretConfigsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTlsCertificateSdsSecretConfigsFieldBuilder() : null;
          } else {
            tlsCertificateSdsSecretConfigsBuilder_.addAllMessages(other.tlsCertificateSdsSecretConfigs_);
          }
        }
      }
      if (other.hasTlsCertificateCertificateProvider()) {
        mergeTlsCertificateCertificateProvider(other.getTlsCertificateCertificateProvider());
      }
      if (other.hasTlsCertificateCertificateProviderInstance()) {
        mergeTlsCertificateCertificateProviderInstance(other.getTlsCertificateCertificateProviderInstance());
      }
      if (!other.alpnProtocols_.isEmpty()) {
        if (alpnProtocols_.isEmpty()) {
          alpnProtocols_ = other.alpnProtocols_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureAlpnProtocolsIsMutable();
          alpnProtocols_.addAll(other.alpnProtocols_);
        }
        onChanged();
      }
      if (other.hasCustomHandshaker()) {
        mergeCustomHandshaker(other.getCustomHandshaker());
      }
      switch (other.getValidationContextTypeCase()) {
        case VALIDATION_CONTEXT: {
          mergeValidationContext(other.getValidationContext());
          break;
        }
        case VALIDATION_CONTEXT_SDS_SECRET_CONFIG: {
          mergeValidationContextSdsSecretConfig(other.getValidationContextSdsSecretConfig());
          break;
        }
        case COMBINED_VALIDATION_CONTEXT: {
          mergeCombinedValidationContext(other.getCombinedValidationContext());
          break;
        }
        case VALIDATION_CONTEXT_CERTIFICATE_PROVIDER: {
          mergeValidationContextCertificateProvider(other.getValidationContextCertificateProvider());
          break;
        }
        case VALIDATION_CONTEXT_CERTIFICATE_PROVIDER_INSTANCE: {
          mergeValidationContextCertificateProviderInstance(other.getValidationContextCertificateProviderInstance());
          break;
        }
        case VALIDATIONCONTEXTTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int validationContextTypeCase_ = 0;
    private java.lang.Object validationContextType_;
    public ValidationContextTypeCase
        getValidationContextTypeCase() {
      return ValidationContextTypeCase.forNumber(
          validationContextTypeCase_);
    }

    public Builder clearValidationContextType() {
      validationContextTypeCase_ = 0;
      validationContextType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters tlsParams_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParametersOrBuilder> tlsParamsBuilder_;
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     * @return Whether the tlsParams field is set.
     */
    public boolean hasTlsParams() {
      return tlsParamsBuilder_ != null || tlsParams_ != null;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     * @return The tlsParams.
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters getTlsParams() {
      if (tlsParamsBuilder_ == null) {
        return tlsParams_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.getDefaultInstance() : tlsParams_;
      } else {
        return tlsParamsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    public Builder setTlsParams(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters value) {
      if (tlsParamsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tlsParams_ = value;
        onChanged();
      } else {
        tlsParamsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    public Builder setTlsParams(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder builderForValue) {
      if (tlsParamsBuilder_ == null) {
        tlsParams_ = builderForValue.build();
        onChanged();
      } else {
        tlsParamsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    public Builder mergeTlsParams(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters value) {
      if (tlsParamsBuilder_ == null) {
        if (tlsParams_ != null) {
          tlsParams_ =
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.newBuilder(tlsParams_).mergeFrom(value).buildPartial();
        } else {
          tlsParams_ = value;
        }
        onChanged();
      } else {
        tlsParamsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    public Builder clearTlsParams() {
      if (tlsParamsBuilder_ == null) {
        tlsParams_ = null;
        onChanged();
      } else {
        tlsParams_ = null;
        tlsParamsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder getTlsParamsBuilder() {
      
      onChanged();
      return getTlsParamsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParametersOrBuilder getTlsParamsOrBuilder() {
      if (tlsParamsBuilder_ != null) {
        return tlsParamsBuilder_.getMessageOrBuilder();
      } else {
        return tlsParams_ == null ?
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.getDefaultInstance() : tlsParams_;
      }
    }
    /**
     * <pre>
     * TLS protocol versions, cipher suites etc.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.TlsParameters tls_params = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParametersOrBuilder> 
        getTlsParamsFieldBuilder() {
      if (tlsParamsBuilder_ == null) {
        tlsParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParameters.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsParametersOrBuilder>(
                getTlsParams(),
                getParentForChildren(),
                isClean());
        tlsParams_ = null;
      }
      return tlsParamsBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate> tlsCertificates_ =
      java.util.Collections.emptyList();
    private void ensureTlsCertificatesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        tlsCertificates_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate>(tlsCertificates_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder> tlsCertificatesBuilder_;

    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate> getTlsCertificatesList() {
      if (tlsCertificatesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tlsCertificates_);
      } else {
        return tlsCertificatesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public int getTlsCertificatesCount() {
      if (tlsCertificatesBuilder_ == null) {
        return tlsCertificates_.size();
      } else {
        return tlsCertificatesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate getTlsCertificates(int index) {
      if (tlsCertificatesBuilder_ == null) {
        return tlsCertificates_.get(index);
      } else {
        return tlsCertificatesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder setTlsCertificates(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate value) {
      if (tlsCertificatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.set(index, value);
        onChanged();
      } else {
        tlsCertificatesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder setTlsCertificates(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder builderForValue) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.set(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificatesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate value) {
      if (tlsCertificatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(value);
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate value) {
      if (tlsCertificatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(index, value);
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder builderForValue) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(builderForValue.build());
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addTlsCertificates(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder builderForValue) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.add(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificatesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder addAllTlsCertificates(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate> values) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tlsCertificates_);
        onChanged();
      } else {
        tlsCertificatesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder clearTlsCertificates() {
      if (tlsCertificatesBuilder_ == null) {
        tlsCertificates_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        tlsCertificatesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public Builder removeTlsCertificates(int index) {
      if (tlsCertificatesBuilder_ == null) {
        ensureTlsCertificatesIsMutable();
        tlsCertificates_.remove(index);
        onChanged();
      } else {
        tlsCertificatesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder getTlsCertificatesBuilder(
        int index) {
      return getTlsCertificatesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder getTlsCertificatesOrBuilder(
        int index) {
      if (tlsCertificatesBuilder_ == null) {
        return tlsCertificates_.get(index);  } else {
        return tlsCertificatesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder> 
         getTlsCertificatesOrBuilderList() {
      if (tlsCertificatesBuilder_ != null) {
        return tlsCertificatesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tlsCertificates_);
      }
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder addTlsCertificatesBuilder() {
      return getTlsCertificatesFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.getDefaultInstance());
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder addTlsCertificatesBuilder(
        int index) {
      return getTlsCertificatesFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.getDefaultInstance());
    }
    /**
     * <pre>
     * :ref:`Multiple TLS certificates &lt;arch_overview_ssl_cert_select&gt;` can be associated with the
     * same context to allow both RSA and ECDSA certificates.
     * Only a single TLS certificate is supported in client contexts. In server contexts, the first
     * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
     * used for clients that support ECDSA.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificates = 2;</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder> 
         getTlsCertificatesBuilderList() {
      return getTlsCertificatesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder> 
        getTlsCertificatesFieldBuilder() {
      if (tlsCertificatesBuilder_ == null) {
        tlsCertificatesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificate.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.TlsCertificateOrBuilder>(
                tlsCertificates_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        tlsCertificates_ = null;
      }
      return tlsCertificatesBuilder_;
    }

    private java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig> tlsCertificateSdsSecretConfigs_ =
      java.util.Collections.emptyList();
    private void ensureTlsCertificateSdsSecretConfigsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        tlsCertificateSdsSecretConfigs_ = new java.util.ArrayList<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig>(tlsCertificateSdsSecretConfigs_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> tlsCertificateSdsSecretConfigsBuilder_;

    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig> getTlsCertificateSdsSecretConfigsList() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
      } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public int getTlsCertificateSdsSecretConfigsCount() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return tlsCertificateSdsSecretConfigs_.size();
      } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getTlsCertificateSdsSecretConfigs(int index) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return tlsCertificateSdsSecretConfigs_.get(index);
      } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.set(index, value);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder setTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder builderForValue) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.set(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(value);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(index, value);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder builderForValue) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(builderForValue.build());
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addTlsCertificateSdsSecretConfigs(
        int index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder builderForValue) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.add(index, builderForValue.build());
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder addAllTlsCertificateSdsSecretConfigs(
        java.lang.Iterable<? extends io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig> values) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tlsCertificateSdsSecretConfigs_);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder clearTlsCertificateSdsSecretConfigs() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        tlsCertificateSdsSecretConfigs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public Builder removeTlsCertificateSdsSecretConfigs(int index) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        ensureTlsCertificateSdsSecretConfigsIsMutable();
        tlsCertificateSdsSecretConfigs_.remove(index);
        onChanged();
      } else {
        tlsCertificateSdsSecretConfigsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder getTlsCertificateSdsSecretConfigsBuilder(
        int index) {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getTlsCertificateSdsSecretConfigsOrBuilder(
        int index) {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        return tlsCertificateSdsSecretConfigs_.get(index);  } else {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<? extends io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> 
         getTlsCertificateSdsSecretConfigsOrBuilderList() {
      if (tlsCertificateSdsSecretConfigsBuilder_ != null) {
        return tlsCertificateSdsSecretConfigsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tlsCertificateSdsSecretConfigs_);
      }
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder addTlsCertificateSdsSecretConfigsBuilder() {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().addBuilder(
          io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance());
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder addTlsCertificateSdsSecretConfigsBuilder(
        int index) {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().addBuilder(
          index, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance());
    }
    /**
     * <pre>
     * Configs for fetching TLS certificates via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>repeated .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig tls_certificate_sds_secret_configs = 6 [(.validate.rules) = { ... }</code>
     */
    public java.util.List<io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder> 
         getTlsCertificateSdsSecretConfigsBuilderList() {
      return getTlsCertificateSdsSecretConfigsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> 
        getTlsCertificateSdsSecretConfigsFieldBuilder() {
      if (tlsCertificateSdsSecretConfigsBuilder_ == null) {
        tlsCertificateSdsSecretConfigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder>(
                tlsCertificateSdsSecretConfigs_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        tlsCertificateSdsSecretConfigs_ = null;
      }
      return tlsCertificateSdsSecretConfigsBuilder_;
    }

    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tlsCertificateCertificateProvider_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder> tlsCertificateCertificateProviderBuilder_;
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     * @return Whether the tlsCertificateCertificateProvider field is set.
     */
    public boolean hasTlsCertificateCertificateProvider() {
      return tlsCertificateCertificateProviderBuilder_ != null || tlsCertificateCertificateProvider_ != null;
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     * @return The tlsCertificateCertificateProvider.
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getTlsCertificateCertificateProvider() {
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        return tlsCertificateCertificateProvider_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance() : tlsCertificateCertificateProvider_;
      } else {
        return tlsCertificateCertificateProviderBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    public Builder setTlsCertificateCertificateProvider(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider value) {
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tlsCertificateCertificateProvider_ = value;
        onChanged();
      } else {
        tlsCertificateCertificateProviderBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    public Builder setTlsCertificateCertificateProvider(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder builderForValue) {
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        tlsCertificateCertificateProvider_ = builderForValue.build();
        onChanged();
      } else {
        tlsCertificateCertificateProviderBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    public Builder mergeTlsCertificateCertificateProvider(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider value) {
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        if (tlsCertificateCertificateProvider_ != null) {
          tlsCertificateCertificateProvider_ =
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.newBuilder(tlsCertificateCertificateProvider_).mergeFrom(value).buildPartial();
        } else {
          tlsCertificateCertificateProvider_ = value;
        }
        onChanged();
      } else {
        tlsCertificateCertificateProviderBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    public Builder clearTlsCertificateCertificateProvider() {
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        tlsCertificateCertificateProvider_ = null;
        onChanged();
      } else {
        tlsCertificateCertificateProvider_ = null;
        tlsCertificateCertificateProviderBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder getTlsCertificateCertificateProviderBuilder() {
      
      onChanged();
      return getTlsCertificateCertificateProviderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getTlsCertificateCertificateProviderOrBuilder() {
      if (tlsCertificateCertificateProviderBuilder_ != null) {
        return tlsCertificateCertificateProviderBuilder_.getMessageOrBuilder();
      } else {
        return tlsCertificateCertificateProvider_ == null ?
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance() : tlsCertificateCertificateProvider_;
      }
    }
    /**
     * <pre>
     * Certificate provider for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider tls_certificate_certificate_provider = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder> 
        getTlsCertificateCertificateProviderFieldBuilder() {
      if (tlsCertificateCertificateProviderBuilder_ == null) {
        tlsCertificateCertificateProviderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder>(
                getTlsCertificateCertificateProvider(),
                getParentForChildren(),
                isClean());
        tlsCertificateCertificateProvider_ = null;
      }
      return tlsCertificateCertificateProviderBuilder_;
    }

    private io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tlsCertificateCertificateProviderInstance_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder> tlsCertificateCertificateProviderInstanceBuilder_;
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     * @return Whether the tlsCertificateCertificateProviderInstance field is set.
     */
    public boolean hasTlsCertificateCertificateProviderInstance() {
      return tlsCertificateCertificateProviderInstanceBuilder_ != null || tlsCertificateCertificateProviderInstance_ != null;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     * @return The tlsCertificateCertificateProviderInstance.
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getTlsCertificateCertificateProviderInstance() {
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        return tlsCertificateCertificateProviderInstance_ == null ? io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance() : tlsCertificateCertificateProviderInstance_;
      } else {
        return tlsCertificateCertificateProviderInstanceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    public Builder setTlsCertificateCertificateProviderInstance(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance value) {
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tlsCertificateCertificateProviderInstance_ = value;
        onChanged();
      } else {
        tlsCertificateCertificateProviderInstanceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    public Builder setTlsCertificateCertificateProviderInstance(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder builderForValue) {
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        tlsCertificateCertificateProviderInstance_ = builderForValue.build();
        onChanged();
      } else {
        tlsCertificateCertificateProviderInstanceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    public Builder mergeTlsCertificateCertificateProviderInstance(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance value) {
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        if (tlsCertificateCertificateProviderInstance_ != null) {
          tlsCertificateCertificateProviderInstance_ =
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.newBuilder(tlsCertificateCertificateProviderInstance_).mergeFrom(value).buildPartial();
        } else {
          tlsCertificateCertificateProviderInstance_ = value;
        }
        onChanged();
      } else {
        tlsCertificateCertificateProviderInstanceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    public Builder clearTlsCertificateCertificateProviderInstance() {
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        tlsCertificateCertificateProviderInstance_ = null;
        onChanged();
      } else {
        tlsCertificateCertificateProviderInstance_ = null;
        tlsCertificateCertificateProviderInstanceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder getTlsCertificateCertificateProviderInstanceBuilder() {
      
      onChanged();
      return getTlsCertificateCertificateProviderInstanceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getTlsCertificateCertificateProviderInstanceOrBuilder() {
      if (tlsCertificateCertificateProviderInstanceBuilder_ != null) {
        return tlsCertificateCertificateProviderInstanceBuilder_.getMessageOrBuilder();
      } else {
        return tlsCertificateCertificateProviderInstance_ == null ?
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance() : tlsCertificateCertificateProviderInstance_;
      }
    }
    /**
     * <pre>
     * Certificate provider instance for fetching TLS certificates.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance tls_certificate_certificate_provider_instance = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder> 
        getTlsCertificateCertificateProviderInstanceFieldBuilder() {
      if (tlsCertificateCertificateProviderInstanceBuilder_ == null) {
        tlsCertificateCertificateProviderInstanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder>(
                getTlsCertificateCertificateProviderInstance(),
                getParentForChildren(),
                isClean());
        tlsCertificateCertificateProviderInstance_ = null;
      }
      return tlsCertificateCertificateProviderInstanceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder> validationContextBuilder_;
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     * @return Whether the validationContext field is set.
     */
    @java.lang.Override
    public boolean hasValidationContext() {
      return validationContextTypeCase_ == 3;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     * @return The validationContext.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext getValidationContext() {
      if (validationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 3) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 3) {
          return validationContextBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder setValidationContext(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext value) {
      if (validationContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        validationContextBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder setValidationContext(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder builderForValue) {
      if (validationContextBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        validationContextBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder mergeValidationContext(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext value) {
      if (validationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 3 &&
            validationContextType_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.newBuilder((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 3) {
          validationContextBuilder_.mergeFrom(value);
        }
        validationContextBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    public Builder clearValidationContext() {
      if (validationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 3) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 3) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        validationContextBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder getValidationContextBuilder() {
      return getValidationContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder getValidationContextOrBuilder() {
      if ((validationContextTypeCase_ == 3) && (validationContextBuilder_ != null)) {
        return validationContextBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 3) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * How to validate peer certificates.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder> 
        getValidationContextFieldBuilder() {
      if (validationContextBuilder_ == null) {
        if (!(validationContextTypeCase_ == 3)) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.getDefaultInstance();
        }
        validationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContextOrBuilder>(
                (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 3;
      onChanged();;
      return validationContextBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> validationContextSdsSecretConfigBuilder_;
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     * @return Whether the validationContextSdsSecretConfig field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextSdsSecretConfig() {
      return validationContextTypeCase_ == 7;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     * @return The validationContextSdsSecretConfig.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig getValidationContextSdsSecretConfig() {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (validationContextTypeCase_ == 7) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 7) {
          return validationContextSdsSecretConfigBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder setValidationContextSdsSecretConfig(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        validationContextSdsSecretConfigBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder setValidationContextSdsSecretConfig(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder builderForValue) {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        validationContextSdsSecretConfigBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder mergeValidationContextSdsSecretConfig(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig value) {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (validationContextTypeCase_ == 7 &&
            validationContextType_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.newBuilder((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 7) {
          validationContextSdsSecretConfigBuilder_.mergeFrom(value);
        }
        validationContextSdsSecretConfigBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public Builder clearValidationContextSdsSecretConfig() {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (validationContextTypeCase_ == 7) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 7) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        validationContextSdsSecretConfigBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder getValidationContextSdsSecretConfigBuilder() {
      return getValidationContextSdsSecretConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder getValidationContextSdsSecretConfigOrBuilder() {
      if ((validationContextTypeCase_ == 7) && (validationContextSdsSecretConfigBuilder_ != null)) {
        return validationContextSdsSecretConfigBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 7) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Config for fetching validation context via SDS API. Note SDS API allows certificates to be
     * fetched/refreshed over the network asynchronously with respect to the TLS handshake.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig validation_context_sds_secret_config = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder> 
        getValidationContextSdsSecretConfigFieldBuilder() {
      if (validationContextSdsSecretConfigBuilder_ == null) {
        if (!(validationContextTypeCase_ == 7)) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.getDefaultInstance();
        }
        validationContextSdsSecretConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfigOrBuilder>(
                (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 7;
      onChanged();;
      return validationContextSdsSecretConfigBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContextOrBuilder> combinedValidationContextBuilder_;
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     * @return Whether the combinedValidationContext field is set.
     */
    @java.lang.Override
    public boolean hasCombinedValidationContext() {
      return validationContextTypeCase_ == 8;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     * @return The combinedValidationContext.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext getCombinedValidationContext() {
      if (combinedValidationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 8) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 8) {
          return combinedValidationContextBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder setCombinedValidationContext(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext value) {
      if (combinedValidationContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        combinedValidationContextBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder setCombinedValidationContext(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder builderForValue) {
      if (combinedValidationContextBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        combinedValidationContextBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder mergeCombinedValidationContext(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext value) {
      if (combinedValidationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 8 &&
            validationContextType_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.newBuilder((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 8) {
          combinedValidationContextBuilder_.mergeFrom(value);
        }
        combinedValidationContextBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public Builder clearCombinedValidationContext() {
      if (combinedValidationContextBuilder_ == null) {
        if (validationContextTypeCase_ == 8) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 8) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        combinedValidationContextBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder getCombinedValidationContextBuilder() {
      return getCombinedValidationContextFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContextOrBuilder getCombinedValidationContextOrBuilder() {
      if ((validationContextTypeCase_ == 8) && (combinedValidationContextBuilder_ != null)) {
        return combinedValidationContextBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 8) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContextOrBuilder> 
        getCombinedValidationContextFieldBuilder() {
      if (combinedValidationContextBuilder_ == null) {
        if (!(validationContextTypeCase_ == 8)) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.getDefaultInstance();
        }
        combinedValidationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContextOrBuilder>(
                (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 8;
      onChanged();;
      return combinedValidationContextBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder> validationContextCertificateProviderBuilder_;
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     * @return Whether the validationContextCertificateProvider field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextCertificateProvider() {
      return validationContextTypeCase_ == 10;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     * @return The validationContextCertificateProvider.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider getValidationContextCertificateProvider() {
      if (validationContextCertificateProviderBuilder_ == null) {
        if (validationContextTypeCase_ == 10) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 10) {
          return validationContextCertificateProviderBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    public Builder setValidationContextCertificateProvider(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider value) {
      if (validationContextCertificateProviderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        validationContextCertificateProviderBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    public Builder setValidationContextCertificateProvider(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder builderForValue) {
      if (validationContextCertificateProviderBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        validationContextCertificateProviderBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    public Builder mergeValidationContextCertificateProvider(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider value) {
      if (validationContextCertificateProviderBuilder_ == null) {
        if (validationContextTypeCase_ == 10 &&
            validationContextType_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.newBuilder((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 10) {
          validationContextCertificateProviderBuilder_.mergeFrom(value);
        }
        validationContextCertificateProviderBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    public Builder clearValidationContextCertificateProvider() {
      if (validationContextCertificateProviderBuilder_ == null) {
        if (validationContextTypeCase_ == 10) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 10) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        validationContextCertificateProviderBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder getValidationContextCertificateProviderBuilder() {
      return getValidationContextCertificateProviderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder getValidationContextCertificateProviderOrBuilder() {
      if ((validationContextTypeCase_ == 10) && (validationContextCertificateProviderBuilder_ != null)) {
        return validationContextCertificateProviderBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 10) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Certificate provider for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider validation_context_certificate_provider = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder> 
        getValidationContextCertificateProviderFieldBuilder() {
      if (validationContextCertificateProviderBuilder_ == null) {
        if (!(validationContextTypeCase_ == 10)) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.getDefaultInstance();
        }
        validationContextCertificateProviderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderOrBuilder>(
                (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProvider) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 10;
      onChanged();;
      return validationContextCertificateProviderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder> validationContextCertificateProviderInstanceBuilder_;
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     * @return Whether the validationContextCertificateProviderInstance field is set.
     */
    @java.lang.Override
    public boolean hasValidationContextCertificateProviderInstance() {
      return validationContextTypeCase_ == 12;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     * @return The validationContextCertificateProviderInstance.
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance getValidationContextCertificateProviderInstance() {
      if (validationContextCertificateProviderInstanceBuilder_ == null) {
        if (validationContextTypeCase_ == 12) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
      } else {
        if (validationContextTypeCase_ == 12) {
          return validationContextCertificateProviderInstanceBuilder_.getMessage();
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    public Builder setValidationContextCertificateProviderInstance(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance value) {
      if (validationContextCertificateProviderInstanceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        validationContextType_ = value;
        onChanged();
      } else {
        validationContextCertificateProviderInstanceBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    public Builder setValidationContextCertificateProviderInstance(
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder builderForValue) {
      if (validationContextCertificateProviderInstanceBuilder_ == null) {
        validationContextType_ = builderForValue.build();
        onChanged();
      } else {
        validationContextCertificateProviderInstanceBuilder_.setMessage(builderForValue.build());
      }
      validationContextTypeCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    public Builder mergeValidationContextCertificateProviderInstance(io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance value) {
      if (validationContextCertificateProviderInstanceBuilder_ == null) {
        if (validationContextTypeCase_ == 12 &&
            validationContextType_ != io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance()) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.newBuilder((io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_)
              .mergeFrom(value).buildPartial();
        } else {
          validationContextType_ = value;
        }
        onChanged();
      } else {
        if (validationContextTypeCase_ == 12) {
          validationContextCertificateProviderInstanceBuilder_.mergeFrom(value);
        }
        validationContextCertificateProviderInstanceBuilder_.setMessage(value);
      }
      validationContextTypeCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    public Builder clearValidationContextCertificateProviderInstance() {
      if (validationContextCertificateProviderInstanceBuilder_ == null) {
        if (validationContextTypeCase_ == 12) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
          onChanged();
        }
      } else {
        if (validationContextTypeCase_ == 12) {
          validationContextTypeCase_ = 0;
          validationContextType_ = null;
        }
        validationContextCertificateProviderInstanceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder getValidationContextCertificateProviderInstanceBuilder() {
      return getValidationContextCertificateProviderInstanceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    @java.lang.Override
    public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder getValidationContextCertificateProviderInstanceOrBuilder() {
      if ((validationContextTypeCase_ == 12) && (validationContextCertificateProviderInstanceBuilder_ != null)) {
        return validationContextCertificateProviderInstanceBuilder_.getMessageOrBuilder();
      } else {
        if (validationContextTypeCase_ == 12) {
          return (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_;
        }
        return io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Certificate provider instance for fetching validation context.
     * [#not-implemented-hide:]
     * </pre>
     *
     * <code>.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance validation_context_certificate_provider_instance = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder> 
        getValidationContextCertificateProviderInstanceFieldBuilder() {
      if (validationContextCertificateProviderInstanceBuilder_ == null) {
        if (!(validationContextTypeCase_ == 12)) {
          validationContextType_ = io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.getDefaultInstance();
        }
        validationContextCertificateProviderInstanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance.Builder, io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstanceOrBuilder>(
                (io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance) validationContextType_,
                getParentForChildren(),
                isClean());
        validationContextType_ = null;
      }
      validationContextTypeCase_ = 12;
      onChanged();;
      return validationContextCertificateProviderInstanceBuilder_;
    }

    private com.google.protobuf.LazyStringList alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureAlpnProtocolsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        alpnProtocols_ = new com.google.protobuf.LazyStringArrayList(alpnProtocols_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @return A list containing the alpnProtocols.
     */
    public com.google.protobuf.ProtocolStringList
        getAlpnProtocolsList() {
      return alpnProtocols_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @return The count of alpnProtocols.
     */
    public int getAlpnProtocolsCount() {
      return alpnProtocols_.size();
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param index The index of the element to return.
     * @return The alpnProtocols at the given index.
     */
    public java.lang.String getAlpnProtocols(int index) {
      return alpnProtocols_.get(index);
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the alpnProtocols at the given index.
     */
    public com.google.protobuf.ByteString
        getAlpnProtocolsBytes(int index) {
      return alpnProtocols_.getByteString(index);
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param index The index to set the value at.
     * @param value The alpnProtocols to set.
     * @return This builder for chaining.
     */
    public Builder setAlpnProtocols(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAlpnProtocolsIsMutable();
      alpnProtocols_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param value The alpnProtocols to add.
     * @return This builder for chaining.
     */
    public Builder addAlpnProtocols(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAlpnProtocolsIsMutable();
      alpnProtocols_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param values The alpnProtocols to add.
     * @return This builder for chaining.
     */
    public Builder addAllAlpnProtocols(
        java.lang.Iterable<java.lang.String> values) {
      ensureAlpnProtocolsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, alpnProtocols_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAlpnProtocols() {
      alpnProtocols_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Supplies the list of ALPN protocols that the listener should expose. In
     * practice this is likely to be set to one of two values (see the
     * :ref:`codec_type
     * &lt;envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.codec_type&gt;`
     * parameter in the HTTP connection manager for more information):
     * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
     * * "http/1.1" If the listener is only going to support HTTP/1.1.
     * There is no default for this parameter. If empty, Envoy will not expose ALPN.
     * </pre>
     *
     * <code>repeated string alpn_protocols = 4;</code>
     * @param value The bytes of the alpnProtocols to add.
     * @return This builder for chaining.
     */
    public Builder addAlpnProtocolsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureAlpnProtocolsIsMutable();
      alpnProtocols_.add(value);
      onChanged();
      return this;
    }

    private io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig customHandshaker_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> customHandshakerBuilder_;
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     * @return Whether the customHandshaker field is set.
     */
    public boolean hasCustomHandshaker() {
      return customHandshakerBuilder_ != null || customHandshaker_ != null;
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     * @return The customHandshaker.
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig getCustomHandshaker() {
      if (customHandshakerBuilder_ == null) {
        return customHandshaker_ == null ? io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : customHandshaker_;
      } else {
        return customHandshakerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    public Builder setCustomHandshaker(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (customHandshakerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        customHandshaker_ = value;
        onChanged();
      } else {
        customHandshakerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    public Builder setCustomHandshaker(
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder builderForValue) {
      if (customHandshakerBuilder_ == null) {
        customHandshaker_ = builderForValue.build();
        onChanged();
      } else {
        customHandshakerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    public Builder mergeCustomHandshaker(io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig value) {
      if (customHandshakerBuilder_ == null) {
        if (customHandshaker_ != null) {
          customHandshaker_ =
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.newBuilder(customHandshaker_).mergeFrom(value).buildPartial();
        } else {
          customHandshaker_ = value;
        }
        onChanged();
      } else {
        customHandshakerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    public Builder clearCustomHandshaker() {
      if (customHandshakerBuilder_ == null) {
        customHandshaker_ = null;
        onChanged();
      } else {
        customHandshaker_ = null;
        customHandshakerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder getCustomHandshakerBuilder() {
      
      onChanged();
      return getCustomHandshakerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    public io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder getCustomHandshakerOrBuilder() {
      if (customHandshakerBuilder_ != null) {
        return customHandshakerBuilder_.getMessageOrBuilder();
      } else {
        return customHandshaker_ == null ?
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.getDefaultInstance() : customHandshaker_;
      }
    }
    /**
     * <pre>
     * Custom TLS handshaker. If empty, defaults to native TLS handshaking
     * behavior.
     * </pre>
     *
     * <code>.envoy.config.core.v3.TypedExtensionConfig custom_handshaker = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder> 
        getCustomHandshakerFieldBuilder() {
      if (customHandshakerBuilder_ == null) {
        customHandshakerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfig.Builder, io.envoyproxy.envoy.config.core.v3.TypedExtensionConfigOrBuilder>(
                getCustomHandshaker(),
                getParentForChildren(),
                isClean());
        customHandshaker_ = null;
      }
      return customHandshakerBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext)
  }

  // @@protoc_insertion_point(class_scope:envoy.extensions.transport_sockets.tls.v3.CommonTlsContext)
  private static final io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext();
  }

  public static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CommonTlsContext>
      PARSER = new com.google.protobuf.AbstractParser<CommonTlsContext>() {
    @java.lang.Override
    public CommonTlsContext parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CommonTlsContext(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CommonTlsContext> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CommonTlsContext> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

