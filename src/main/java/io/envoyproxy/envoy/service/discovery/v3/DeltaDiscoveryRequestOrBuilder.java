// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/discovery/v3/discovery.proto

package io.envoyproxy.envoy.service.discovery.v3;

public interface DeltaDiscoveryRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.service.discovery.v3.DeltaDiscoveryRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   * @return Whether the node field is set.
   */
  boolean hasNode();
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   * @return The node.
   */
  io.envoyproxy.envoy.config.core.v3.Node getNode();
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 1;</code>
   */
  io.envoyproxy.envoy.config.core.v3.NodeOrBuilder getNodeOrBuilder();

  /**
   * <pre>
   * Type of the resource that is being requested, e.g.
   * "type.googleapis.com/envoy.api.v2.ClusterLoadAssignment". This does not need to be set if
   * resources are only referenced via *xds_resource_subscribe* and
   * *xds_resources_unsubscribe*.
   * </pre>
   *
   * <code>string type_url = 2;</code>
   * @return The typeUrl.
   */
  java.lang.String getTypeUrl();
  /**
   * <pre>
   * Type of the resource that is being requested, e.g.
   * "type.googleapis.com/envoy.api.v2.ClusterLoadAssignment". This does not need to be set if
   * resources are only referenced via *xds_resource_subscribe* and
   * *xds_resources_unsubscribe*.
   * </pre>
   *
   * <code>string type_url = 2;</code>
   * @return The bytes for typeUrl.
   */
  com.google.protobuf.ByteString
      getTypeUrlBytes();

  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @return A list containing the resourceNamesSubscribe.
   */
  java.util.List<java.lang.String>
      getResourceNamesSubscribeList();
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @return The count of resourceNamesSubscribe.
   */
  int getResourceNamesSubscribeCount();
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @param index The index of the element to return.
   * @return The resourceNamesSubscribe at the given index.
   */
  java.lang.String getResourceNamesSubscribe(int index);
  /**
   * <pre>
   * DeltaDiscoveryRequests allow the client to add or remove individual
   * resources to the set of tracked resources in the context of a stream.
   * All resource names in the resource_names_subscribe list are added to the
   * set of tracked resources and all resource names in the resource_names_unsubscribe
   * list are removed from the set of tracked resources.
   * *Unlike* state-of-the-world xDS, an empty resource_names_subscribe or
   * resource_names_unsubscribe list simply means that no resources are to be
   * added or removed to the resource list.
   * *Like* state-of-the-world xDS, the server must send updates for all tracked
   * resources, but can also send updates for resources the client has not subscribed to.
   * NOTE: the server must respond with all resources listed in resource_names_subscribe,
   * even if it believes the client has the most recent version of them. The reason:
   * the client may have dropped them, but then regained interest before it had a chance
   * to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.
   * These two fields can be set in any DeltaDiscoveryRequest, including ACKs
   * and initial_resource_versions.
   * A list of Resource names to add to the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_subscribe = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the resourceNamesSubscribe at the given index.
   */
  com.google.protobuf.ByteString
      getResourceNamesSubscribeBytes(int index);

  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @return A list containing the resourceNamesUnsubscribe.
   */
  java.util.List<java.lang.String>
      getResourceNamesUnsubscribeList();
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @return The count of resourceNamesUnsubscribe.
   */
  int getResourceNamesUnsubscribeCount();
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @param index The index of the element to return.
   * @return The resourceNamesUnsubscribe at the given index.
   */
  java.lang.String getResourceNamesUnsubscribe(int index);
  /**
   * <pre>
   * A list of Resource names to remove from the list of tracked resources.
   * </pre>
   *
   * <code>repeated string resource_names_unsubscribe = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the resourceNamesUnsubscribe at the given index.
   */
  com.google.protobuf.ByteString
      getResourceNamesUnsubscribeBytes(int index);

  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  int getInitialResourceVersionsCount();
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  boolean containsInitialResourceVersions(
      java.lang.String key);
  /**
   * Use {@link #getInitialResourceVersionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getInitialResourceVersions();
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getInitialResourceVersionsMap();
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */

  java.lang.String getInitialResourceVersionsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * Informs the server of the versions of the resources the xDS client knows of, to enable the
   * client to continue the same logical xDS session even in the face of gRPC stream reconnection.
   * It will not be populated: [1] in the very first stream of a session, since the client will
   * not yet have any resources,  [2] in any message after the first in a stream (for a given
   * type_url), since the server will already be correctly tracking the client's state.
   * (In ADS, the first message *of each type_url* of a reconnected stream populates this map.)
   * The map's keys are names of xDS resources known to the xDS client.
   * The map's values are opaque resource versions.
   * </pre>
   *
   * <code>map&lt;string, string&gt; initial_resource_versions = 5;</code>
   */

  java.lang.String getInitialResourceVersionsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * When the DeltaDiscoveryRequest is a ACK or NACK message in response
   * to a previous DeltaDiscoveryResponse, the response_nonce must be the
   * nonce in the DeltaDiscoveryResponse.
   * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
   * </pre>
   *
   * <code>string response_nonce = 6;</code>
   * @return The responseNonce.
   */
  java.lang.String getResponseNonce();
  /**
   * <pre>
   * When the DeltaDiscoveryRequest is a ACK or NACK message in response
   * to a previous DeltaDiscoveryResponse, the response_nonce must be the
   * nonce in the DeltaDiscoveryResponse.
   * Otherwise (unlike in DiscoveryRequest) response_nonce must be omitted.
   * </pre>
   *
   * <code>string response_nonce = 6;</code>
   * @return The bytes for responseNonce.
   */
  com.google.protobuf.ByteString
      getResponseNonceBytes();

  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The *message* field in *error_details*
   * provides the Envoy internal exception related to the failure.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 7;</code>
   * @return Whether the errorDetail field is set.
   */
  boolean hasErrorDetail();
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The *message* field in *error_details*
   * provides the Envoy internal exception related to the failure.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 7;</code>
   * @return The errorDetail.
   */
  com.google.rpc.Status getErrorDetail();
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The *message* field in *error_details*
   * provides the Envoy internal exception related to the failure.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 7;</code>
   */
  com.google.rpc.StatusOrBuilder getErrorDetailOrBuilder();
}
