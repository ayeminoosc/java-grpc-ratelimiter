// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/discovery/v3/discovery.proto

package io.envoyproxy.envoy.service.discovery.v3;

public interface DiscoveryRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.service.discovery.v3.DiscoveryRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The version_info provided in the request messages will be the version_info
   * received with the most recent successfully processed response or empty on
   * the first request. It is expected that no new request is sent after a
   * response is received until the Envoy instance is ready to ACK/NACK the new
   * configuration. ACK/NACK takes place by returning the new API config version
   * as applied or the previous API config version respectively. Each type_url
   * (see below) has an independent version associated with it.
   * </pre>
   *
   * <code>string version_info = 1;</code>
   * @return The versionInfo.
   */
  java.lang.String getVersionInfo();
  /**
   * <pre>
   * The version_info provided in the request messages will be the version_info
   * received with the most recent successfully processed response or empty on
   * the first request. It is expected that no new request is sent after a
   * response is received until the Envoy instance is ready to ACK/NACK the new
   * configuration. ACK/NACK takes place by returning the new API config version
   * as applied or the previous API config version respectively. Each type_url
   * (see below) has an independent version associated with it.
   * </pre>
   *
   * <code>string version_info = 1;</code>
   * @return The bytes for versionInfo.
   */
  com.google.protobuf.ByteString
      getVersionInfoBytes();

  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 2;</code>
   * @return Whether the node field is set.
   */
  boolean hasNode();
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 2;</code>
   * @return The node.
   */
  io.envoyproxy.envoy.config.core.v3.Node getNode();
  /**
   * <pre>
   * The node making the request.
   * </pre>
   *
   * <code>.envoy.config.core.v3.Node node = 2;</code>
   */
  io.envoyproxy.envoy.config.core.v3.NodeOrBuilder getNodeOrBuilder();

  /**
   * <pre>
   * List of resources to subscribe to, e.g. list of cluster names or a route
   * configuration name. If this is empty, all resources for the API are
   * returned. LDS/CDS may have empty resource_names, which will cause all
   * resources for the Envoy instance to be returned. The LDS and CDS responses
   * will then imply a number of resources that need to be fetched via EDS/RDS,
   * which will be explicitly enumerated in resource_names.
   * </pre>
   *
   * <code>repeated string resource_names = 3;</code>
   * @return A list containing the resourceNames.
   */
  java.util.List<java.lang.String>
      getResourceNamesList();
  /**
   * <pre>
   * List of resources to subscribe to, e.g. list of cluster names or a route
   * configuration name. If this is empty, all resources for the API are
   * returned. LDS/CDS may have empty resource_names, which will cause all
   * resources for the Envoy instance to be returned. The LDS and CDS responses
   * will then imply a number of resources that need to be fetched via EDS/RDS,
   * which will be explicitly enumerated in resource_names.
   * </pre>
   *
   * <code>repeated string resource_names = 3;</code>
   * @return The count of resourceNames.
   */
  int getResourceNamesCount();
  /**
   * <pre>
   * List of resources to subscribe to, e.g. list of cluster names or a route
   * configuration name. If this is empty, all resources for the API are
   * returned. LDS/CDS may have empty resource_names, which will cause all
   * resources for the Envoy instance to be returned. The LDS and CDS responses
   * will then imply a number of resources that need to be fetched via EDS/RDS,
   * which will be explicitly enumerated in resource_names.
   * </pre>
   *
   * <code>repeated string resource_names = 3;</code>
   * @param index The index of the element to return.
   * @return The resourceNames at the given index.
   */
  java.lang.String getResourceNames(int index);
  /**
   * <pre>
   * List of resources to subscribe to, e.g. list of cluster names or a route
   * configuration name. If this is empty, all resources for the API are
   * returned. LDS/CDS may have empty resource_names, which will cause all
   * resources for the Envoy instance to be returned. The LDS and CDS responses
   * will then imply a number of resources that need to be fetched via EDS/RDS,
   * which will be explicitly enumerated in resource_names.
   * </pre>
   *
   * <code>repeated string resource_names = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the resourceNames at the given index.
   */
  com.google.protobuf.ByteString
      getResourceNamesBytes(int index);

  /**
   * <pre>
   * Type of the resource that is being requested, e.g.
   * "type.googleapis.com/envoy.api.v2.ClusterLoadAssignment". This is implicit
   * in requests made via singleton xDS APIs such as CDS, LDS, etc. but is
   * required for ADS.
   * </pre>
   *
   * <code>string type_url = 4;</code>
   * @return The typeUrl.
   */
  java.lang.String getTypeUrl();
  /**
   * <pre>
   * Type of the resource that is being requested, e.g.
   * "type.googleapis.com/envoy.api.v2.ClusterLoadAssignment". This is implicit
   * in requests made via singleton xDS APIs such as CDS, LDS, etc. but is
   * required for ADS.
   * </pre>
   *
   * <code>string type_url = 4;</code>
   * @return The bytes for typeUrl.
   */
  com.google.protobuf.ByteString
      getTypeUrlBytes();

  /**
   * <pre>
   * nonce corresponding to DiscoveryResponse being ACK/NACKed. See above
   * discussion on version_info and the DiscoveryResponse nonce comment. This
   * may be empty only if 1) this is a non-persistent-stream xDS such as HTTP,
   * or 2) the client has not yet accepted an update in this xDS stream (unlike
   * delta, where it is populated only for new explicit ACKs).
   * </pre>
   *
   * <code>string response_nonce = 5;</code>
   * @return The responseNonce.
   */
  java.lang.String getResponseNonce();
  /**
   * <pre>
   * nonce corresponding to DiscoveryResponse being ACK/NACKed. See above
   * discussion on version_info and the DiscoveryResponse nonce comment. This
   * may be empty only if 1) this is a non-persistent-stream xDS such as HTTP,
   * or 2) the client has not yet accepted an update in this xDS stream (unlike
   * delta, where it is populated only for new explicit ACKs).
   * </pre>
   *
   * <code>string response_nonce = 5;</code>
   * @return The bytes for responseNonce.
   */
  com.google.protobuf.ByteString
      getResponseNonceBytes();

  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The *message* field in *error_details* provides the Envoy
   * internal exception related to the failure. It is only intended for consumption during manual
   * debugging, the string provided is not guaranteed to be stable across Envoy versions.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 6;</code>
   * @return Whether the errorDetail field is set.
   */
  boolean hasErrorDetail();
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The *message* field in *error_details* provides the Envoy
   * internal exception related to the failure. It is only intended for consumption during manual
   * debugging, the string provided is not guaranteed to be stable across Envoy versions.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 6;</code>
   * @return The errorDetail.
   */
  com.google.rpc.Status getErrorDetail();
  /**
   * <pre>
   * This is populated when the previous :ref:`DiscoveryResponse &lt;envoy_api_msg_service.discovery.v3.DiscoveryResponse&gt;`
   * failed to update configuration. The *message* field in *error_details* provides the Envoy
   * internal exception related to the failure. It is only intended for consumption during manual
   * debugging, the string provided is not guaranteed to be stable across Envoy versions.
   * </pre>
   *
   * <code>.google.rpc.Status error_detail = 6;</code>
   */
  com.google.rpc.StatusOrBuilder getErrorDetailOrBuilder();
}
