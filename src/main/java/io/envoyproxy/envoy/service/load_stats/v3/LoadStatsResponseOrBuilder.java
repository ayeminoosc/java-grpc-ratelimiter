// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/load_stats/v3/lrs.proto

package io.envoyproxy.envoy.service.load_stats.v3;

public interface LoadStatsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.service.load_stats.v3.LoadStatsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Clusters to report stats for.
   * Not populated if *send_all_clusters* is true.
   * </pre>
   *
   * <code>repeated string clusters = 1;</code>
   * @return A list containing the clusters.
   */
  java.util.List<java.lang.String>
      getClustersList();
  /**
   * <pre>
   * Clusters to report stats for.
   * Not populated if *send_all_clusters* is true.
   * </pre>
   *
   * <code>repeated string clusters = 1;</code>
   * @return The count of clusters.
   */
  int getClustersCount();
  /**
   * <pre>
   * Clusters to report stats for.
   * Not populated if *send_all_clusters* is true.
   * </pre>
   *
   * <code>repeated string clusters = 1;</code>
   * @param index The index of the element to return.
   * @return The clusters at the given index.
   */
  java.lang.String getClusters(int index);
  /**
   * <pre>
   * Clusters to report stats for.
   * Not populated if *send_all_clusters* is true.
   * </pre>
   *
   * <code>repeated string clusters = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the clusters at the given index.
   */
  com.google.protobuf.ByteString
      getClustersBytes(int index);

  /**
   * <pre>
   * If true, the client should send all clusters it knows about.
   * Only clients that advertise the "envoy.lrs.supports_send_all_clusters" capability in their
   * :ref:`client_features&lt;envoy_api_field_config.core.v3.Node.client_features&gt;` field will honor this field.
   * </pre>
   *
   * <code>bool send_all_clusters = 4;</code>
   * @return The sendAllClusters.
   */
  boolean getSendAllClusters();

  /**
   * <pre>
   * The minimum interval of time to collect stats over. This is only a minimum for two reasons:
   * 1. There may be some delay from when the timer fires until stats sampling occurs.
   * 2. For clusters that were already feature in the previous *LoadStatsResponse*, any traffic
   *    that is observed in between the corresponding previous *LoadStatsRequest* and this
   *    *LoadStatsResponse* will also be accumulated and billed to the cluster. This avoids a period
   *    of inobservability that might otherwise exists between the messages. New clusters are not
   *    subject to this consideration.
   * </pre>
   *
   * <code>.google.protobuf.Duration load_reporting_interval = 2;</code>
   * @return Whether the loadReportingInterval field is set.
   */
  boolean hasLoadReportingInterval();
  /**
   * <pre>
   * The minimum interval of time to collect stats over. This is only a minimum for two reasons:
   * 1. There may be some delay from when the timer fires until stats sampling occurs.
   * 2. For clusters that were already feature in the previous *LoadStatsResponse*, any traffic
   *    that is observed in between the corresponding previous *LoadStatsRequest* and this
   *    *LoadStatsResponse* will also be accumulated and billed to the cluster. This avoids a period
   *    of inobservability that might otherwise exists between the messages. New clusters are not
   *    subject to this consideration.
   * </pre>
   *
   * <code>.google.protobuf.Duration load_reporting_interval = 2;</code>
   * @return The loadReportingInterval.
   */
  com.google.protobuf.Duration getLoadReportingInterval();
  /**
   * <pre>
   * The minimum interval of time to collect stats over. This is only a minimum for two reasons:
   * 1. There may be some delay from when the timer fires until stats sampling occurs.
   * 2. For clusters that were already feature in the previous *LoadStatsResponse*, any traffic
   *    that is observed in between the corresponding previous *LoadStatsRequest* and this
   *    *LoadStatsResponse* will also be accumulated and billed to the cluster. This avoids a period
   *    of inobservability that might otherwise exists between the messages. New clusters are not
   *    subject to this consideration.
   * </pre>
   *
   * <code>.google.protobuf.Duration load_reporting_interval = 2;</code>
   */
  com.google.protobuf.DurationOrBuilder getLoadReportingIntervalOrBuilder();

  /**
   * <pre>
   * Set to *true* if the management server supports endpoint granularity
   * report.
   * </pre>
   *
   * <code>bool report_endpoint_granularity = 3;</code>
   * @return The reportEndpointGranularity.
   */
  boolean getReportEndpointGranularity();
}
