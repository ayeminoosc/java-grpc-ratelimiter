// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udpa/data/orca/v1/orca_load_report.proto

package com.github.udpa.udpa.data.orca.v1;

public interface OrcaLoadReportOrBuilder extends
    // @@protoc_insertion_point(interface_extends:udpa.data.orca.v1.OrcaLoadReport)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * CPU utilization expressed as a fraction of available CPU resources. This
   * should be derived from the latest sample or measurement.
   * </pre>
   *
   * <code>double cpu_utilization = 1 [(.validate.rules) = { ... }</code>
   * @return The cpuUtilization.
   */
  double getCpuUtilization();

  /**
   * <pre>
   * Memory utilization expressed as a fraction of available memory
   * resources. This should be derived from the latest sample or measurement.
   * </pre>
   *
   * <code>double mem_utilization = 2 [(.validate.rules) = { ... }</code>
   * @return The memUtilization.
   */
  double getMemUtilization();

  /**
   * <pre>
   * Total RPS being served by an endpoint. This should cover all services that an endpoint is
   * responsible for.
   * </pre>
   *
   * <code>uint64 rps = 3;</code>
   * @return The rps.
   */
  long getRps();

  /**
   * <pre>
   * Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
   * storage) associated with the request.
   * </pre>
   *
   * <code>map&lt;string, double&gt; request_cost = 4;</code>
   */
  int getRequestCostCount();
  /**
   * <pre>
   * Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
   * storage) associated with the request.
   * </pre>
   *
   * <code>map&lt;string, double&gt; request_cost = 4;</code>
   */
  boolean containsRequestCost(
      java.lang.String key);
  /**
   * Use {@link #getRequestCostMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Double>
  getRequestCost();
  /**
   * <pre>
   * Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
   * storage) associated with the request.
   * </pre>
   *
   * <code>map&lt;string, double&gt; request_cost = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.Double>
  getRequestCostMap();
  /**
   * <pre>
   * Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
   * storage) associated with the request.
   * </pre>
   *
   * <code>map&lt;string, double&gt; request_cost = 4;</code>
   */

  double getRequestCostOrDefault(
      java.lang.String key,
      double defaultValue);
  /**
   * <pre>
   * Application specific requests costs. Each value is an absolute cost (e.g. 3487 bytes of
   * storage) associated with the request.
   * </pre>
   *
   * <code>map&lt;string, double&gt; request_cost = 4;</code>
   */

  double getRequestCostOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Resource utilization values. Each value is expressed as a fraction of total resources
   * available, derived from the latest sample or measurement.
   * </pre>
   *
   * <code>map&lt;string, double&gt; utilization = 5 [(.validate.rules) = { ... }</code>
   */
  int getUtilizationCount();
  /**
   * <pre>
   * Resource utilization values. Each value is expressed as a fraction of total resources
   * available, derived from the latest sample or measurement.
   * </pre>
   *
   * <code>map&lt;string, double&gt; utilization = 5 [(.validate.rules) = { ... }</code>
   */
  boolean containsUtilization(
      java.lang.String key);
  /**
   * Use {@link #getUtilizationMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Double>
  getUtilization();
  /**
   * <pre>
   * Resource utilization values. Each value is expressed as a fraction of total resources
   * available, derived from the latest sample or measurement.
   * </pre>
   *
   * <code>map&lt;string, double&gt; utilization = 5 [(.validate.rules) = { ... }</code>
   */
  java.util.Map<java.lang.String, java.lang.Double>
  getUtilizationMap();
  /**
   * <pre>
   * Resource utilization values. Each value is expressed as a fraction of total resources
   * available, derived from the latest sample or measurement.
   * </pre>
   *
   * <code>map&lt;string, double&gt; utilization = 5 [(.validate.rules) = { ... }</code>
   */

  double getUtilizationOrDefault(
      java.lang.String key,
      double defaultValue);
  /**
   * <pre>
   * Resource utilization values. Each value is expressed as a fraction of total resources
   * available, derived from the latest sample or measurement.
   * </pre>
   *
   * <code>map&lt;string, double&gt; utilization = 5 [(.validate.rules) = { ... }</code>
   */

  double getUtilizationOrThrow(
      java.lang.String key);
}
